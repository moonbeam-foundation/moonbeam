[alias]
moonbase = " build --release -p moonbeam --no-default-features --features moonbase-native"
moonbase-benchmarks = " build --release -p moonbeam --no-default-features --features moonbase-runtime-benchmarks"
moonbase-rococo = " build --release -p moonbeam --no-default-features --features moonbase-native,rococo-native"
moonriver = " build --release -p moonbeam --no-default-features --features moonriver-native"
moonriver-rococo = " build --release -p moonbeam --no-default-features --features moonriver-native,rococo-native"
moonriver-kusama = " build --release -p moonbeam --no-default-features --features moonriver-native,kusama-native"
moonbeam = " build --release -p moonbeam --no-default-features --features moonbeam-native"
moonbeam-rococo = " build --release -p moonbeam --no-default-features --features moonbeam-native,rococo-native"

#
# An auto defined `clippy` feature was introduced,
# but it was found to clash with user defined features,
# so was renamed to `cargo-clippy`.
#
# If you want standard clippy run:
# RUSTFLAGS= cargo clippy
[target.'cfg(feature = "cargo-clippy")']
rustflags = [
  "-Aclippy::all",
  "-Dclippy::correctness",
  "-Dclippy::complexity",
  "-Dclippy::unwrap_used",
  "-Aclippy::if-same-then-else",
  "-Aclippy::clone-double-ref",
  "-Aclippy::clone_on_copy",             # Too common
  "-Aclippy::needless_lifetimes",        # Backward compat?
  "-Aclippy::zero-prefixed-literal",     # 00_1000_000
  "-Aclippy::type_complexity",           # raison d'etre
  "-Aclippy::nonminimal-bool",           # maybe
  "-Aclippy::borrowed-box",              # Reasonable to fix this one
  "-Aclippy::too-many-arguments",        # (Turning this on would lead to)
  "-Aclippy::unnecessary_cast",          # Types may change
  "-Aclippy::identity-op",               # One case where we do 0 + 
  "-Aclippy::useless_conversion",        # Types may change
  "-Aclippy::unit_arg",                  # styalistic.
  "-Aclippy::option-map-unit-fn",        # styalistic
  "-Aclippy::bind_instead_of_map",       # styalistic 
  "-Aclippy::erasing_op",                # E.g. 0 * DOLLARS
  "-Aclippy::eq_op",                     # In tests we test equality.
  "-Aclippy::while_immutable_condition", # false positives
  "-Aclippy::needless_option_as_deref",  # false positives
  "-Aclippy::derivable_impls",           # false positives
  "-Aclippy::explicit_counter_loop"      # irrelevant
]
