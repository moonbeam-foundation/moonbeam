name: Cargo build
description: |
  Builds moonbeam with given features.
  Stores the result in "build/moonbeam" and the runtimes in "runtimes/"

inputs:
  features:
    description: features to include in the build (comma separated)
    required: false

runs:
  using: "composite"
  steps:
    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.4
    - name: Setup Variables
      shell: bash
      run: |
        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_CACHE_SIZE=100GB" >> $GITHUB_ENV
        # Set RUSTFLAGS if not already set
        if [ -z "$RUSTFLAGS" ]; then
          echo "RUSTFLAGS=-C opt-level=3 -D warnings -C linker=clang -C link-arg=-fuse-ld=$(pwd)/mold/bin/mold" >> $GITHUB_ENV
        fi
    - name: Setup Mold Linker
      shell: bash
      run: |
        mkdir -p mold
        curl -L --retry 10 --silent --show-error https://github.com/rui314/mold/releases/download/v2.30.0/mold-2.30.0-$(uname -m)-linux.tar.gz | tar -C $(realpath mold) --strip-components=1 -xzf -
    - name: Build moonbeam
      shell: bash
      run: |
        env
        params=" --locked --release -p moonbeam"
        if [ -n "${{ inputs.features }}" ]; then
          params="$params --features ${{ inputs.features }}"
        fi
        echo "cargo build $params"
        # Build moonbeam
        docker build \
          --tag ci --no-cache \
          --build-arg="BUILD_PARAMS=$params" \
          --build-arg="RUSTFLAGS=$RUSTFLAGS" \
          -f $(pwd)/docker/moonbeam-builder.Dockerfile $(pwd)
    - name: Check glibc version
      shell: bash
      run: |
        objdump -T ./target/release/moonbeam | grep GLIBC | sed 's/.*GLIBC_\([.0-9]*\).*/\1/g' | sort -V
        echo "TODO: add checks"
    - name: Display binary comments
      shell: bash
      run: readelf -p .comment ./target/release/moonbeam
    - name: Display sccache stats
      shell: bash
      run: ${SCCACHE_PATH} --show-stats
    - name: Verify binary version
      shell: bash
      run: |
        GIT_COMMIT=`git log -1 --format="%H" | cut -c1-7`
        MB_VERSION=`./target/release/moonbeam --version`
        echo "Checking $MB_VERSION contains $GIT_COMMIT"
        echo "$MB_VERSION" | grep $GIT_COMMIT
    - name: Save runtimes wasm
      shell: bash
      run: |
        mkdir -p runtimes
        cp target/release/wbuild/moon*/moon*_runtime.compact.compressed.wasm runtimes/;
        mkdir -p uncompressed-runtimes;
        cp target/release/wbuild/moon*/moon*_runtime.wasm uncompressed-runtimes/;
    - name: Save moonbeam binary
      shell: bash
      run: |
        mkdir -p build
        cp target/release/moonbeam build/moonbeam;
