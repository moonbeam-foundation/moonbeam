name: Cargo build
description: |
  Builds moonbeam with given features.
  Stores the result in "build/moonbeam" and the runtimes in "runtimes/"

inputs:
  features:
    description: features to include in the build (comma separated)
    required: false

runs:
  using: "composite"
  steps:
    - name: Build moonbeam
      shell: bash
      run: |
        env
        params=" --locked --release -p moonbeam"
        if [ -n "${{ inputs.features }}" ]; then
          params="$params --features ${{ inputs.features }}"
        fi
        echo "cargo build $params"
        # Build moonbeam
        docker build \
          --tag ci --no-cache \
          --build-arg="BUILD_PARAMS=$params" \
          --build-arg="RUSTFLAGS=$RUSTFLAGS" \
          -f $(pwd)/docker/moonbeam-builder.Dockerfile $(pwd)
        
        # Copy target folder
        docker rm -f dummy 2> /dev/null | true
        docker create -ti --name dummy ci bash
        docker cp dummy:/build/target target
        docker rm -f dummy

        ls -al ./target

        GLIBC_VERSION="$(objdump -T ./target/release/moonbeam | grep "GLIBC_" | sed 's/.*GLIBC_\([.0-9]*\).*/\1/g' | sort -Vu | tail -1)"

        if [[ $GLIBC_VERSION == "2.34" ]]; then
          echo "✅ Using expected GLIBC version: ${GLIBC_VERSION}";
        else
          echo "❌ Unexpected GLIBC version: ${GLIBC_VERSION}";
          exit 1;
        fi

        # Cleanup
        docker rmi ci
        
    - name: Display binary comments
      shell: bash
      run: readelf -p .comment ./target/release/moonbeam
    - name: Verify binary version
      shell: bash
      run: |
        GIT_COMMIT=`git log -1 --format="%H" | cut -c1-7`
        MB_VERSION=`./target/release/moonbeam --version`
        echo "Checking $MB_VERSION contains $GIT_COMMIT"
        echo "$MB_VERSION" | grep $GIT_COMMIT
    - name: Save runtimes wasm
      shell: bash
      run: |
        mkdir -p runtimes
        cp target/release/wbuild/moon*/moon*_runtime.compact.compressed.wasm runtimes/;
        mkdir -p uncompressed-runtimes;
        cp target/release/wbuild/moon*/moon*_runtime.wasm uncompressed-runtimes/;
    - name: Save moonbeam binary
      shell: bash
      run: |
        mkdir -p build
        cp target/release/moonbeam build/moonbeam;
