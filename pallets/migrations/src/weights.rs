// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.


//! Autogenerated weights for pallet_migrations
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmarker`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./benchmarking/frame-weight-template.hbs
// --json-file
// raw.json
// --output
// weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_migrations.
pub trait WeightInfo {
	fn migrate_democracy_preimage(x: u32, ) -> Weight;
}

/// Weights for pallet_migrations using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(79), added: 2554, mode: MaxEncodedLen)
	/// Storage: unknown `0xf2794c22e353e9a839f12faab03a911bf68967d635641a7087e53f2bff1ecad3` (r:1 w:1)
	/// Proof Skipped: unknown `0xf2794c22e353e9a839f12faab03a911bf68967d635641a7087e53f2bff1ecad3` (r:1 w:1)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `x` is `[5, 100]`.
	fn migrate_democracy_preimage(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256 + x * (1 ±0)`
		//  Estimated: `7265 + x * (1 ±0)`
		// Minimum execution time: 24_147_000 picoseconds.
		Weight::from_parts(25_275_713, 7265)
			// Standard Error: 467
			.saturating_add(Weight::from_parts(11, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(x.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (max_values: None, max_size: Some(79), added: 2554, mode: MaxEncodedLen)
	/// Storage: unknown `0xf2794c22e353e9a839f12faab03a911bf68967d635641a7087e53f2bff1ecad3` (r:1 w:1)
	/// Proof Skipped: unknown `0xf2794c22e353e9a839f12faab03a911bf68967d635641a7087e53f2bff1ecad3` (r:1 w:1)
	/// Storage: Preimage PreimageFor (r:0 w:1)
	/// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: MaxEncodedLen)
	/// The range of component `x` is `[5, 100]`.
	fn migrate_democracy_preimage(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256 + x * (1 ±0)`
		//  Estimated: `7265 + x * (1 ±0)`
		// Minimum execution time: 24_147_000 picoseconds.
		Weight::from_parts(25_275_713, 7265)
			// Standard Error: 467
			.saturating_add(Weight::from_parts(11, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(x.into()))
	}
}