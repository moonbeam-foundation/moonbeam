// Copyright 2025 Moonbeam foundation
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.1.0
//! DATE: 2025-05-28, STEPS: `5`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Mac`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --runtime=./target/release/wbuild/moonbase-runtime/moonbase_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=5
// --repeat=5
// --pallet=pallet-parachain-staking
// --extrinsic=
// --wasm-execution=compiled
// --header=./file_header.txt
// --template=../polkadot-sdk/substrate/.maintain/frame-weight-template.hbs
// --output=./pallets/parachain-staking/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_parachain_staking`.
pub trait WeightInfo {
	fn set_staking_expectations() -> Weight;
	fn set_inflation() -> Weight;
	fn set_parachain_bond_account() -> Weight;
	fn set_parachain_bond_reserve_percent() -> Weight;
	fn set_inflation_distribution_config() -> Weight;
	fn set_total_selected() -> Weight;
	fn set_collator_commission() -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn join_candidates(x: u32, ) -> Weight;
	fn schedule_leave_candidates(x: u32, ) -> Weight;
	fn execute_leave_candidates_worst_case(x: u32, ) -> Weight;
	fn execute_leave_candidates_ideal(x: u32, y: u32, ) -> Weight;
	fn cancel_leave_candidates(x: u32, ) -> Weight;
	fn go_offline(x: u32, ) -> Weight;
	fn go_online(x: u32, ) -> Weight;
	fn candidate_bond_more(x: u32, ) -> Weight;
	fn schedule_candidate_bond_less() -> Weight;
	fn execute_candidate_bond_less(x: u32, ) -> Weight;
	fn set_candidate_bond_to_zero(x: u32, ) -> Weight;
	fn cancel_candidate_bond_less() -> Weight;
	fn schedule_revoke_delegation(x: u32, ) -> Weight;
	fn delegator_bond_more(x: u32, ) -> Weight;
	fn schedule_delegator_bond_less(x: u32, ) -> Weight;
	fn execute_revoke_delegation() -> Weight;
	fn execute_delegator_revoke_delegation_worst() -> Weight;
	fn execute_delegator_bond_less_worst() -> Weight;
	fn cancel_delegation_request(x: u32, ) -> Weight;
	fn prepare_staking_payouts() -> Weight;
	fn get_rewardable_delegators(y: u32, ) -> Weight;
	fn select_top_candidates(x: u32, y: u32, ) -> Weight;
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight;
	fn pay_one_collator_reward(y: u32, ) -> Weight;
	fn base_on_initialize() -> Weight;
	fn set_auto_compound(x: u32, y: u32, ) -> Weight;
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight;
	fn delegate_with_auto_compound_worst() -> Weight;
	fn mint_collator_reward() -> Weight;
	fn notify_inactive_collator() -> Weight;
	fn mark_collators_as_inactive(x: u32, ) -> Weight;
}

/// Weights for `pallet_parachain_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_staking_expectations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `1573`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1573)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `1573`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 1573)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `1515`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 1515)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_reserve_percent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `1515`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_000_000, 1515)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation_distribution_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `1515`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1515)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28`
		//  Estimated: `1513`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `27`
		//  Estimated: `1512`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1512)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `116`
		//  Estimated: `1601`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_000_000, 1601)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn join_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1362 + x * (38 ±0)`
		//  Estimated: `4752 + x * (43 ±1)`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(52_318_389, 4752)
			// Standard Error: 8_778
			.saturating_add(Weight::from_parts(4_758, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659 + x * (37 ±0)`
		//  Estimated: `3867 + x * (39 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_347_472, 3867)
			// Standard Error: 1_726
			.saturating_add(Weight::from_parts(18_964, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:350 w:350)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:350 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates_worst_case(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1335 + x * (424 ±0)`
		//  Estimated: `4824 + x * (3762 ±0)`
		// Minimum execution time: 88_000_000 picoseconds.
		Weight::from_parts(89_000_000, 4824)
			// Standard Error: 428_679
			.saturating_add(Weight::from_parts(35_204_477, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:350 w:350)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:350 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	/// The range of component `y` is `[2, 350]`.
	fn execute_leave_candidates_ideal(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1335 + x * (424 ±0)`
		//  Estimated: `4824 + x * (3762 ±1)`
		// Minimum execution time: 86_000_000 picoseconds.
		Weight::from_parts(26_462_835, 4824)
			// Standard Error: 543_955
			.saturating_add(Weight::from_parts(36_727_969, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627 + x * (37 ±0)`
		//  Estimated: `3835 + x * (39 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_795_847, 3835)
			// Standard Error: 4_438
			.saturating_add(Weight::from_parts(27_050, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_offline(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562 + x * (38 ±0)`
		//  Estimated: `3828 + x * (39 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_923_486, 3828)
			// Standard Error: 4_768
			.saturating_add(Weight::from_parts(22_719, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_online(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `526 + x * (38 ±0)`
		//  Estimated: `3791 + x * (39 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_968_503, 3791)
			// Standard Error: 20_880
			.saturating_add(Weight::from_parts(54_871, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn candidate_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `880 + x * (44 ±0)`
		//  Estimated: `4752 + x * (45 ±1)`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(44_050_148, 4752)
			// Standard Error: 4_044
			.saturating_add(Weight::from_parts(34_762, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171`
		//  Estimated: `3636`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3636)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn execute_candidate_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1039 + x * (43 ±0)`
		//  Estimated: `4752 + x * (45 ±1)`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_969_995, 4752)
			// Standard Error: 8_187
			.saturating_add(Weight::from_parts(56_853, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn set_candidate_bond_to_zero(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1019 + x * (43 ±0)`
		//  Estimated: `4752 + x * (45 ±1)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(41_054_699, 4752)
			// Standard Error: 5_726
			.saturating_add(Weight::from_parts(29_394, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3656)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_revoke_delegation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `233 + x * (43 ±0)`
		//  Estimated: `3832 + x * (44 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(18_217_710, 3832)
			// Standard Error: 7_999
			.saturating_add(Weight::from_parts(61_513, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn delegator_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2205 + x * (78 ±0)`
		//  Estimated: `5197 + x * (78 ±1)`
		// Minimum execution time: 59_000_000 picoseconds.
		Weight::from_parts(62_422_812, 5197)
			// Standard Error: 17_857
			.saturating_add(Weight::from_parts(115_062, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 78).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_delegator_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `233 + x * (43 ±0)`
		//  Estimated: `3832 + x * (44 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(16_945_847, 3832)
			// Standard Error: 3_363
			.saturating_add(Weight::from_parts(58_481, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1029`
		//  Estimated: `4752`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(69_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_revoke_delegation_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37373`
		//  Estimated: `40838`
		// Minimum execution time: 106_000_000 picoseconds.
		Weight::from_parts(109_000_000, 40838)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `29995`
		//  Estimated: `33460`
		// Minimum execution time: 91_000_000 picoseconds.
		Weight::from_parts(91_000_000, 33460)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn cancel_delegation_request(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528 + x * (42 ±0)`
		//  Estimated: `3947 + x * (43 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_077_616, 3947)
			// Standard Error: 10_394
			.saturating_add(Weight::from_parts(92_550, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn prepare_staking_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3468`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 3468)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 100]`.
	fn get_rewardable_delegators(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88 + y * (36 ±0)`
		//  Estimated: `3553 + y * (36 ±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_533_333, 3553)
			// Standard Error: 3_623
			.saturating_add(Weight::from_parts(18_666, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:51 w:0)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:51 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:51 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:51 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:0 w:51)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 50]`.
	/// The range of component `y` is `[0, 100]`.
	fn select_top_candidates(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (3818 ±0) + y * (1800 ±0)`
		//  Estimated: `3710 + x * (4038 ±272) + y * (655 ±135)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3710)
			// Standard Error: 340_718
			.saturating_add(Weight::from_parts(14_437_099, 0).saturating_mul(x.into()))
			// Standard Error: 170_113
			.saturating_add(Weight::from_parts(825_448, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 4038).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 655).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:349 w:349)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:349 w:349)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:349 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 349]`.
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (389 ±0) + y * (144 ±0) + z * (41 ±0)`
		//  Estimated: `328284 + x * (2591 ±15) + y * (1733 ±15) + z * (41 ±0)`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 328284)
			// Standard Error: 3_294_280
			.saturating_add(Weight::from_parts(51_522_230, 0).saturating_mul(x.into()))
			// Standard Error: 3_294_280
			.saturating_add(Weight::from_parts(27_230_881, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1733).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(z.into()))
	}
	/// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:2 w:1)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:1 w:1)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MoonbeamOrbiters::OrbiterPerRound` (r:1 w:0)
	/// Proof: `MoonbeamOrbiters::OrbiterPerRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:301 w:301)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1430 + y * (162 ±0)`
		//  Estimated: `6996 + y * (2591 ±0)`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(48_933_333, 6996)
			// Standard Error: 41_898
			.saturating_add(Weight::from_parts(21_164_000, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(y.into()))
	}
	fn base_on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 0)
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 300]`.
	/// The range of component `y` is `[0, 100]`.
	fn set_auto_compound(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427 + x * (23 ±0) + y * (36 ±0)`
		//  Estimated: `3802 + x * (24 ±0) + y * (36 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_800_000, 3802)
			// Standard Error: 2_662
			.saturating_add(Weight::from_parts(23_407, 0).saturating_mul(x.into()))
			// Standard Error: 7_987
			.saturating_add(Weight::from_parts(28_444, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 24).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 350]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 99]`.
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (61 ±0) + y * (21 ±0) + z * (81 ±0)`
		//  Estimated: `13937 + x * (55 ±2) + y * (21 ±2) + z * (86 ±8)`
		// Minimum execution time: 70_000_000 picoseconds.
		Weight::from_parts(52_648_899, 13937)
			// Standard Error: 12_492
			.saturating_add(Weight::from_parts(110_458, 0).saturating_mul(x.into()))
			// Standard Error: 12_527
			.saturating_add(Weight::from_parts(41_663, 0).saturating_mul(y.into()))
			// Standard Error: 44_006
			.saturating_add(Weight::from_parts(18_143, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 86).saturating_mul(z.into()))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:2 w:2)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:2 w:2)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:2 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn delegate_with_auto_compound_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `48154`
		//  Estimated: `54094`
		// Minimum execution time: 168_000_000 picoseconds.
		Weight::from_parts(171_000_000, 54094)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn mint_collator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `3581`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::EnableMarkingOffline` (r:1 w:0)
	/// Proof: `ParachainStaking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::WasInactive` (r:2 w:0)
	/// Proof: `ParachainStaking::WasInactive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MoonbeamOrbiters::OrbiterPerRound` (r:1 w:0)
	/// Proof: `MoonbeamOrbiters::OrbiterPerRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn notify_inactive_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `11212`
		//  Estimated: `17152`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 17152)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::AtStake` (r:52 w:0)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:51 w:0)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::WasInactive` (r:0 w:51)
	/// Proof: `ParachainStaking::WasInactive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 50]`.
	fn mark_collators_as_inactive(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `102 + x * (104 ±0)`
		//  Estimated: `6051 + x * (2579 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(11_440_576, 6051)
			// Standard Error: 265_764
			.saturating_add(Weight::from_parts(12_724_170, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2579).saturating_mul(x.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_staking_expectations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `1573`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1573)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `1573`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 1573)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `1515`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 1515)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_reserve_percent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `1515`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_000_000, 1515)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation_distribution_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `1515`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1515)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28`
		//  Estimated: `1513`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `27`
		//  Estimated: `1512`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1512)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `116`
		//  Estimated: `1601`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_000_000, 1601)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn join_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1362 + x * (38 ±0)`
		//  Estimated: `4752 + x * (43 ±1)`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(52_318_389, 4752)
			// Standard Error: 8_778
			.saturating_add(Weight::from_parts(4_758, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659 + x * (37 ±0)`
		//  Estimated: `3867 + x * (39 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_347_472, 3867)
			// Standard Error: 1_726
			.saturating_add(Weight::from_parts(18_964, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:350 w:350)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:350 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates_worst_case(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1335 + x * (424 ±0)`
		//  Estimated: `4824 + x * (3762 ±0)`
		// Minimum execution time: 88_000_000 picoseconds.
		Weight::from_parts(89_000_000, 4824)
			// Standard Error: 428_679
			.saturating_add(Weight::from_parts(35_204_477, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:350 w:350)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:350 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	/// The range of component `y` is `[2, 350]`.
	fn execute_leave_candidates_ideal(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1335 + x * (424 ±0)`
		//  Estimated: `4824 + x * (3762 ±1)`
		// Minimum execution time: 86_000_000 picoseconds.
		Weight::from_parts(26_462_835, 4824)
			// Standard Error: 543_955
			.saturating_add(Weight::from_parts(36_727_969, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627 + x * (37 ±0)`
		//  Estimated: `3835 + x * (39 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_795_847, 3835)
			// Standard Error: 4_438
			.saturating_add(Weight::from_parts(27_050, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_offline(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562 + x * (38 ±0)`
		//  Estimated: `3828 + x * (39 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_923_486, 3828)
			// Standard Error: 4_768
			.saturating_add(Weight::from_parts(22_719, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_online(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `526 + x * (38 ±0)`
		//  Estimated: `3791 + x * (39 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_968_503, 3791)
			// Standard Error: 20_880
			.saturating_add(Weight::from_parts(54_871, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn candidate_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `880 + x * (44 ±0)`
		//  Estimated: `4752 + x * (45 ±1)`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(44_050_148, 4752)
			// Standard Error: 4_044
			.saturating_add(Weight::from_parts(34_762, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171`
		//  Estimated: `3636`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3636)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn execute_candidate_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1039 + x * (43 ±0)`
		//  Estimated: `4752 + x * (45 ±1)`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_969_995, 4752)
			// Standard Error: 8_187
			.saturating_add(Weight::from_parts(56_853, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn set_candidate_bond_to_zero(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1019 + x * (43 ±0)`
		//  Estimated: `4752 + x * (45 ±1)`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(41_054_699, 4752)
			// Standard Error: 5_726
			.saturating_add(Weight::from_parts(29_394, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3656)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_revoke_delegation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `233 + x * (43 ±0)`
		//  Estimated: `3832 + x * (44 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(18_217_710, 3832)
			// Standard Error: 7_999
			.saturating_add(Weight::from_parts(61_513, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn delegator_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2205 + x * (78 ±0)`
		//  Estimated: `5197 + x * (78 ±1)`
		// Minimum execution time: 59_000_000 picoseconds.
		Weight::from_parts(62_422_812, 5197)
			// Standard Error: 17_857
			.saturating_add(Weight::from_parts(115_062, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 78).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_delegator_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `233 + x * (43 ±0)`
		//  Estimated: `3832 + x * (44 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(16_945_847, 3832)
			// Standard Error: 3_363
			.saturating_add(Weight::from_parts(58_481, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1029`
		//  Estimated: `4752`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(69_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_revoke_delegation_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37373`
		//  Estimated: `40838`
		// Minimum execution time: 106_000_000 picoseconds.
		Weight::from_parts(109_000_000, 40838)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `29995`
		//  Estimated: `33460`
		// Minimum execution time: 91_000_000 picoseconds.
		Weight::from_parts(91_000_000, 33460)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn cancel_delegation_request(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528 + x * (42 ±0)`
		//  Estimated: `3947 + x * (43 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_077_616, 3947)
			// Standard Error: 10_394
			.saturating_add(Weight::from_parts(92_550, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn prepare_staking_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3468`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 3468)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 100]`.
	fn get_rewardable_delegators(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88 + y * (36 ±0)`
		//  Estimated: `3553 + y * (36 ±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_533_333, 3553)
			// Standard Error: 3_623
			.saturating_add(Weight::from_parts(18_666, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:51 w:0)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:51 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:51 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:51 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:0 w:51)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 50]`.
	/// The range of component `y` is `[0, 100]`.
	fn select_top_candidates(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (3818 ±0) + y * (1800 ±0)`
		//  Estimated: `3710 + x * (4038 ±272) + y * (655 ±135)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3710)
			// Standard Error: 340_718
			.saturating_add(Weight::from_parts(14_437_099, 0).saturating_mul(x.into()))
			// Standard Error: 170_113
			.saturating_add(Weight::from_parts(825_448, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 4038).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 655).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:349 w:349)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:349 w:349)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:349 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 349]`.
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (389 ±0) + y * (144 ±0) + z * (41 ±0)`
		//  Estimated: `328284 + x * (2591 ±15) + y * (1733 ±15) + z * (41 ±0)`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 328284)
			// Standard Error: 3_294_280
			.saturating_add(Weight::from_parts(51_522_230, 0).saturating_mul(x.into()))
			// Standard Error: 3_294_280
			.saturating_add(Weight::from_parts(27_230_881, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 1733).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(z.into()))
	}
	/// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:2 w:1)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:1 w:1)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MoonbeamOrbiters::OrbiterPerRound` (r:1 w:0)
	/// Proof: `MoonbeamOrbiters::OrbiterPerRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:301 w:301)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1430 + y * (162 ±0)`
		//  Estimated: `6996 + y * (2591 ±0)`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(48_933_333, 6996)
			// Standard Error: 41_898
			.saturating_add(Weight::from_parts(21_164_000, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(y.into()))
	}
	fn base_on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 0)
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 300]`.
	/// The range of component `y` is `[0, 100]`.
	fn set_auto_compound(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427 + x * (23 ±0) + y * (36 ±0)`
		//  Estimated: `3802 + x * (24 ±0) + y * (36 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_800_000, 3802)
			// Standard Error: 2_662
			.saturating_add(Weight::from_parts(23_407, 0).saturating_mul(x.into()))
			// Standard Error: 7_987
			.saturating_add(Weight::from_parts(28_444, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 24).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 350]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 99]`.
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (61 ±0) + y * (21 ±0) + z * (81 ±0)`
		//  Estimated: `13937 + x * (55 ±2) + y * (21 ±2) + z * (86 ±8)`
		// Minimum execution time: 70_000_000 picoseconds.
		Weight::from_parts(52_648_899, 13937)
			// Standard Error: 12_492
			.saturating_add(Weight::from_parts(110_458, 0).saturating_mul(x.into()))
			// Standard Error: 12_527
			.saturating_add(Weight::from_parts(41_663, 0).saturating_mul(y.into()))
			// Standard Error: 44_006
			.saturating_add(Weight::from_parts(18_143, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 86).saturating_mul(z.into()))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:2 w:2)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:2 w:2)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:2 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn delegate_with_auto_compound_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `48154`
		//  Estimated: `54094`
		// Minimum execution time: 168_000_000 picoseconds.
		Weight::from_parts(171_000_000, 54094)
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn mint_collator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `3581`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ParachainStaking::EnableMarkingOffline` (r:1 w:0)
	/// Proof: `ParachainStaking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::WasInactive` (r:2 w:0)
	/// Proof: `ParachainStaking::WasInactive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MoonbeamOrbiters::OrbiterPerRound` (r:1 w:0)
	/// Proof: `MoonbeamOrbiters::OrbiterPerRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn notify_inactive_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `11212`
		//  Estimated: `17152`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 17152)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ParachainStaking::AtStake` (r:52 w:0)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:51 w:0)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::WasInactive` (r:0 w:51)
	/// Proof: `ParachainStaking::WasInactive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 50]`.
	fn mark_collators_as_inactive(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `102 + x * (104 ±0)`
		//  Estimated: `6051 + x * (2579 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(11_440_576, 6051)
			// Standard Error: 265_764
			.saturating_add(Weight::from_parts(12_724_170, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2579).saturating_mul(x.into()))
	}
}
