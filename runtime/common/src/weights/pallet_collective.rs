// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-0-0-176`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("moonbase-dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --chain=moonbase-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `CouncilCollective::Members` (r:1 w:1)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:0)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Voting` (r:100 w:100)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Prime` (r:0 w:1)
	/// Proof: `CouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (2021 ±0) + p * (2026 ±0)`
		//  Estimated: `12238 + m * (1231 ±14) + p * (3660 ±14)`
		// Minimum execution time: 21_924_000 picoseconds.
		Weight::from_parts(21_974_000, 0)
			.saturating_add(Weight::from_parts(0, 12238))
			// Standard Error: 51_132
			.saturating_add(Weight::from_parts(3_576_175, 0).saturating_mul(m.into()))
			// Standard Error: 51_132
			.saturating_add(Weight::from_parts(7_940_856, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1231).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3660).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149 + m * (20 ±0)`
		//  Estimated: `1634 + m * (20 ±0)`
		// Minimum execution time: 25_512_000 picoseconds.
		Weight::from_parts(24_799_847, 0)
			.saturating_add(Weight::from_parts(0, 1634))
			// Standard Error: 26
			.saturating_add(Weight::from_parts(1_552, 0).saturating_mul(b.into()))
			// Standard Error: 277
			.saturating_add(Weight::from_parts(12_733, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:1 w:0)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149 + m * (20 ±0)`
		//  Estimated: `3614 + m * (20 ±0)`
		// Minimum execution time: 29_347_000 picoseconds.
		Weight::from_parts(28_700_025, 0)
			.saturating_add(Weight::from_parts(0, 3614))
			// Standard Error: 36
			.saturating_add(Weight::from_parts(1_589, 0).saturating_mul(b.into()))
			// Standard Error: 376
			.saturating_add(Weight::from_parts(24_333, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalCount` (r:1 w:1)
	/// Proof: `CouncilCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Voting` (r:0 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `395 + m * (20 ±0) + p * (36 ±0)`
		//  Estimated: `3789 + m * (21 ±0) + p * (36 ±0)`
		// Minimum execution time: 35_076_000 picoseconds.
		Weight::from_parts(34_609_003, 0)
			.saturating_add(Weight::from_parts(0, 3789))
			// Standard Error: 118
			.saturating_add(Weight::from_parts(3_341, 0).saturating_mul(b.into()))
			// Standard Error: 1_233
			.saturating_add(Weight::from_parts(29_451, 0).saturating_mul(m.into()))
			// Standard Error: 1_218
			.saturating_add(Weight::from_parts(274_861, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `870 + m * (40 ±0)`
		//  Estimated: `4334 + m * (40 ±0)`
		// Minimum execution time: 34_195_000 picoseconds.
		Weight::from_parts(35_196_216, 0)
			.saturating_add(Weight::from_parts(0, 4334))
			// Standard Error: 731
			.saturating_add(Weight::from_parts(35_504, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
	}
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `447 + m * (40 ±0) + p * (36 ±0)`
		//  Estimated: `3892 + m * (41 ±0) + p * (36 ±0)`
		// Minimum execution time: 38_828_000 picoseconds.
		Weight::from_parts(39_125_749, 0)
			.saturating_add(Weight::from_parts(0, 3892))
			// Standard Error: 1_615
			.saturating_add(Weight::from_parts(41_692, 0).saturating_mul(m.into()))
			// Standard Error: 1_575
			.saturating_add(Weight::from_parts(282_253, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791 + b * (1 ±0) + m * (40 ±0) + p * (40 ±0)`
		//  Estimated: `4108 + b * (1 ±0) + m * (42 ±0) + p * (40 ±0)`
		// Minimum execution time: 61_069_000 picoseconds.
		Weight::from_parts(61_324_493, 0)
			.saturating_add(Weight::from_parts(0, 4108))
			// Standard Error: 133
			.saturating_add(Weight::from_parts(3_083, 0).saturating_mul(b.into()))
			// Standard Error: 1_412
			.saturating_add(Weight::from_parts(27_988, 0).saturating_mul(m.into()))
			// Standard Error: 1_376
			.saturating_add(Weight::from_parts(302_156, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Prime` (r:1 w:0)
	/// Proof: `CouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516 + m * (30 ±0) + p * (36 ±0)`
		//  Estimated: `3958 + m * (31 ±0) + p * (36 ±0)`
		// Minimum execution time: 41_283_000 picoseconds.
		Weight::from_parts(43_913_886, 0)
			.saturating_add(Weight::from_parts(0, 3958))
			// Standard Error: 1_266
			.saturating_add(Weight::from_parts(33_524, 0).saturating_mul(m.into()))
			// Standard Error: 1_235
			.saturating_add(Weight::from_parts(271_475, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 31).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Voting` (r:1 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Members` (r:1 w:0)
	/// Proof: `CouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Prime` (r:1 w:0)
	/// Proof: `CouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `811 + b * (1 ±0) + m * (40 ±0) + p * (40 ±0)`
		//  Estimated: `4128 + b * (1 ±0) + m * (42 ±0) + p * (40 ±0)`
		// Minimum execution time: 65_913_000 picoseconds.
		Weight::from_parts(65_093_834, 0)
			.saturating_add(Weight::from_parts(0, 4128))
			// Standard Error: 119
			.saturating_add(Weight::from_parts(3_255, 0).saturating_mul(b.into()))
			// Standard Error: 1_262
			.saturating_add(Weight::from_parts(29_247, 0).saturating_mul(m.into()))
			// Standard Error: 1_230
			.saturating_add(Weight::from_parts(300_728, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `CouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `CouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::Voting` (r:0 w:1)
	/// Proof: `CouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `CouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264 + p * (32 ±0)`
		//  Estimated: `1749 + p * (32 ±0)`
		// Minimum execution time: 21_924_000 picoseconds.
		Weight::from_parts(23_367_781, 0)
			.saturating_add(Weight::from_parts(0, 1749))
			// Standard Error: 1_189
			.saturating_add(Weight::from_parts(240_034, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
}
