// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_moonbeam_orbiters`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-0-0-176`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("moonbase-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --chain=moonbase-dev
// --steps=50
// --repeat=20
// --pallet=pallet_moonbeam_orbiters
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_moonbeam_orbiters`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_moonbeam_orbiters::WeightInfo for WeightInfo<T> {
	/// Storage: MoonbeamOrbiters CollatorsPool (r:1 w:1)
	/// Proof Skipped: MoonbeamOrbiters CollatorsPool (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Reserves (r:1 w:0)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn collator_add_orbiter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `524`
		//  Estimated: `4502`
		// Minimum execution time: 14_395_000 picoseconds.
		Weight::from_parts(14_829_000, 0)
			.saturating_add(Weight::from_parts(0, 4502))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: MoonbeamOrbiters CollatorsPool (r:1 w:1)
	/// Proof Skipped: MoonbeamOrbiters CollatorsPool (max_values: None, max_size: None, mode: Measured)
	fn collator_remove_orbiter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `3793`
		// Minimum execution time: 10_794_000 picoseconds.
		Weight::from_parts(11_251_000, 0)
			.saturating_add(Weight::from_parts(0, 3793))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: MoonbeamOrbiters CollatorsPool (r:1 w:1)
	/// Proof Skipped: MoonbeamOrbiters CollatorsPool (max_values: None, max_size: None, mode: Measured)
	fn orbiter_leave_collator_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `3793`
		// Minimum execution time: 10_874_000 picoseconds.
		Weight::from_parts(11_386_000, 0)
			.saturating_add(Weight::from_parts(0, 3793))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: MoonbeamOrbiters MinOrbiterDeposit (r:1 w:0)
	/// Proof Skipped: MoonbeamOrbiters MinOrbiterDeposit (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: MoonbeamOrbiters RegisteredOrbiter (r:0 w:1)
	/// Proof Skipped: MoonbeamOrbiters RegisteredOrbiter (max_values: None, max_size: None, mode: Measured)
	fn orbiter_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `4502`
		// Minimum execution time: 18_272_000 picoseconds.
		Weight::from_parts(18_623_000, 0)
			.saturating_add(Weight::from_parts(0, 4502))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: MoonbeamOrbiters CounterForCollatorsPool (r:1 w:0)
	/// Proof: MoonbeamOrbiters CounterForCollatorsPool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: MoonbeamOrbiters CollatorsPool (r:101 w:0)
	/// Proof Skipped: MoonbeamOrbiters CollatorsPool (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: MoonbeamOrbiters RegisteredOrbiter (r:0 w:1)
	/// Proof Skipped: MoonbeamOrbiters RegisteredOrbiter (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 100]`.
	fn orbiter_unregister(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `353 + n * (48 ±0)`
		//  Estimated: `4502 + n * (2524 ±0)`
		// Minimum execution time: 23_194_000 picoseconds.
		Weight::from_parts(26_994_916, 0)
			.saturating_add(Weight::from_parts(0, 4502))
			// Standard Error: 3_856
			.saturating_add(Weight::from_parts(3_066_545, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 2524).saturating_mul(n.into()))
	}
	/// Storage: MoonbeamOrbiters CollatorsPool (r:1 w:1)
	/// Proof Skipped: MoonbeamOrbiters CollatorsPool (max_values: None, max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters CounterForCollatorsPool (r:1 w:1)
	/// Proof: MoonbeamOrbiters CounterForCollatorsPool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn add_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `44`
		//  Estimated: `3509`
		// Minimum execution time: 6_626_000 picoseconds.
		Weight::from_parts(6_766_000, 0)
			.saturating_add(Weight::from_parts(0, 3509))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: MoonbeamOrbiters CollatorsPool (r:1 w:1)
	/// Proof Skipped: MoonbeamOrbiters CollatorsPool (max_values: None, max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters CounterForCollatorsPool (r:1 w:1)
	/// Proof: MoonbeamOrbiters CounterForCollatorsPool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: MoonbeamOrbiters AccountLookupOverride (r:0 w:9)
	/// Proof Skipped: MoonbeamOrbiters AccountLookupOverride (max_values: None, max_size: None, mode: Measured)
	fn remove_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `3793`
		// Minimum execution time: 13_833_000 picoseconds.
		Weight::from_parts(14_436_000, 0)
			.saturating_add(Weight::from_parts(0, 3793))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(11))
	}
	/// Storage: MoonbeamOrbiters CurrentRound (r:1 w:0)
	/// Proof Skipped: MoonbeamOrbiters CurrentRound (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters OrbiterPerRound (r:100 w:100)
	/// Proof Skipped: MoonbeamOrbiters OrbiterPerRound (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 100]`.
	fn on_initialize(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `102 + x * (61 ±0)`
		//  Estimated: `1586 + x * (2537 ±0)`
		// Minimum execution time: 4_838_000 picoseconds.
		Weight::from_parts(3_934_897, 0)
			.saturating_add(Weight::from_parts(0, 1586))
			// Standard Error: 1_450
			.saturating_add(Weight::from_parts(1_064_674, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2537).saturating_mul(x.into()))
	}
	/// Storage: MoonbeamOrbiters OrbiterPerRound (r:1 w:1)
	/// Proof Skipped: MoonbeamOrbiters OrbiterPerRound (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260`
		//  Estimated: `3725`
		// Minimum execution time: 13_951_000 picoseconds.
		Weight::from_parts(14_388_000, 0)
			.saturating_add(Weight::from_parts(0, 3725))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: MoonbeamOrbiters ForceRotation (r:1 w:1)
	/// Proof Skipped: MoonbeamOrbiters ForceRotation (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters CollatorsPool (r:2 w:1)
	/// Proof Skipped: MoonbeamOrbiters CollatorsPool (max_values: None, max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters OrbiterPerRound (r:0 w:3)
	/// Proof Skipped: MoonbeamOrbiters OrbiterPerRound (max_values: None, max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters AccountLookupOverride (r:0 w:3)
	/// Proof Skipped: MoonbeamOrbiters AccountLookupOverride (max_values: None, max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters CurrentRound (r:0 w:1)
	/// Proof Skipped: MoonbeamOrbiters CurrentRound (max_values: Some(1), max_size: None, mode: Measured)
	fn on_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218`
		//  Estimated: `6158`
		// Minimum execution time: 16_367_000 picoseconds.
		Weight::from_parts(17_229_000, 0)
			.saturating_add(Weight::from_parts(0, 6158))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(9))
	}
}
