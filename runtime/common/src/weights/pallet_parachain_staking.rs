// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-0-0-176`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("moonbase-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --chain=moonbase-dev
// --steps=50
// --repeat=20
// --pallet=pallet_parachain_staking
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::WeightInfo for WeightInfo<T> {
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn set_staking_expectations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `1573`
		// Minimum execution time: 7_229_000 picoseconds.
		Weight::from_parts(7_575_000, 0)
			.saturating_add(Weight::from_parts(0, 1573))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn set_inflation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `1573`
		// Minimum execution time: 14_825_000 picoseconds.
		Weight::from_parts(15_236_000, 0)
			.saturating_add(Weight::from_parts(0, 1573))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
	fn set_parachain_bond_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 5_857_000 picoseconds.
		Weight::from_parts(6_058_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
	fn set_parachain_bond_reserve_percent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 5_575_000 picoseconds.
		Weight::from_parts(5_861_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking TotalSelected (r:1 w:1)
	/// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	fn set_total_selected() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28`
		//  Estimated: `1513`
		// Minimum execution time: 6_409_000 picoseconds.
		Weight::from_parts(6_649_000, 0)
			.saturating_add(Weight::from_parts(0, 1513))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CollatorCommission (r:1 w:1)
	/// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
	fn set_collator_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `27`
		//  Estimated: `1512`
		// Minimum execution time: 5_874_000 picoseconds.
		Weight::from_parts(6_064_000, 0)
			.saturating_add(Weight::from_parts(0, 1512))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking TotalSelected (r:1 w:0)
	/// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `116`
		//  Estimated: `1601`
		// Minimum execution time: 17_537_000 picoseconds.
		Weight::from_parts(17_879_000, 0)
			.saturating_add(Weight::from_parts(0, 1601))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:0 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:0 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[3, 200]`.
	fn join_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1421 + x * (38 ±0)`
		//  Estimated: `4752 + x * (41 ±0)`
		// Minimum execution time: 32_516_000 picoseconds.
		Weight::from_parts(41_004_651, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 1_813
			.saturating_add(Weight::from_parts(154_601, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[3, 200]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `702 + x * (37 ±0)`
		//  Estimated: `4060 + x * (38 ±0)`
		// Minimum execution time: 13_557_000 picoseconds.
		Weight::from_parts(16_571_925, 0)
			.saturating_add(Weight::from_parts(0, 4060))
			// Standard Error: 1_101
			.saturating_add(Weight::from_parts(125_806, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:349 w:349)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:350 w:350)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:350 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:350 w:350)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates_worst_case(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1098 + x * (431 ±0)`
		//  Estimated: `4696 + x * (3762 ±0)`
		// Minimum execution time: 66_865_000 picoseconds.
		Weight::from_parts(68_396_000, 0)
			.saturating_add(Weight::from_parts(0, 4696))
			// Standard Error: 123_853
			.saturating_add(Weight::from_parts(27_246_290, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:349 w:349)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:350 w:350)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:350 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:350 w:350)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[2, 350]`.
	/// The range of component `y` is `[2, 350]`.
	fn execute_leave_candidates_ideal(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1090 + x * (431 ±0)`
		//  Estimated: `4696 + x * (3762 ±0)`
		// Minimum execution time: 62_612_000 picoseconds.
		Weight::from_parts(63_578_000, 0)
			.saturating_add(Weight::from_parts(0, 4696))
			// Standard Error: 55_607
			.saturating_add(Weight::from_parts(29_968_823, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[3, 200]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `670 + x * (37 ±0)`
		//  Estimated: `4028 + x * (38 ±0)`
		// Minimum execution time: 12_682_000 picoseconds.
		Weight::from_parts(17_381_996, 0)
			.saturating_add(Weight::from_parts(0, 4028))
			// Standard Error: 1_619
			.saturating_add(Weight::from_parts(126_105, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 200]`.
	fn go_offline(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567 + x * (38 ±0)`
		//  Estimated: `3968 + x * (39 ±0)`
		// Minimum execution time: 12_302_000 picoseconds.
		Weight::from_parts(16_072_060, 0)
			.saturating_add(Weight::from_parts(0, 3968))
			// Standard Error: 1_396
			.saturating_add(Weight::from_parts(114_886, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 200]`.
	fn go_online(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `531 + x * (38 ±0)`
		//  Estimated: `3932 + x * (39 ±0)`
		// Minimum execution time: 12_218_000 picoseconds.
		Weight::from_parts(15_765_559, 0)
			.saturating_add(Weight::from_parts(0, 3932))
			// Standard Error: 1_207
			.saturating_add(Weight::from_parts(124_866, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 200]`.
	fn candidate_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1270 + x * (42 ±0)`
		//  Estimated: `4752 + x * (44 ±0)`
		// Minimum execution time: 31_425_000 picoseconds.
		Weight::from_parts(39_741_171, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 2_239
			.saturating_add(Weight::from_parts(179_482, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	fn schedule_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171`
		//  Estimated: `3636`
		// Minimum execution time: 9_692_000 picoseconds.
		Weight::from_parts(10_230_000, 0)
			.saturating_add(Weight::from_parts(0, 3636))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 200]`.
	fn execute_candidate_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1322 + x * (42 ±0)`
		//  Estimated: `4752 + x * (43 ±0)`
		// Minimum execution time: 35_520_000 picoseconds.
		Weight::from_parts(43_700_816, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 1_622
			.saturating_add(Weight::from_parts(140_600, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	fn cancel_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 8_832_000 picoseconds.
		Weight::from_parts(9_144_000, 0)
			.saturating_add(Weight::from_parts(0, 3656))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn delegate(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2479 + x * (79 ±0) + y * (38 ±0)`
		//  Estimated: `5723 + x * (81 ±0) + y * (39 ±0)`
		// Minimum execution time: 75_876_000 picoseconds.
		Weight::from_parts(72_676_297, 0)
			.saturating_add(Weight::from_parts(0, 5723))
			// Standard Error: 7_490
			.saturating_add(Weight::from_parts(116_218, 0).saturating_mul(x.into()))
			// Standard Error: 2_457
			.saturating_add(Weight::from_parts(68_482, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 81).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(y.into()))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_revoke_delegation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `566 + x * (42 ±0)`
		//  Estimated: `4012 + x * (43 ±0)`
		// Minimum execution time: 10_442_000 picoseconds.
		Weight::from_parts(16_738_688, 0)
			.saturating_add(Weight::from_parts(0, 4012))
			// Standard Error: 1_120
			.saturating_add(Weight::from_parts(118_309, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	fn delegator_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1970 + x * (79 ±0)`
		//  Estimated: `5424 + x * (79 ±0)`
		// Minimum execution time: 41_461_000 picoseconds.
		Weight::from_parts(56_295_252, 0)
			.saturating_add(Weight::from_parts(0, 5424))
			// Standard Error: 1_647
			.saturating_add(Weight::from_parts(216_335, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 79).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_delegator_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `566 + x * (42 ±0)`
		//  Estimated: `4012 + x * (43 ±0)`
		// Minimum execution time: 10_670_000 picoseconds.
		Weight::from_parts(17_879_434, 0)
			.saturating_add(Weight::from_parts(0, 4012))
			// Standard Error: 831
			.saturating_add(Weight::from_parts(109_538, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `964`
		//  Estimated: `4752`
		// Minimum execution time: 54_896_000 picoseconds.
		Weight::from_parts(56_671_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_delegator_revoke_delegation_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37308`
		//  Estimated: `40773`
		// Minimum execution time: 138_126_000 picoseconds.
		Weight::from_parts(151_635_000, 0)
			.saturating_add(Weight::from_parts(0, 40773))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_delegator_bond_less_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `29930`
		//  Estimated: `33395`
		// Minimum execution time: 126_245_000 picoseconds.
		Weight::from_parts(131_477_000, 0)
			.saturating_add(Weight::from_parts(0, 33395))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	fn cancel_delegation_request(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `663 + x * (42 ±0)`
		//  Estimated: `4092 + x * (43 ±0)`
		// Minimum execution time: 14_554_000 picoseconds.
		Weight::from_parts(21_602_378, 0)
			.saturating_add(Weight::from_parts(0, 4092))
			// Standard Error: 1_027
			.saturating_add(Weight::from_parts(102_910, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking Points (r:1 w:0)
	/// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking Staked (r:1 w:1)
	/// Proof Skipped: ParachainStaking Staked (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking ParachainBondInfo (r:1 w:0)
	/// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CollatorCommission (r:1 w:0)
	/// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
	/// Proof Skipped: ParachainStaking DelayedPayouts (max_values: None, max_size: None, mode: Measured)
	fn prepare_staking_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `380`
		//  Estimated: `3845`
		// Minimum execution time: 21_636_000 picoseconds.
		Weight::from_parts(22_149_000, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:0)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `y` is `[0, 100]`.
	fn get_rewardable_delegators(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + y * (36 ±0)`
		//  Estimated: `3537 + y * (36 ±0)`
		// Minimum execution time: 4_123_000 picoseconds.
		Weight::from_parts(5_267_784, 0)
			.saturating_add(Weight::from_parts(0, 3537))
			// Standard Error: 658
			.saturating_add(Weight::from_parts(57_973, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: ParachainStaking TotalSelected (r:1 w:0)
	/// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:0)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:51 w:0)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:51 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:51 w:0)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:51 w:0)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	/// Proof Skipped: ParachainStaking SelectedCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking AtStake (r:0 w:51)
	/// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 50]`.
	/// The range of component `y` is `[0, 100]`.
	fn select_top_candidates(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (3816 ±0) + y * (1800 ±0)`
		//  Estimated: `3730 + x * (3975 ±39) + y * (639 ±19)`
		// Minimum execution time: 15_093_000 picoseconds.
		Weight::from_parts(15_370_000, 0)
			.saturating_add(Weight::from_parts(0, 3730))
			// Standard Error: 93_787
			.saturating_add(Weight::from_parts(12_572_487, 0).saturating_mul(x.into()))
			// Standard Error: 46_769
			.saturating_add(Weight::from_parts(1_672_387, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3975).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 639).saturating_mul(y.into()))
	}
    /// Storage: System Account (r:349 w:349)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:349 w:349)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:349 w:349)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:349 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 349]`.
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (395 ±0) + y * (156 ±0) + z * (41 ±0)`
		//  Estimated: `125723 + x * (2591 ±1) + y * (2234 ±1) + z * (28 ±0)`
		// Minimum execution time: 63_000 picoseconds.
		Weight::from_parts(69_000, 0)
			.saturating_add(Weight::from_parts(0, 125723))
			// Standard Error: 600_795
			.saturating_add(Weight::from_parts(38_214_668, 0).saturating_mul(x.into()))
			// Standard Error: 600_795
			.saturating_add(Weight::from_parts(20_727_011, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2234).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 28).saturating_mul(z.into()))
	}
	/// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelayedPayouts (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking Points (r:1 w:0)
	/// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AtStake (r:2 w:1)
	/// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AwardedPts (r:1 w:1)
	/// Proof Skipped: ParachainStaking AwardedPts (max_values: None, max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters OrbiterPerRound (r:1 w:0)
	/// Proof Skipped: MoonbeamOrbiters OrbiterPerRound (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:301 w:301)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1143 + y * (160 ±0)`
		//  Estimated: `6933 + y * (2591 ±0)`
		// Minimum execution time: 32_285_000 picoseconds.
		Weight::from_parts(20_530_859, 0)
			.saturating_add(Weight::from_parts(0, 6933))
			// Standard Error: 6_861
			.saturating_add(Weight::from_parts(9_604_504, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(y.into()))
	}
	fn base_on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 649_000 picoseconds.
		Weight::from_parts(698_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 300]`.
	/// The range of component `y` is `[0, 100]`.
	fn set_auto_compound(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671 + x * (22 ±0) + y * (36 ±0)`
		//  Estimated: `4027 + x * (23 ±0) + y * (36 ±0)`
		// Minimum execution time: 25_302_000 picoseconds.
		Weight::from_parts(18_544_051, 0)
			.saturating_add(Weight::from_parts(0, 4027))
			// Standard Error: 1_012
			.saturating_add(Weight::from_parts(94_252, 0).saturating_mul(x.into()))
			// Standard Error: 3_029
			.saturating_add(Weight::from_parts(108_524, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 23).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 350]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 99]`.
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (60 ±0) + y * (21 ±0) + z * (78 ±0)`
		//  Estimated: `26253 + x * (44 ±0) + y * (19 ±0) + z * (76 ±1)`
		// Minimum execution time: 83_098_000 picoseconds.
		Weight::from_parts(34_023_876, 0)
			.saturating_add(Weight::from_parts(0, 26253))
			// Standard Error: 2_315
			.saturating_add(Weight::from_parts(217_306, 0).saturating_mul(x.into()))
			// Standard Error: 2_321
			.saturating_add(Weight::from_parts(37_687, 0).saturating_mul(y.into()))
			// Standard Error: 8_175
			.saturating_add(Weight::from_parts(380_009, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 19).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 76).saturating_mul(z.into()))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:2 w:2)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:2 w:2)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:2 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn delegate_with_auto_compound_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `48167`
		//  Estimated: `54107`
		// Minimum execution time: 236_418_000 picoseconds.
		Weight::from_parts(246_675_000, 0)
			.saturating_add(Weight::from_parts(0, 54107))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(13))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	fn mint_collator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `3581`
		// Minimum execution time: 10_519_000 picoseconds.
		Weight::from_parts(10_824_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
