// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-0-0-176`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("moonbase-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --chain=moonbase-dev
// --steps=50
// --repeat=20
// --pallet=pallet_parachain_staking
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::WeightInfo for WeightInfo<T> {
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn set_staking_expectations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `1573`
		// Minimum execution time: 6_890_000 picoseconds.
		Weight::from_parts(7_224_000, 0)
			.saturating_add(Weight::from_parts(0, 1573))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn set_inflation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `88`
		//  Estimated: `1573`
		// Minimum execution time: 14_471_000 picoseconds.
		Weight::from_parts(14_854_000, 0)
			.saturating_add(Weight::from_parts(0, 1573))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
	fn set_parachain_bond_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 5_456_000 picoseconds.
		Weight::from_parts(5_699_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
	fn set_parachain_bond_reserve_percent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491`
		// Minimum execution time: 5_390_000 picoseconds.
		Weight::from_parts(5_665_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking TotalSelected (r:1 w:1)
	/// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	fn set_total_selected() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28`
		//  Estimated: `1513`
		// Minimum execution time: 6_141_000 picoseconds.
		Weight::from_parts(6_387_000, 0)
			.saturating_add(Weight::from_parts(0, 1513))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CollatorCommission (r:1 w:1)
	/// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
	fn set_collator_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `27`
		//  Estimated: `1512`
		// Minimum execution time: 5_661_000 picoseconds.
		Weight::from_parts(5_868_000, 0)
			.saturating_add(Weight::from_parts(0, 1512))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking TotalSelected (r:1 w:0)
	/// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `116`
		//  Estimated: `1601`
		// Minimum execution time: 16_971_000 picoseconds.
		Weight::from_parts(17_437_000, 0)
			.saturating_add(Weight::from_parts(0, 1601))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:0 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:0 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[3, 200]`.
	fn join_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1421 + x * (38 ±0)`
		//  Estimated: `4752 + x * (41 ±0)`
		// Minimum execution time: 31_867_000 picoseconds.
		Weight::from_parts(41_892_922, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 1_749
			.saturating_add(Weight::from_parts(93_193, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[3, 200]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `702 + x * (37 ±0)`
		//  Estimated: `4060 + x * (38 ±0)`
		// Minimum execution time: 13_138_000 picoseconds.
		Weight::from_parts(18_558_857, 0)
			.saturating_add(Weight::from_parts(0, 4060))
			// Standard Error: 1_008
			.saturating_add(Weight::from_parts(66_693, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:349 w:349)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:350 w:350)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:350 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:350 w:350)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates_worst_case(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1157 + x * (431 ±0)`
		//  Estimated: `4696 + x * (3762 ±0)`
		// Minimum execution time: 65_656_000 picoseconds.
		Weight::from_parts(66_996_000, 0)
			.saturating_add(Weight::from_parts(0, 4696))
			// Standard Error: 107_183
			.saturating_add(Weight::from_parts(25_757_839, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegatorState (r:349 w:349)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:350 w:350)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:350 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:350 w:350)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[2, 350]`.
	/// The range of component `y` is `[2, 350]`.
	fn execute_leave_candidates_ideal(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1149 + x * (431 ±0)`
		//  Estimated: `4696 + x * (3762 ±0)`
		// Minimum execution time: 61_023_000 picoseconds.
		Weight::from_parts(61_779_000, 0)
			.saturating_add(Weight::from_parts(0, 4696))
			// Standard Error: 49_414
			.saturating_add(Weight::from_parts(28_584_427, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[3, 200]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `670 + x * (37 ±0)`
		//  Estimated: `4028 + x * (38 ±0)`
		// Minimum execution time: 12_638_000 picoseconds.
		Weight::from_parts(17_996_862, 0)
			.saturating_add(Weight::from_parts(0, 4028))
			// Standard Error: 993
			.saturating_add(Weight::from_parts(67_486, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 200]`.
	fn go_offline(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `567 + x * (38 ±0)`
		//  Estimated: `3968 + x * (39 ±0)`
		// Minimum execution time: 12_169_000 picoseconds.
		Weight::from_parts(17_084_623, 0)
			.saturating_add(Weight::from_parts(0, 3968))
			// Standard Error: 1_057
			.saturating_add(Weight::from_parts(69_599, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 200]`.
	fn go_online(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `531 + x * (38 ±0)`
		//  Estimated: `3932 + x * (39 ±0)`
		// Minimum execution time: 11_837_000 picoseconds.
		Weight::from_parts(16_851_802, 0)
			.saturating_add(Weight::from_parts(0, 3932))
			// Standard Error: 1_027
			.saturating_add(Weight::from_parts(72_062, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 200]`.
	fn candidate_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1270 + x * (42 ±0)`
		//  Estimated: `4752 + x * (44 ±0)`
		// Minimum execution time: 30_904_000 picoseconds.
		Weight::from_parts(39_948_520, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 1_831
			.saturating_add(Weight::from_parts(123_879, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	fn schedule_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171`
		//  Estimated: `3636`
		// Minimum execution time: 9_219_000 picoseconds.
		Weight::from_parts(9_688_000, 0)
			.saturating_add(Weight::from_parts(0, 3636))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 200]`.
	fn execute_candidate_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1322 + x * (42 ±0)`
		//  Estimated: `4752 + x * (43 ±0)`
		// Minimum execution time: 35_024_000 picoseconds.
		Weight::from_parts(42_699_127, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 1_208
			.saturating_add(Weight::from_parts(105_143, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	fn cancel_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 8_552_000 picoseconds.
		Weight::from_parts(8_881_000, 0)
			.saturating_add(Weight::from_parts(0, 3656))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn set_candidate_bond_to_zero(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1322 + x * (42 ±0)`
		//  Estimated: `4752 + x * (43 ±0)`
		// Minimum execution time: 34_969_000 picoseconds.
		Weight::from_parts(43_183_234, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 1_377
			.saturating_add(Weight::from_parts(105_890, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn delegate(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2479 + x * (79 ±0) + y * (38 ±0)`
		//  Estimated: `5723 + x * (81 ±0) + y * (39 ±0)`
		// Minimum execution time: 70_929_000 picoseconds.
		Weight::from_parts(59_788_434, 0)
			.saturating_add(Weight::from_parts(0, 5723))
			// Standard Error: 1_596
			.saturating_add(Weight::from_parts(166_733, 0).saturating_mul(x.into()))
			// Standard Error: 523
			.saturating_add(Weight::from_parts(52_733, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 81).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(y.into()))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_revoke_delegation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `566 + x * (42 ±0)`
		//  Estimated: `4012 + x * (43 ±0)`
		// Minimum execution time: 10_384_000 picoseconds.
		Weight::from_parts(18_134_181, 0)
			.saturating_add(Weight::from_parts(0, 4012))
			// Standard Error: 696
			.saturating_add(Weight::from_parts(69_714, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	fn delegator_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1996 + x * (79 ±0)`
		//  Estimated: `5428 + x * (79 ±0)`
		// Minimum execution time: 41_127_000 picoseconds.
		Weight::from_parts(56_454_563, 0)
			.saturating_add(Weight::from_parts(0, 5428))
			// Standard Error: 1_329
			.saturating_add(Weight::from_parts(155_463, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 79).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_delegator_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `566 + x * (42 ±0)`
		//  Estimated: `4012 + x * (43 ±0)`
		// Minimum execution time: 10_304_000 picoseconds.
		Weight::from_parts(18_044_389, 0)
			.saturating_add(Weight::from_parts(0, 4012))
			// Standard Error: 682
			.saturating_add(Weight::from_parts(69_747, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `964`
		//  Estimated: `4752`
		// Minimum execution time: 52_762_000 picoseconds.
		Weight::from_parts(53_896_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_delegator_revoke_delegation_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37308`
		//  Estimated: `40773`
		// Minimum execution time: 121_863_000 picoseconds.
		Weight::from_parts(125_957_000, 0)
			.saturating_add(Weight::from_parts(0, 40773))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn execute_delegator_bond_less_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `29930`
		//  Estimated: `33395`
		// Minimum execution time: 101_887_000 picoseconds.
		Weight::from_parts(104_203_000, 0)
			.saturating_add(Weight::from_parts(0, 33395))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	fn cancel_delegation_request(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `663 + x * (42 ±0)`
		//  Estimated: `4092 + x * (43 ±0)`
		// Minimum execution time: 13_580_000 picoseconds.
		Weight::from_parts(20_161_730, 0)
			.saturating_add(Weight::from_parts(0, 4092))
			// Standard Error: 748
			.saturating_add(Weight::from_parts(72_019, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: ParachainStaking Points (r:1 w:0)
	/// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking Staked (r:1 w:1)
	/// Proof Skipped: ParachainStaking Staked (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking ParachainBondInfo (r:1 w:0)
	/// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CollatorCommission (r:1 w:0)
	/// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
	/// Proof Skipped: ParachainStaking DelayedPayouts (max_values: None, max_size: None, mode: Measured)
	fn prepare_staking_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `380`
		//  Estimated: `3845`
		// Minimum execution time: 21_509_000 picoseconds.
		Weight::from_parts(22_210_000, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:0)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `y` is `[0, 100]`.
	fn get_rewardable_delegators(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73 + y * (36 ±0)`
		//  Estimated: `3537 + y * (36 ±0)`
		// Minimum execution time: 4_225_000 picoseconds.
		Weight::from_parts(5_236_159, 0)
			.saturating_add(Weight::from_parts(0, 3537))
			// Standard Error: 565
			.saturating_add(Weight::from_parts(54_480, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: ParachainStaking TotalSelected (r:1 w:0)
	/// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:0)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:51 w:0)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:51 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:51 w:0)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:51 w:0)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	/// Proof Skipped: ParachainStaking SelectedCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking AtStake (r:0 w:51)
	/// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 50]`.
	/// The range of component `y` is `[0, 100]`.
	fn select_top_candidates(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (3816 ±0) + y * (1800 ±0)`
		//  Estimated: `3730 + x * (3975 ±39) + y * (639 ±19)`
		// Minimum execution time: 14_650_000 picoseconds.
		Weight::from_parts(14_993_000, 0)
			.saturating_add(Weight::from_parts(0, 3730))
			// Standard Error: 86_614
			.saturating_add(Weight::from_parts(11_368_523, 0).saturating_mul(x.into()))
			// Standard Error: 43_192
			.saturating_add(Weight::from_parts(1_335_158, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3975).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 639).saturating_mul(y.into()))
	}
	/// Storage: System Account (r:349 w:349)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:349 w:349)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:349 w:349)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:349 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 349]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 349]`.
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (395 ±0) + y * (156 ±0) + z * (41 ±0)`
		//  Estimated: `125757 + x * (2591 ±1) + y * (2234 ±1) + z * (28 ±0)`
		// Minimum execution time: 84_000 picoseconds.
		Weight::from_parts(89_000, 0)
			.saturating_add(Weight::from_parts(0, 125757))
			// Standard Error: 586_928
			.saturating_add(Weight::from_parts(37_021_750, 0).saturating_mul(x.into()))
			// Standard Error: 586_928
			.saturating_add(Weight::from_parts(20_024_306, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2234).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 28).saturating_mul(z.into()))
	}
	/// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelayedPayouts (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking Points (r:1 w:0)
	/// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AtStake (r:2 w:1)
	/// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AwardedPts (r:1 w:1)
	/// Proof Skipped: ParachainStaking AwardedPts (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters OrbiterPerRound (r:1 w:0)
	/// Proof Skipped: MoonbeamOrbiters OrbiterPerRound (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:301 w:301)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1208 + y * (160 ±0)`
		//  Estimated: `6978 + y * (2591 ±0)`
		// Minimum execution time: 32_493_000 picoseconds.
		Weight::from_parts(29_439_933, 0)
			.saturating_add(Weight::from_parts(0, 6978))
			// Standard Error: 4_122
			.saturating_add(Weight::from_parts(9_113_953, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(y.into()))
	}
	fn base_on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 646_000 picoseconds.
		Weight::from_parts(696_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 300]`.
	/// The range of component `y` is `[0, 100]`.
	fn set_auto_compound(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671 + x * (22 ±0) + y * (36 ±0)`
		//  Estimated: `4027 + x * (23 ±0) + y * (36 ±0)`
		// Minimum execution time: 19_844_000 picoseconds.
		Weight::from_parts(18_132_368, 0)
			.saturating_add(Weight::from_parts(0, 4027))
			// Standard Error: 390
			.saturating_add(Weight::from_parts(57_278, 0).saturating_mul(x.into()))
			// Standard Error: 1_168
			.saturating_add(Weight::from_parts(51_455, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 23).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[0, 350]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 99]`.
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (60 ±0) + y * (21 ±0) + z * (78 ±0)`
		//  Estimated: `26253 + x * (44 ±0) + y * (19 ±0) + z * (76 ±1)`
		// Minimum execution time: 75_570_000 picoseconds.
		Weight::from_parts(42_877_030, 0)
			.saturating_add(Weight::from_parts(0, 26253))
			// Standard Error: 959
			.saturating_add(Weight::from_parts(145_930, 0).saturating_mul(x.into()))
			// Standard Error: 962
			.saturating_add(Weight::from_parts(36_760, 0).saturating_mul(y.into()))
			// Standard Error: 3_389
			.saturating_add(Weight::from_parts(236_052, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 19).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 76).saturating_mul(z.into()))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:2 w:2)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking BottomDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:2 w:2)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1287), added: 3762, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:2 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn delegate_with_auto_compound_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `48167`
		//  Estimated: `54107`
		// Minimum execution time: 198_472_000 picoseconds.
		Weight::from_parts(201_828_000, 0)
			.saturating_add(Weight::from_parts(0, 54107))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(13))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	fn mint_collator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `3581`
		// Minimum execution time: 10_327_000 picoseconds.
		Weight::from_parts(10_581_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking EnableMarkingOffline (r:1 w:0)
	/// Proof Skipped: ParachainStaking EnableMarkingOffline (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking TotalSelected (r:1 w:0)
	/// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking SelectedCandidates (r:1 w:0)
	/// Proof Skipped: ParachainStaking SelectedCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking AtStake (r:2 w:0)
	/// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking AwardedPts (r:2 w:0)
	/// Proof Skipped: ParachainStaking AwardedPts (max_values: None, max_size: None, mode: Measured)
	/// Storage: MoonbeamOrbiters OrbiterPerRound (r:1 w:0)
	/// Proof Skipped: MoonbeamOrbiters OrbiterPerRound (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	fn notify_inactive_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `11494`
		//  Estimated: `17434`
		// Minimum execution time: 41_130_000 picoseconds.
		Weight::from_parts(41_130_000, 0)
			.saturating_add(Weight::from_parts(0, 17434))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
