// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_randomness`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-0-0-176`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("moonbase-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --chain=moonbase-dev
// --steps=50
// --repeat=20
// --pallet=pallet_randomness
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/common/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_randomness`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_randomness::WeightInfo for WeightInfo<T> {
	/// Storage: Randomness RelayEpoch (r:1 w:1)
	/// Proof Skipped: Randomness RelayEpoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem ValidationData (r:1 w:0)
	/// Proof Skipped: ParachainSystem ValidationData (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainSystem RelayStateProof (r:1 w:0)
	/// Proof Skipped: ParachainSystem RelayStateProof (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Randomness RandomnessResults (r:1 w:1)
	/// Proof Skipped: Randomness RandomnessResults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Randomness InherentIncluded (r:0 w:1)
	/// Proof Skipped: Randomness InherentIncluded (max_values: Some(1), max_size: None, mode: Measured)
	fn set_babe_randomness_results() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `297`
		//  Estimated: `3762`
		// Minimum execution time: 10_513_000 picoseconds.
		Weight::from_parts(10_834_000, 0)
			.saturating_add(Weight::from_parts(0, 3762))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Randomness NotFirstBlock (r:1 w:0)
	/// Proof Skipped: Randomness NotFirstBlock (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:0)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AuthorMapping MappingWithDeposit (r:1 w:0)
	/// Proof Skipped: AuthorMapping MappingWithDeposit (max_values: None, max_size: None, mode: Measured)
	/// Storage: Randomness LocalVrfOutput (r:1 w:1)
	/// Proof Skipped: Randomness LocalVrfOutput (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Randomness RandomnessResults (r:1 w:1)
	/// Proof Skipped: Randomness RandomnessResults (max_values: None, max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `719`
		//  Estimated: `4184`
		// Minimum execution time: 169_944_000 picoseconds.
		Weight::from_parts(171_082_000, 0)
			.saturating_add(Weight::from_parts(0, 4184))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Randomness RequestCount (r:1 w:1)
	/// Proof Skipped: Randomness RequestCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Randomness RandomnessResults (r:1 w:1)
	/// Proof Skipped: Randomness RandomnessResults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Randomness Requests (r:0 w:1)
	/// Proof Skipped: Randomness Requests (max_values: None, max_size: None, mode: Measured)
	fn request_randomness() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516`
		//  Estimated: `6172`
		// Minimum execution time: 29_481_000 picoseconds.
		Weight::from_parts(29_887_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: Randomness Requests (r:1 w:0)
	/// Proof Skipped: Randomness Requests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Randomness RandomnessResults (r:1 w:0)
	/// Proof Skipped: Randomness RandomnessResults (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 100]`.
	fn prepare_fulfillment(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `412`
		//  Estimated: `3877`
		// Minimum execution time: 7_457_000 picoseconds.
		Weight::from_parts(7_749_145, 0)
			.saturating_add(Weight::from_parts(0, 3877))
			// Standard Error: 177
			.saturating_add(Weight::from_parts(144_131, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Randomness RandomnessResults (r:1 w:1)
	/// Proof Skipped: Randomness RandomnessResults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Randomness Requests (r:0 w:1)
	/// Proof Skipped: Randomness Requests (max_values: None, max_size: None, mode: Measured)
	fn finish_fulfillment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `706`
		//  Estimated: `6172`
		// Minimum execution time: 27_108_000 picoseconds.
		Weight::from_parts(27_748_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Randomness Requests (r:1 w:1)
	/// Proof Skipped: Randomness Requests (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	fn increase_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `792`
		//  Estimated: `6172`
		// Minimum execution time: 25_726_000 picoseconds.
		Weight::from_parts(26_475_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Randomness Requests (r:1 w:1)
	/// Proof Skipped: Randomness Requests (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Randomness RandomnessResults (r:1 w:1)
	/// Proof Skipped: Randomness RandomnessResults (max_values: None, max_size: None, mode: Measured)
	fn execute_request_expiration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `835`
		//  Estimated: `6172`
		// Minimum execution time: 31_196_000 picoseconds.
		Weight::from_parts(31_824_000, 0)
			.saturating_add(Weight::from_parts(0, 6172))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}
