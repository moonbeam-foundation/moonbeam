diff --git a/pallets/randomness/src/lib.rs b/pallets/randomness/src/lib.rs
index a683ee7..1877bbe 100644
--- a/pallets/randomness/src/lib.rs
+++ b/pallets/randomness/src/lib.rs
@@ -310,10 +310,12 @@ pub mod pallet {
 		}
 		fn on_finalize(_now: BlockNumberFor<T>) {
 			// Ensure the mandatory inherent was included in the block or the block is invalid
+            /*
 			assert!(
 				<InherentIncluded<T>>::take().is_some(),
 				"Mandatory randomness inherent not included; InherentIncluded storage item is empty"
 			);
+            */
 
 			// set previous vrf output
 			PreviousLocalVrfOutput::<T>::put(
diff --git a/pallets/randomness/src/vrf.rs b/pallets/randomness/src/vrf.rs
index dcae016..f92d509 100644
--- a/pallets/randomness/src/vrf.rs
+++ b/pallets/randomness/src/vrf.rs
@@ -29,6 +29,7 @@ type Randomness = sp_consensus_babe::Randomness;
 /// Transforms VRF output into randomness value and puts it into `LocalVrfOutput`
 /// Fills the `RandomnessResult` associated with the current block if any requests exist
 pub(crate) fn verify_and_set_output<T: Config>() {
+    return;
 	let mut block_author_vrf_id: Option<VrfId> = None;
 	// Get VrfOutput and VrfProof from system digests
 	// Expect client to insert VrfOutput, VrfProof into digests by setting
