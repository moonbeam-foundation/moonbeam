
//! Autogenerated weights for `pallet_balances`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-10-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Gonzalo.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/moonbase-runtime/moonbase_runtime.compact.compressed.wasm
// --pallet
// pallet_balances
// --extrinsic
// transfer_allow_death
// --output
// runtime/moonbase/src/weights/pallet_balances.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_balances`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn transfer_allow_death() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	fn transfer_keep_alive() -> Weight {
		todo!()
	}

	fn force_set_balance_creating() -> Weight {
		todo!()
	}

	fn force_set_balance_killing() -> Weight {
		todo!()
	}

	fn force_transfer() -> Weight {
		todo!()
	}

	fn transfer_all() -> Weight {
		todo!()
	}

	fn force_unreserve() -> Weight {
		todo!()
	}

	fn upgrade_accounts(u: u32) -> Weight {
		todo!()
	}

	fn force_adjust_total_issuance() -> Weight {
		todo!()
	}

	fn burn_allow_death() -> Weight {
		todo!()
	}

	fn burn_keep_alive() -> Weight {
		todo!()
	}
}
