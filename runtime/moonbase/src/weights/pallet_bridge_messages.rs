// Copyright 2025 Moonbeam foundation
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_bridge_messages`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-02-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-romarq.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --runtime=./target/release/wbuild/moonbeam-runtime/moonbeam_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_bridge_messages
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --template=./benchmarking/frame-weight-template.hbs
// --output=./runtime/moonbeam/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_bridge_messages`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bridge_messages::WeightInfo for WeightInfo<T> {
    /// Storage: `BridgeMessages::PalletOperatingMode` (r:1 w:0)
    /// Proof: `BridgeMessages::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
    /// Storage: `BridgeParachains::ImportedParaHeads` (r:1 w:0)
    /// Proof: `BridgeParachains::ImportedParaHeads` (`max_values`: Some(600), `max_size`: Some(196), added: 1681, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::InboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::InboundLanes` (`max_values`: None, `max_size`: Some(49180), added: 51655, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:0)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:0)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1889), added: 4364, mode: `MaxEncodedLen`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:0)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: Some(1282), added: 1777, mode: `MaxEncodedLen`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn receive_single_message_proof() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `899`
        //  Estimated: `52645`
        // Minimum execution time: 82_741_000 picoseconds.
        Weight::from_parts(83_821_000, 0)
            .saturating_add(Weight::from_parts(0, 52645))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `BridgeMessages::PalletOperatingMode` (r:1 w:0)
    /// Proof: `BridgeMessages::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
    /// Storage: `BridgeParachains::ImportedParaHeads` (r:1 w:0)
    /// Proof: `BridgeParachains::ImportedParaHeads` (`max_values`: Some(600), `max_size`: Some(196), added: 1681, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::InboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::InboundLanes` (`max_values`: None, `max_size`: Some(49180), added: 51655, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:0)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:0)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1889), added: 4364, mode: `MaxEncodedLen`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:0)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: Some(1282), added: 1777, mode: `MaxEncodedLen`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 4076]`.
    fn receive_n_messages_proof(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `899`
        //  Estimated: `52645`
        // Minimum execution time: 82_100_000 picoseconds.
        Weight::from_parts(82_781_000, 0)
            .saturating_add(Weight::from_parts(0, 52645))
            // Standard Error: 15_462
            .saturating_add(Weight::from_parts(14_282_274, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `BridgeMessages::PalletOperatingMode` (r:1 w:0)
    /// Proof: `BridgeMessages::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
    /// Storage: `BridgeParachains::ImportedParaHeads` (r:1 w:0)
    /// Proof: `BridgeParachains::ImportedParaHeads` (`max_values`: Some(600), `max_size`: Some(196), added: 1681, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::InboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::InboundLanes` (`max_values`: None, `max_size`: Some(49180), added: 51655, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:0)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:0)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1889), added: 4364, mode: `MaxEncodedLen`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:0)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: Some(1282), added: 1777, mode: `MaxEncodedLen`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn receive_single_message_proof_with_outbound_lane_state() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `899`
        //  Estimated: `52645`
        // Minimum execution time: 87_280_000 picoseconds.
        Weight::from_parts(87_801_000, 0)
            .saturating_add(Weight::from_parts(0, 52645))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `BridgeMessages::PalletOperatingMode` (r:1 w:0)
    /// Proof: `BridgeMessages::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
    /// Storage: `BridgeParachains::ImportedParaHeads` (r:1 w:0)
    /// Proof: `BridgeParachains::ImportedParaHeads` (`max_values`: Some(600), `max_size`: Some(196), added: 1681, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::InboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::InboundLanes` (`max_values`: None, `max_size`: Some(49180), added: 51655, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:0)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:0)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1889), added: 4364, mode: `MaxEncodedLen`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:0)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: Some(1282), added: 1777, mode: `MaxEncodedLen`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 16384]`.
    fn receive_single_n_bytes_message_proof(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `899`
        //  Estimated: `52645`
        // Minimum execution time: 78_521_000 picoseconds.
        Weight::from_parts(80_664_182, 0)
            .saturating_add(Weight::from_parts(0, 52645))
            // Standard Error: 4
            .saturating_add(Weight::from_parts(2_232, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `BridgeMessages::PalletOperatingMode` (r:1 w:0)
    /// Proof: `BridgeMessages::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
    /// Storage: `BridgeParachains::ImportedParaHeads` (r:1 w:0)
    /// Proof: `BridgeParachains::ImportedParaHeads` (`max_values`: Some(600), `max_size`: Some(196), added: 1681, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::OutboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::OutboundLanes` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: UNKNOWN KEY `0x6e0a18b62a1de81c5f519181cc611e18` (r:1 w:0)
    /// Proof: UNKNOWN KEY `0x6e0a18b62a1de81c5f519181cc611e18` (r:1 w:0)
    /// Storage: `BridgeRelayers::RelayerRewards` (r:1 w:1)
    /// Proof: `BridgeRelayers::RelayerRewards` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:0)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:0)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1889), added: 4364, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::OutboundMessages` (r:0 w:1)
    /// Proof: `BridgeMessages::OutboundMessages` (`max_values`: None, `max_size`: Some(65568), added: 68043, mode: `MaxEncodedLen`)
    fn receive_delivery_proof_for_single_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `736`
        //  Estimated: `5354`
        // Minimum execution time: 68_070_000 picoseconds.
        Weight::from_parts(68_640_000, 0)
            .saturating_add(Weight::from_parts(0, 5354))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `BridgeMessages::PalletOperatingMode` (r:1 w:0)
    /// Proof: `BridgeMessages::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
    /// Storage: `BridgeParachains::ImportedParaHeads` (r:1 w:0)
    /// Proof: `BridgeParachains::ImportedParaHeads` (`max_values`: Some(600), `max_size`: Some(196), added: 1681, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::OutboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::OutboundLanes` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: UNKNOWN KEY `0x6e0a18b62a1de81c5f519181cc611e18` (r:1 w:0)
    /// Proof: UNKNOWN KEY `0x6e0a18b62a1de81c5f519181cc611e18` (r:1 w:0)
    /// Storage: `BridgeRelayers::RelayerRewards` (r:1 w:1)
    /// Proof: `BridgeRelayers::RelayerRewards` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:0)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:0)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1889), added: 4364, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::OutboundMessages` (r:0 w:2)
    /// Proof: `BridgeMessages::OutboundMessages` (`max_values`: None, `max_size`: Some(65568), added: 68043, mode: `MaxEncodedLen`)
    fn receive_delivery_proof_for_two_messages_by_single_relayer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `736`
        //  Estimated: `5354`
        // Minimum execution time: 69_661_000 picoseconds.
        Weight::from_parts(70_140_000, 0)
            .saturating_add(Weight::from_parts(0, 5354))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `BridgeMessages::PalletOperatingMode` (r:1 w:0)
    /// Proof: `BridgeMessages::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
    /// Storage: `BridgeParachains::ImportedParaHeads` (r:1 w:0)
    /// Proof: `BridgeParachains::ImportedParaHeads` (`max_values`: Some(600), `max_size`: Some(196), added: 1681, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::OutboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::OutboundLanes` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: UNKNOWN KEY `0x6e0a18b62a1de81c5f519181cc611e18` (r:1 w:0)
    /// Proof: UNKNOWN KEY `0x6e0a18b62a1de81c5f519181cc611e18` (r:1 w:0)
    /// Storage: `BridgeRelayers::RelayerRewards` (r:2 w:2)
    /// Proof: `BridgeRelayers::RelayerRewards` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:0)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:0)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1889), added: 4364, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::OutboundMessages` (r:0 w:2)
    /// Proof: `BridgeMessages::OutboundMessages` (`max_values`: None, `max_size`: Some(65568), added: 68043, mode: `MaxEncodedLen`)
    fn receive_delivery_proof_for_two_messages_by_two_relayers() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `736`
        //  Estimated: `6086`
        // Minimum execution time: 74_821_000 picoseconds.
        Weight::from_parts(75_841_000, 0)
            .saturating_add(Weight::from_parts(0, 6086))
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `BridgeMessages::PalletOperatingMode` (r:1 w:0)
    /// Proof: `BridgeMessages::PalletOperatingMode` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
    /// Storage: `BridgeParachains::ImportedParaHeads` (r:1 w:0)
    /// Proof: `BridgeParachains::ImportedParaHeads` (`max_values`: Some(600), `max_size`: Some(196), added: 1681, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::InboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::InboundLanes` (`max_values`: None, `max_size`: Some(49180), added: 51655, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:0)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:0)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1889), added: 4364, mode: `MaxEncodedLen`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:1)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: Some(1282), added: 1777, mode: `MaxEncodedLen`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `XcmpQueue::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `XcmpQueue::DeliveryFeeFactor` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
    /// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
    /// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::RelevantMessagingState` (r:1 w:0)
    /// Proof: `ParachainSystem::RelevantMessagingState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `XcmpQueue::OutboundXcmpMessages` (r:0 w:1)
    /// Proof: `XcmpQueue::OutboundXcmpMessages` (`max_values`: None, `max_size`: Some(105506), added: 107981, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 16384]`.
    fn receive_single_n_bytes_message_proof_with_dispatch(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1022`
        //  Estimated: `52645`
        // Minimum execution time: 98_430_000 picoseconds.
        Weight::from_parts(103_905_453, 0)
            .saturating_add(Weight::from_parts(0, 52645))
            // Standard Error: 7
            .saturating_add(Weight::from_parts(7_422, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}