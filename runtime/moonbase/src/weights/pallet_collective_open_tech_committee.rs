// Copyright 2025 Moonbeam foundation
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.


//! Autogenerated weights for `pallet_collective_open_tech_committee`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-03-06, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Mac`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=./target/release/wbuild/moonbase-runtime/moonbase_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --pallet=pallet_collective_open_tech_committee
// --extrinsic=*
// --steps=2
// --repeat=1
// --wasm-execution=compiled
// --header=./file_header.txt
// --template=./benchmarking/frame-weight-template.hbs
// --output=./runtime/moonbase/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

// TODO: Remove once the benchmarking stuff fully supports pallet instances.
use pallet_collective as pallet_collective_open_tech_committee;

/// Weights for `pallet_collective_open_tech_committee`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective_open_tech_committee::WeightInfo for WeightInfo<T> {
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:100 w:100)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (2048 ±0) + p * (2027 ±0)`
		//  Estimated: `1618 + m * (1268 ±467) + p * (1248 ±467)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 1618)
			// Standard Error: 1_911_294
			.saturating_add(Weight::from_parts(5_285_384, 0).saturating_mul(m.into()))
			// Standard Error: 1_911_294
			.saturating_add(Weight::from_parts(5_265_384, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1268).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 1248).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175 + m * (20 ±0)`
		//  Estimated: `1661 + m * (20 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_514_173, 1661)
			// Standard Error: 847
			.saturating_add(Weight::from_parts(489, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175 + m * (20 ±0)`
		//  Estimated: `3641 + m * (20 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(10_433_681, 3641)
			// Standard Error: 7_626
			.saturating_add(Weight::from_parts(5_381, 0).saturating_mul(b.into()))
			// Standard Error: 78_729
			.saturating_add(Weight::from_parts(55_555, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalCount` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70 + m * (20 ±0) + p * (39 ±0)`
		//  Estimated: `3535 + m * (20 ±0) + p * (39 ±0)`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3535)
			// Standard Error: 7_369
			.saturating_add(Weight::from_parts(2_505, 0).saturating_mul(b.into()))
			// Standard Error: 76_076
			.saturating_add(Weight::from_parts(35_161, 0).saturating_mul(m.into()))
			// Standard Error: 75_738
			.saturating_add(Weight::from_parts(197_069, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 100]`.
	fn vote(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `898 + m * (40 ±0)`
		//  Estimated: `8366`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(29_000_000, 8366)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + m * (40 ±0) + p * (38 ±0)`
		//  Estimated: `3725 + m * (40 ±0) + p * (39 ±0)`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(27_535_984, 3725)
			// Standard Error: 113_720
			.saturating_add(Weight::from_parts(318_181, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `517 + m * (40 ±0) + p * (44 ±0)`
		//  Estimated: `3982 + b * (1 ±0) + m * (40 ±0) + p * (45 ±0)`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(44_362_458, 3982)
			// Standard Error: 13_806
			.saturating_add(Weight::from_parts(5_218, 0).saturating_mul(b.into()))
			// Standard Error: 142_532
			.saturating_add(Weight::from_parts(154_882, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318 + m * (30 ±0) + p * (38 ±0)`
		//  Estimated: `3784 + m * (30 ±0) + p * (39 ±0)`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(30_898_989, 3784)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(101_010, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 30).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `536 + m * (40 ±0) + p * (44 ±0)`
		//  Estimated: `4001 + b * (1 ±0) + m * (40 ±0) + p * (45 ±0)`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(43_241_308, 4001)
			// Standard Error: 79_392
			.saturating_add(Weight::from_parts(255_892, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `291 + p * (32 ±0)`
		//  Estimated: `4979`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(22_000_000, 4979)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
