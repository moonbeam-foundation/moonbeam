// Copyright 2025 Moonbeam foundation
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.


//! Autogenerated weights for `pallet_collective_treasury_council`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-03-07, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Mac`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=./target/release/wbuild/moonbase-runtime/moonbase_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=1
// --pallet=pallet_collective_treasury_council
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --template=./benchmarking/frame-weight-template.hbs
// --output=./runtime/moonbase/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

use pallet_collective as pallet_collective_treasury_council;

/// Weights for `pallet_collective_treasury_council`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective_treasury_council::WeightInfo for WeightInfo<T> {
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:20 w:20)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Prime` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 9]`.
	/// The range of component `n` is `[0, 9]`.
	/// The range of component `p` is `[0, 20]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (493 ±0) + p * (211 ±0)`
		//  Estimated: `1651 + m * (313 ±108) + p * (8192 ±48)`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 1651)
			// Standard Error: 2_208_008
			.saturating_add(Weight::from_parts(5_179_487, 0).saturating_mul(m.into()))
			// Standard Error: 993_603
			.saturating_add(Weight::from_parts(2_280_769, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 313).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 8192).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 9]`.
	fn execute(_b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + m * (20 ±0)`
		//  Estimated: `1694 + m * (20 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 1694)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 9]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + m * (20 ±0)`
		//  Estimated: `3674 + m * (20 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(13_436_521, 3674)
			// Standard Error: 847
			.saturating_add(Weight::from_parts(489, 0).saturating_mul(b.into()))
			// Standard Error: 108_253
			.saturating_add(Weight::from_parts(62_500, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalCount` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 9]`.
	/// The range of component `p` is `[1, 20]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `83 + m * (20 ±0) + p * (58 ±0)`
		//  Estimated: `3548 + m * (20 ±0) + p * (58 ±0)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(11_561_849, 3548)
			// Standard Error: 2_609
			.saturating_add(Weight::from_parts(2_283, 0).saturating_mul(b.into()))
			// Standard Error: 380_952
			.saturating_add(Weight::from_parts(190_476, 0).saturating_mul(m.into()))
			// Standard Error: 140_350
			.saturating_add(Weight::from_parts(385_964, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 58).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 9]`.
	fn vote(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `734 + m * (40 ±0)`
		//  Estimated: `4559`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4559)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `276 + m * (40 ±0) + p * (55 ±0)`
		//  Estimated: `3742 + m * (40 ±0) + p * (55 ±0)`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(16_684_210, 3742)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(315_789, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `242 + b * (1 ±0) + m * (40 ±0) + p * (78 ±0)`
		//  Estimated: `3707 + b * (1 ±0) + m * (40 ±0) + p * (79 ±0)`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(26_629_622, 3707)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(978, 0).saturating_mul(b.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(368_421, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 79).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Prime` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `327 + m * (32 ±0) + p * (55 ±0)`
		//  Estimated: `3792 + m * (32 ±0) + p * (55 ±0)`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(18_863_157, 3792)
			// Standard Error: 173_205
			.saturating_add(Weight::from_parts(100_000, 0).saturating_mul(m.into()))
			// Standard Error: 45_580
			.saturating_add(Weight::from_parts(236_842, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Prime` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + b * (1 ±0) + m * (40 ±0) + p * (78 ±0)`
		//  Estimated: `3725 + b * (1 ±0) + m * (40 ±0) + p * (79 ±0)`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(28_478_092, 3725)
			// Standard Error: 652
			.saturating_add(Weight::from_parts(1_304, 0).saturating_mul(b.into()))
			// Standard Error: 35_087
			.saturating_add(Weight::from_parts(385_964, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 79).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 20]`.
	fn disapprove_proposal(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `324 + p * (32 ±0)`
		//  Estimated: `2451`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 2451)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn kill(d: u32, p: u32, ) -> Weight {
	    todo!()
	}
	fn release_proposal_cost() -> Weight {
	    todo!()
	}
}
