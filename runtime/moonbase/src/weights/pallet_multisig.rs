
//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-01-06, STEPS: `10`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `pop-os`, CPU: `12th Gen Intel(R) Core(TM) i7-12700H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/moonbeam
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_multisig
// --extrinsic
// *
// --steps
// 10
// --repeat
// 10
// --output
// runtime/moonbase/src/weights/pallet_multisig.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1527`
		// Minimum execution time: 10_581_000 picoseconds.
		Weight::from_parts(12_182_974, 0)
			.saturating_add(Weight::from_parts(0, 1527))
			// Standard Error: 46
			.saturating_add(Weight::from_parts(448, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304`
		//  Estimated: `5587`
		// Minimum execution time: 33_944_000 picoseconds.
		Weight::from_parts(30_116_830, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 7_608
			.saturating_add(Weight::from_parts(76_913, 0).saturating_mul(s.into()))
			// Standard Error: 75
			.saturating_add(Weight::from_parts(965, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312`
		//  Estimated: `5587`
		// Minimum execution time: 20_034_000 picoseconds.
		Weight::from_parts(13_531_795, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 3_676
			.saturating_add(Weight::from_parts(69_491, 0).saturating_mul(s.into()))
			// Standard Error: 35
			.saturating_add(Weight::from_parts(1_286, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475 + s * (20 ±0)`
		//  Estimated: `5587 + s * (20 ±0)`
		// Minimum execution time: 40_142_000 picoseconds.
		Weight::from_parts(29_328_038, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 6_428
			.saturating_add(Weight::from_parts(133_836, 0).saturating_mul(s.into()))
			// Standard Error: 63
			.saturating_add(Weight::from_parts(1_242, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(s.into()))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304`
		//  Estimated: `5587`
		// Minimum execution time: 22_383_000 picoseconds.
		Weight::from_parts(23_940_643, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 3_521
			.saturating_add(Weight::from_parts(81_655, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312`
		//  Estimated: `5587`
		// Minimum execution time: 11_981_000 picoseconds.
		Weight::from_parts(12_045_967, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 3_872
			.saturating_add(Weight::from_parts(99_174, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `474`
		//  Estimated: `5587`
		// Minimum execution time: 25_022_000 picoseconds.
		Weight::from_parts(26_384_619, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 4_459
			.saturating_add(Weight::from_parts(69_228, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
