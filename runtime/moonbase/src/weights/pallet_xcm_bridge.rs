// Copyright 2025 Moonbeam foundation
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_xcm_bridge`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-02-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-romarq.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --runtime=./target/release/wbuild/moonbeam-runtime/moonbeam_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_xcm_bridge
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --template=./benchmarking/frame-weight-template.hbs
// --output=./runtime/moonbeam/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_xcm_bridge`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_xcm_bridge::WeightInfo for WeightInfo<T> {
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:1)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1922), added: 4397, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:1 w:1)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::InboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::InboundLanes` (`max_values`: None, `max_size`: Some(49208), added: 51683, mode: `MaxEncodedLen`)
    /// Storage: `XcmpQueue::OutboundXcmpStatus` (r:1 w:0)
    /// Proof: `XcmpQueue::OutboundXcmpStatus` (`max_values`: Some(1), `max_size`: Some(1282), added: 1777, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::OutboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::OutboundLanes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    fn open_bridge() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `214`
        //  Estimated: `52673`
        // Minimum execution time: 40_171_000 picoseconds.
        Weight::from_parts(40_171_000, 0)
            .saturating_add(Weight::from_parts(0, 52673))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:1)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1922), added: 4397, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::InboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::InboundLanes` (`max_values`: None, `max_size`: Some(49208), added: 51683, mode: `MaxEncodedLen`)
    /// Storage: `BridgeMessages::OutboundLanes` (r:1 w:1)
    /// Proof: `BridgeMessages::OutboundLanes` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::LaneToBridge` (r:0 w:1)
    /// Proof: `BridgeXcmOver::LaneToBridge` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
    fn close_bridge() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `488`
        //  Estimated: `52673`
        // Minimum execution time: 30_096_000 picoseconds.
        Weight::from_parts(30_096_000, 0)
            .saturating_add(Weight::from_parts(0, 52673))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `BridgeXcmOver::Bridges` (r:1 w:1)
    /// Proof: `BridgeXcmOver::Bridges` (`max_values`: None, `max_size`: Some(1922), added: 4397, mode: `MaxEncodedLen`)
    fn update_notification_receiver() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `212`
        //  Estimated: `5387`
        // Minimum execution time: 15_994_000 picoseconds.
        Weight::from_parts(15_994_000, 0)
            .saturating_add(Weight::from_parts(0, 5387))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}