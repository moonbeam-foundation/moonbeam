// Copyright 2025 Moonbeam foundation
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.


//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 49.1.0
//! DATE: 2025-08-28, STEPS: `3`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Tareks-M3-Max.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=./target/release/wbuild/moonbeam-runtime/moonbeam_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=3
// --repeat=1
// --pallet=pallet_collective
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --template=./benchmarking/frame-weight-template.hbs
// --output=./runtime/moonbeam/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:20 w:20)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Prime` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 9]`.
	/// The range of component `n` is `[0, 9]`.
	/// The range of component `p` is `[0, 20]`.
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (493 ±0) + p * (211 ±0)`
		//  Estimated: `28288 + m * (303 ±67) + p * (1915 ±30)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 28288)
			// Standard Error: 1_463_736
			.saturating_add(Weight::from_parts(3_343_260, 0).saturating_mul(m.into()))
			// Standard Error: 664_128
			.saturating_add(Weight::from_parts(2_140_321, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 303).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 1915).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 9]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + m * (20 ±0)`
		//  Estimated: `1694 + m * (20 ±0)`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(9_970_637, 1694)
			// Standard Error: 286
			.saturating_add(Weight::from_parts(97, 0).saturating_mul(b.into()))
			// Standard Error: 36_562
			.saturating_add(Weight::from_parts(112_500, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 9]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + m * (20 ±0)`
		//  Estimated: `3674 + m * (20 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(11_088_926, 3674)
			// Standard Error: 1_628
			.saturating_add(Weight::from_parts(1_369, 0).saturating_mul(b.into()))
			// Standard Error: 207_999
			.saturating_add(Weight::from_parts(75_000, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalCount` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `83 + m * (20 ±0) + p * (58 ±0)`
		//  Estimated: `3561 + m * (22 ±5) + p * (57 ±2)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(13_480_315, 3561)
			// Standard Error: 1_146
			.saturating_add(Weight::from_parts(768, 0).saturating_mul(b.into()))
			// Standard Error: 163_400
			.saturating_add(Weight::from_parts(49_184, 0).saturating_mul(m.into()))
			// Standard Error: 61_143
			.saturating_add(Weight::from_parts(247_231, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 22).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 57).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 9]`.
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `734 + m * (40 ±0)`
		//  Estimated: `4199 + m * (40 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 4199)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `276 + m * (40 ±0) + p * (55 ±0)`
		//  Estimated: `3742 + m * (40 ±0) + p * (55 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_830_634, 3742)
			// Standard Error: 28_049
			.saturating_add(Weight::from_parts(181_883, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `242 + b * (1 ±0) + m * (40 ±0) + p * (78 ±0)`
		//  Estimated: `3711 + b * (1 ±0) + m * (37 ±14) + p * (77 ±4)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(22_647_741, 3711)
			// Standard Error: 529
			.saturating_add(Weight::from_parts(151, 0).saturating_mul(b.into()))
			// Standard Error: 28_268
			.saturating_add(Weight::from_parts(321_228, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Prime` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `327 + m * (32 ±0) + p * (55 ±0)`
		//  Estimated: `3800 + m * (31 ±1) + p * (55 ±0)`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_367_746, 3800)
			// Standard Error: 35_247
			.saturating_add(Weight::from_parts(127_246, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 31).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Voting` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Members` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Prime` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + b * (1 ±0) + m * (40 ±0) + p * (78 ±0)`
		//  Estimated: `3730 + b * (1 ±0) + m * (37 ±14) + p * (77 ±4)`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(30_398_986, 3730)
			// Standard Error: 699
			.saturating_add(Weight::from_parts(527, 0).saturating_mul(b.into()))
			// Standard Error: 37_299
			.saturating_add(Weight::from_parts(49_968, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `324 + p * (32 ±0)`
		//  Estimated: `1810 + p * (32 ±0)`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(8_913_284, 1810)
			// Standard Error: 3_195
			.saturating_add(Weight::from_parts(105_166, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::CostOf` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::CostOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Proposals` (r:1 w:1)
	/// Proof: `TreasuryCouncilCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::Voting` (r:0 w:1)
	/// Proof: `TreasuryCouncilCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `p` is `[1, 100]`.
	fn kill(d: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1371 + p * (55 ±0)`
		//  Estimated: `4843 + d * (5 ±13) + p * (55 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_031_904, 4843)
			// Standard Error: 530_362
			.saturating_add(Weight::from_parts(188_434, 0).saturating_mul(d.into()))
			// Standard Error: 34_190
			.saturating_add(Weight::from_parts(198_404, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(p.into()))
	}
	/// Storage: `TreasuryCouncilCollective::ProposalOf` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TreasuryCouncilCollective::CostOf` (r:1 w:0)
	/// Proof: `TreasuryCouncilCollective::CostOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn release_proposal_cost() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `813`
		//  Estimated: `4278`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 4278)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
}
