// Copyright 2025 Moonbeam foundation
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.


//! Autogenerated weights for `pallet_crowdloan_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-03-26, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-0-0-176`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=./target/production/wbuild/moonbeam-runtime/moonbeam_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_crowdloan_rewards
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --template=./benchmarking/frame-weight-template.hbs
// --output=./runtime/moonbeam/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for `pallet_crowdloan_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_crowdloan_rewards::WeightInfo for WeightInfo<T> {
	/// Storage: `CrowdloanRewards::Initialized` (r:1 w:0)
	/// Proof: `CrowdloanRewards::Initialized` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::InitializedRewardAmount` (r:1 w:1)
	/// Proof: `CrowdloanRewards::InitializedRewardAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::TotalContributors` (r:1 w:1)
	/// Proof: `CrowdloanRewards::TotalContributors` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:501 w:501)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CrowdloanRewards::ClaimedRelayChainIds` (r:500 w:500)
	/// Proof: `CrowdloanRewards::ClaimedRelayChainIds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::UnassociatedContributions` (r:500 w:0)
	/// Proof: `CrowdloanRewards::UnassociatedContributions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::AccountsPayable` (r:500 w:500)
	/// Proof: `CrowdloanRewards::AccountsPayable` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 500]`.
	fn initialize_reward_vec(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76194 + x * (550 ±0)`
		//  Estimated: `66137 + x * (3052 ±5)`
		// Minimum execution time: 128_673_000 picoseconds.
		Weight::from_parts(229_629_054, 66137)
			// Standard Error: 30_125
			.saturating_add(Weight::from_parts(59_458_917, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3052).saturating_mul(x.into()))
	}
	/// Storage: `CrowdloanRewards::Initialized` (r:1 w:1)
	/// Proof: `CrowdloanRewards::Initialized` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::InitRelayBlock` (r:1 w:0)
	/// Proof: `CrowdloanRewards::InitRelayBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::InitializedRewardAmount` (r:1 w:0)
	/// Proof: `CrowdloanRewards::InitializedRewardAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CrowdloanRewards::TotalContributors` (r:1 w:0)
	/// Proof: `CrowdloanRewards::TotalContributors` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::EndRelayBlock` (r:0 w:1)
	/// Proof: `CrowdloanRewards::EndRelayBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn complete_initialization() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `447`
		//  Estimated: `3581`
		// Minimum execution time: 21_034_000 picoseconds.
		Weight::from_parts(21_463_000, 3581)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CrowdloanRewards::Initialized` (r:1 w:0)
	/// Proof: `CrowdloanRewards::Initialized` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::AccountsPayable` (r:1 w:1)
	/// Proof: `CrowdloanRewards::AccountsPayable` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::InitRelayBlock` (r:1 w:0)
	/// Proof: `CrowdloanRewards::InitRelayBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::EndRelayBlock` (r:1 w:0)
	/// Proof: `CrowdloanRewards::EndRelayBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `902`
		//  Estimated: `6172`
		// Minimum execution time: 70_818_000 picoseconds.
		Weight::from_parts(71_946_000, 6172)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CrowdloanRewards::AccountsPayable` (r:2 w:2)
	/// Proof: `CrowdloanRewards::AccountsPayable` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_reward_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `6304`
		// Minimum execution time: 20_528_000 picoseconds.
		Weight::from_parts(21_149_000, 6304)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CrowdloanRewards::UnassociatedContributions` (r:1 w:1)
	/// Proof: `CrowdloanRewards::UnassociatedContributions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::ClaimedRelayChainIds` (r:1 w:1)
	/// Proof: `CrowdloanRewards::ClaimedRelayChainIds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CrowdloanRewards::AccountsPayable` (r:1 w:1)
	/// Proof: `CrowdloanRewards::AccountsPayable` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn associate_native_identity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `736`
		//  Estimated: `6172`
		// Minimum execution time: 112_953_000 picoseconds.
		Weight::from_parts(115_014_000, 6172)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CrowdloanRewards::AccountsPayable` (r:2 w:2)
	/// Proof: `CrowdloanRewards::AccountsPayable` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 500]`.
	fn change_association_with_relay_keys(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `333 + x * (32 ±0)`
		//  Estimated: `6273 + x * (32 ±0)`
		// Minimum execution time: 61_658_000 picoseconds.
		Weight::from_parts(62_413_000, 6273)
			// Standard Error: 9_700
			.saturating_add(Weight::from_parts(38_635_509, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(x.into()))
	}
}
