
//! Autogenerated weights for `pallet_parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-10-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Gonzalo.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/moonbeam-runtime/moonbeam_runtime.compact.compressed.wasm
// --pallet
// pallet_parachain_staking
// --extrinsic
// 
// --output
// runtime/moonbeam/src/weights/pallet_parachain_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::WeightInfo for WeightInfo<T> {
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_staking_expectations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_reserve_percent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation_distribution_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1485))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn join_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1188 + x * (38 ±0)`
		//  Estimated: `4752 + x * (41 ±0)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(25_633_700, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 391
			.saturating_add(Weight::from_parts(28_710, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `600 + x * (37 ±0)`
		//  Estimated: `3955 + x * (38 ±0)`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_550_130, 0)
			.saturating_add(Weight::from_parts(0, 3955))
			// Standard Error: 387
			.saturating_add(Weight::from_parts(29_141, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:350 w:350)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:350 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates_worst_case(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (429 ±0)`
		//  Estimated: `4502 + x * (3762 ±0)`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(50_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4502))
			// Standard Error: 70_037
			.saturating_add(Weight::from_parts(23_872_599, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:350 w:350)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:350 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:350 w:350)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 350]`.
	/// The range of component `y` is `[2, 350]`.
	fn execute_leave_candidates_ideal(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (429 ±0)`
		//  Estimated: `4502 + x * (3762 ±0)`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(46_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4502))
			// Standard Error: 51_063
			.saturating_add(Weight::from_parts(26_042_071, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 200]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `568 + x * (37 ±0)`
		//  Estimated: `3923 + x * (38 ±0)`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_027_916, 0)
			.saturating_add(Weight::from_parts(0, 3923))
			// Standard Error: 337
			.saturating_add(Weight::from_parts(29_460, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_offline(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `467 + x * (38 ±0)`
		//  Estimated: `3860 + x * (39 ±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_651_193, 0)
			.saturating_add(Weight::from_parts(0, 3860))
			// Standard Error: 333
			.saturating_add(Weight::from_parts(30_481, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn go_online(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `431 + x * (38 ±0)`
		//  Estimated: `3825 + x * (39 ±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_600_029, 0)
			.saturating_add(Weight::from_parts(0, 3825))
			// Standard Error: 390
			.saturating_add(Weight::from_parts(30_893, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn candidate_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1138 + x * (42 ±0)`
		//  Estimated: `4752 + x * (44 ±0)`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(24_413_388, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 506
			.saturating_add(Weight::from_parts(38_318, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `107`
		//  Estimated: `3572`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3572))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn execute_candidate_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1177 + x * (42 ±0)`
		//  Estimated: `4752 + x * (44 ±0)`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(23_848_725, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 622
			.saturating_add(Weight::from_parts(38_345, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	fn set_candidate_bond_to_zero(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1157 + x * (42 ±0)`
		//  Estimated: `4752 + x * (44 ±0)`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(21_461_644, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 1_475
			.saturating_add(Weight::from_parts(43_354, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(Weight::from_parts(0, 44).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `127`
		//  Estimated: `3592`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3592))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn delegate(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1815 + x * (79 ±0) + y * (38 ±0)`
		//  Estimated: `5111 + x * (80 ±0) + y * (39 ±0)`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(36_350_721, 0)
			.saturating_add(Weight::from_parts(0, 5111))
			// Standard Error: 1_626
			.saturating_add(Weight::from_parts(108_021, 0).saturating_mul(x.into()))
			// Standard Error: 533
			.saturating_add(Weight::from_parts(22_017, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 80).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 39).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_revoke_delegation(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `122 + x * (42 ±0)`
		//  Estimated: `3591 + x * (43 ±0)`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(9_566_439, 0)
			.saturating_add(Weight::from_parts(0, 3591))
			// Standard Error: 273
			.saturating_add(Weight::from_parts(42_383, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn delegator_bond_more(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1183 + x * (79 ±0)`
		//  Estimated: `4752 + x * (79 ±0)`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(36_794_222, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 625
			.saturating_add(Weight::from_parts(70_829, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 79).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn schedule_delegator_bond_less(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `122 + x * (42 ±0)`
		//  Estimated: `3591 + x * (43 ±0)`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(9_775_818, 0)
			.saturating_add(Weight::from_parts(0, 3591))
			// Standard Error: 351
			.saturating_add(Weight::from_parts(43_030, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `631`
		//  Estimated: `4752`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(34_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_revoke_delegation_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37065`
		//  Estimated: `40530`
		// Minimum execution time: 71_000_000 picoseconds.
		Weight::from_parts(72_000_000, 0)
			.saturating_add(Weight::from_parts(0, 40530))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `29687`
		//  Estimated: `33152`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(63_000_000, 0)
			.saturating_add(Weight::from_parts(0, 33152))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	fn cancel_delegation_request(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665 + x * (42 ±0)`
		//  Estimated: `4094 + x * (43 ±0)`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(10_043_199, 0)
			.saturating_add(Weight::from_parts(0, 4094))
			// Standard Error: 218
			.saturating_add(Weight::from_parts(40_873, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn prepare_staking_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3`
		//  Estimated: `3468`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3468))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 100]`.
	fn get_rewardable_delegators(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `36 + y * (36 ±0)`
		//  Estimated: `3501 + y * (36 ±0)`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_038_906, 0)
			.saturating_add(Weight::from_parts(0, 3501))
			// Standard Error: 541
			.saturating_add(Weight::from_parts(18_640, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:50 w:0)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:50 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:50 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:50 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:0 w:50)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 50]`.
	/// The range of component `y` is `[0, 100]`.
	fn select_top_candidates(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (3817 ±0) + y * (1800 ±0)`
		//  Estimated: `7296 + x * (3860 ±39) + y * (639 ±19)`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(Weight::from_parts(0, 7296))
			// Standard Error: 40_402
			.saturating_add(Weight::from_parts(9_745_067, 0).saturating_mul(x.into()))
			// Standard Error: 20_147
			.saturating_add(Weight::from_parts(521_883, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 3860).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 639).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:349 w:349)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:349 w:349)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:349 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 349]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 349]`.
	fn pay_one_collator_reward_best(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (393 ±0) + y * (156 ±0) + z * (41 ±0)`
		//  Estimated: `123262 + x * (2591 ±8) + y * (2234 ±1) + z * (28 ±0)`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 0)
			.saturating_add(Weight::from_parts(0, 123262))
			// Standard Error: 390_183
			.saturating_add(Weight::from_parts(31_574_212, 0).saturating_mul(x.into()))
			// Standard Error: 390_183
			.saturating_add(Weight::from_parts(19_771_458, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2234).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 28).saturating_mul(z.into()))
	}
	/// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:2 w:1)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:1 w:1)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MoonbeamOrbiters::OrbiterPerRound` (r:1 w:0)
	/// Proof: `MoonbeamOrbiters::OrbiterPerRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:301 w:301)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + y * (158 ±0)`
		//  Estimated: `5919 + y * (2591 ±0)`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(18_612_699, 0)
			.saturating_add(Weight::from_parts(0, 5919))
			// Standard Error: 14_873
			.saturating_add(Weight::from_parts(9_866_060, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(y.into()))
	}
	/// Storage: `AsyncBacking::SlotInfo` (r:1 w:0)
	/// Proof: `AsyncBacking::SlotInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `MoonbeamOrbiters::ForceRotation` (r:1 w:0)
	/// Proof: `MoonbeamOrbiters::ForceRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `MoonbeamOrbiters::CollatorsPool` (r:1 w:0)
	/// Proof: `MoonbeamOrbiters::CollatorsPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MoonbeamOrbiters::CurrentRound` (r:0 w:1)
	/// Proof: `MoonbeamOrbiters::CurrentRound` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelayedPayouts` (r:0 w:1)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:0 w:1)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn base_on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4073`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4073))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 300]`.
	/// The range of component `y` is `[0, 100]`.
	fn set_auto_compound(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `164 + x * (22 ±0) + y * (36 ±0)`
		//  Estimated: `3644 + x * (22 ±0) + y * (36 ±0)`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_433_394, 0)
			.saturating_add(Weight::from_parts(0, 3644))
			// Standard Error: 679
			.saturating_add(Weight::from_parts(19_136, 0).saturating_mul(x.into()))
			// Standard Error: 2_033
			.saturating_add(Weight::from_parts(15_350, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 22).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 350]`.
	/// The range of component `y` is `[0, 349]`.
	/// The range of component `z` is `[0, 99]`.
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (59 ±0) + y * (21 ±0) + z * (79 ±0)`
		//  Estimated: `25489 + x * (43 ±0) + y * (19 ±0) + z * (76 ±1)`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(33_342_505, 0)
			.saturating_add(Weight::from_parts(0, 25489))
			// Standard Error: 1_402
			.saturating_add(Weight::from_parts(70_557, 0).saturating_mul(x.into()))
			// Standard Error: 1_405
			.saturating_add(Weight::from_parts(13_820, 0).saturating_mul(y.into()))
			// Standard Error: 4_951
			.saturating_add(Weight::from_parts(118_552, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 19).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 76).saturating_mul(z.into()))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:2 w:2)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:2 w:2)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:2 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn delegate_with_auto_compound_worst() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `47482`
		//  Estimated: `53422`
		// Minimum execution time: 121_000_000 picoseconds.
		Weight::from_parts(123_000_000, 0)
			.saturating_add(Weight::from_parts(0, 53422))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(13))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn mint_collator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `51`
		//  Estimated: `3581`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::EnableMarkingOffline` (r:1 w:0)
	/// Proof: `ParachainStaking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:1 w:0)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:1 w:0)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MoonbeamOrbiters::OrbiterPerRound` (r:1 w:0)
	/// Proof: `MoonbeamOrbiters::OrbiterPerRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn notify_inactive_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `11335`
		//  Estimated: `14800`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 0)
			.saturating_add(Weight::from_parts(0, 14800))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
