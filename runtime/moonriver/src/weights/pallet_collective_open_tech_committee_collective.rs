// Copyright 2025 Moonbeam foundation
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.


//! Autogenerated weights for `pallet_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-07-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-0-0-36`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=./target/production/wbuild/moonriver-runtime/moonriver_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --wasm-execution=compiled
// --header=./file_header.txt
// --template=./benchmarking/frame-weight-template.hbs
// --output=./runtime/moonriver/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for `pallet_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:100 w:100)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 9]`.
	/// The range of component `n` is `[0, 9]`.
	/// The range of component `p` is `[0, 20]`.
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (2021 ±0) + p * (2026 ±0)`
		//  Estimated: `12234 + m * (1231 ±15) + p * (3660 ±15)`
		// Minimum execution time: 15_156_000 picoseconds.
		Weight::from_parts(15_430_000, 12234)
			// Standard Error: 55_904
			.saturating_add(Weight::from_parts(4_095_609, 0).saturating_mul(m.into()))
			// Standard Error: 55_904
			.saturating_add(Weight::from_parts(8_082_768, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1231).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3660).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 9]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + m * (20 ±0)`
		//  Estimated: `1668 + m * (20 ±0)`
		// Minimum execution time: 16_760_000 picoseconds.
		Weight::from_parts(18_190_687, 1668)
			// Standard Error: 39
			.saturating_add(Weight::from_parts(1_447, 0).saturating_mul(b.into()))
			// Standard Error: 404
			.saturating_add(Weight::from_parts(13_118, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 9]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + m * (20 ±0)`
		//  Estimated: `3648 + m * (20 ±0)`
		// Minimum execution time: 19_493_000 picoseconds.
		Weight::from_parts(20_860_036, 3648)
			// Standard Error: 45
			.saturating_add(Weight::from_parts(1_375, 0).saturating_mul(b.into()))
			// Standard Error: 471
			.saturating_add(Weight::from_parts(21_185, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(m.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalCount` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391 + m * (20 ±0) + p * (36 ±0)`
		//  Estimated: `3785 + m * (21 ±0) + p * (36 ±0)`
		// Minimum execution time: 21_415_000 picoseconds.
		Weight::from_parts(23_121_314, 3785)
			// Standard Error: 170
			.saturating_add(Weight::from_parts(3_479, 0).saturating_mul(b.into()))
			// Standard Error: 1_778
			.saturating_add(Weight::from_parts(25_316, 0).saturating_mul(m.into()))
			// Standard Error: 1_756
			.saturating_add(Weight::from_parts(215_157, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 21).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 9]`.
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `866 + m * (40 ±0)`
		//  Estimated: `4330 + m * (40 ±0)`
		// Minimum execution time: 28_060_000 picoseconds.
		Weight::from_parts(29_199_090, 4330)
			// Standard Error: 1_103
			.saturating_add(Weight::from_parts(32_801, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(m.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443 + m * (40 ±0) + p * (36 ±0)`
		//  Estimated: `3888 + m * (41 ±0) + p * (36 ±0)`
		// Minimum execution time: 26_466_000 picoseconds.
		Weight::from_parts(26_322_247, 3888)
			// Standard Error: 930
			.saturating_add(Weight::from_parts(32_005, 0).saturating_mul(m.into()))
			// Standard Error: 907
			.saturating_add(Weight::from_parts(202_626, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 41).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `825 + b * (1 ±0) + m * (40 ±0) + p * (40 ±0)`
		//  Estimated: `4142 + b * (1 ±0) + m * (42 ±0) + p * (40 ±0)`
		// Minimum execution time: 40_261_000 picoseconds.
		Weight::from_parts(41_783_788, 4142)
			// Standard Error: 168
			.saturating_add(Weight::from_parts(1_779, 0).saturating_mul(b.into()))
			// Standard Error: 1_781
			.saturating_add(Weight::from_parts(25_178, 0).saturating_mul(m.into()))
			// Standard Error: 1_736
			.saturating_add(Weight::from_parts(239_779, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + m * (30 ±0) + p * (36 ±0)`
		//  Estimated: `3954 + m * (31 ±0) + p * (36 ±0)`
		// Minimum execution time: 27_827_000 picoseconds.
		Weight::from_parts(28_044_928, 3954)
			// Standard Error: 938
			.saturating_add(Weight::from_parts(29_456, 0).saturating_mul(m.into()))
			// Standard Error: 915
			.saturating_add(Weight::from_parts(209_767, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 31).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 9]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `845 + b * (1 ±0) + m * (40 ±0) + p * (40 ±0)`
		//  Estimated: `4162 + b * (1 ±0) + m * (42 ±0) + p * (40 ±0)`
		// Minimum execution time: 42_703_000 picoseconds.
		Weight::from_parts(43_677_264, 4162)
			// Standard Error: 199
			.saturating_add(Weight::from_parts(2_525, 0).saturating_mul(b.into()))
			// Standard Error: 2_104
			.saturating_add(Weight::from_parts(24_701, 0).saturating_mul(m.into()))
			// Standard Error: 2_051
			.saturating_add(Weight::from_parts(243_271, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + p * (32 ±0)`
		//  Estimated: `1745 + p * (32 ±0)`
		// Minimum execution time: 13_389_000 picoseconds.
		Weight::from_parts(14_830_414, 1745)
			// Standard Error: 780
			.saturating_add(Weight::from_parts(170_918, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::CostOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::CostOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `p` is `[1, 20]`.
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `p` is `[1, 100]`.
	fn kill(d: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1531 + p * (36 ±0)`
		//  Estimated: `4930 + d * (123 ±6) + p * (37 ±0)`
		// Minimum execution time: 21_292_000 picoseconds.
		Weight::from_parts(24_140_681, 4930)
			// Standard Error: 70_421
			.saturating_add(Weight::from_parts(383_455, 0).saturating_mul(d.into()))
			// Standard Error: 1_090
			.saturating_add(Weight::from_parts(210_298, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 123).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::CostOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::CostOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn release_proposal_cost() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `945`
		//  Estimated: `4410`
		// Minimum execution time: 16_044_000 picoseconds.
		Weight::from_parts(16_583_000, 4410)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
}
