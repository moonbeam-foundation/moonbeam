searchState.loadedDescShard("moonbeam_rpc_trace", 0, "<code>trace_filter</code> RPC handler and its associated service task. …\nAn opaque batch ID.\nAllows to interact with the cache task.\nType wrapper for the cache task, generic over the Client, …\nRPC handler. Will communicate with a <code>CacheTask</code> through a …\nServer trait implementation for the <code>Trace</code> RPC API.\n(optional) The offset trace number\n(optional) Integer number of traces to display in a batch.\nCreate a new cache task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n(optional) Sent from these addresses.\n(optional?) From this block.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nFetch the traces for given block hash. The task will …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects all the methods and subscriptions defined in the …\nCreate a new RPC handler.\nRequest to start caching the provided range of blocks. The …\nNotify the cache that it can stop the batch with that ID. …\n(optional) Sent to these addresses.\n(optional?) To this block.")