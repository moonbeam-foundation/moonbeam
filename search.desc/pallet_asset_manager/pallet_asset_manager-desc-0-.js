searchState.loadedDescShard("pallet_asset_manager", 0, "Asset Manager Pallet\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for pallet_asset_manager\nThe Asset Id. This will be used to create the asset and to …\nMapping from an asset id to asset type. This is mostly …\nThe asset Registrar. The trait we use to register Assets\nThe Asset Metadata we want to store\nReverse mapping of AssetIdType. Mapping from an asset type …\nThe units in which we record balances.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nAn error that can occur while executing the mapping pallet…\nThe <code>Event</code> enum of this pallet\nRemoved all information related to an assetId and …\nOrigin that is allowed to create and modify asset …\nNew asset with the asset manager is registered\nRemoved all information related to an assetId\nThe Foreign Asset Kind.\nChanged the xcm type mapping for a given asset id\nRemoved all information related to an assetId and …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe AssetManagers’s pallet id\nThe <code>Pallet</code> struct, the main type that implements traits …\nSupported asset type for fee payment removed\nChanged the amount of units we are charging per execution …\nThe account ID of AssetManager\nAn auto-generated getter for <code>AssetIdType</code>.\nAn auto-generated getter for <code>AssetTypeId</code>.\nChange the xcm type mapping for a given assetId We also …\nChange the xcm type mapping for a given assetId We also …\nDestroy a given foreign assetId The weight in this case is …\nDestroy a given foreign assetId The weight in this case is …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>change_existing_asset_type</code>.\nCreate a call with the variant <code>destroy_foreign_asset</code>.\nCreate a call with the variant <code>register_foreign_asset</code>.\nCreate a call with the variant <code>remove_existing_asset_type</code>.\nRegister new asset with the asset manager\nRegister new asset with the asset manager\nRemove a given assetId -&gt; assetType association\nRemove a given assetId -&gt; assetType association\nAuto-generated docs-only module listing all (public and …\nChange the xcm type mapping for a given assetId We also …\nDestroy a given foreign assetId The weight in this case is …\nRegister new asset with the asset manager\nRemove a given assetId -&gt; assetType association\nMapping from an asset id to asset type. This is mostly …\nReverse mapping of AssetIdType. Mapping from an asset type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for pallet_asset_manager using the Substrate node …\nWeight functions needed for pallet_asset_manager.\nStorage: AssetManager SupportedFeePaymentAssets (r:1 w:1) …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: AssetManager AssetIdType (r:1 w:1) Proof Skipped: …\nStorage: AssetManager SupportedFeePaymentAssets (r:1 w:1) …")