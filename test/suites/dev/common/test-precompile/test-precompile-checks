import "@moonbeam-network/api-augment";
import {
  beforeAll,
  describeSuite,
  DevModeContext,
  expect,
} from "@moonwall/cli";
import {encodeFunctionData, parseEther} from "viem";
import {ALITH_ADDRESS} from "@moonwall/util";

describeSuite({
  id: "D015001",
  title: "Precompiles - Validate PrecompileChecks",
  foundationMethods: "dev",
  testCases: ({ context, it, log }) => {
    let contextCheckerContract;

    async function validateContextCheckerAfterCall(
      context: DevModeContext,
      lastMsgSender: string,
      lastTxOrigin: string,
      counter: bigint
    ) {
      expect((await context.viem().readContract({
        address: contextCheckerContract.contractAddress,
        abi: contextCheckerContract.abi,
        args: [],
        functionName: "lastMsgSender",
      }) as string).toLowerCase()).to.equal(lastMsgSender.toLowerCase());

      expect((await context.viem().readContract({
        address: contextCheckerContract.contractAddress,
        abi: contextCheckerContract.abi,
        args: [],
        functionName: "lastTxOrigin",
      }) as string).toLowerCase()).to.equal(lastTxOrigin.toLowerCase());

      expect(await context.viem().readContract({
        address: contextCheckerContract.contractAddress,
        abi: contextCheckerContract.abi,
        args: [],
        functionName: "counter",
      })).to.equal(counter);
    }

    beforeAll(async () => {
      // Test setup

      contextCheckerContract = await context.deployContract!("ContextChecker");

      await validateContextCheckerAfterCall(
        context,
        ALITH_ADDRESS,
        ALITH_ADDRESS,
        0n,
      );
    });

    it({
      id: "T01",
      title: `Validate "CallableByContract" by calling precompile from smart-contract constructor`,
      test: async function () {
        const result = await context.deployContract!(
          "CallBatchPrecompileFromConstructor",
          {
            gas: 5_000_000n,
            rawTxOnly: true,
            args: [
              contextCheckerContract.contractAddress,
              [
                encodeFunctionData({
                  abi: contextCheckerContract.abi,
                  functionName: "simple",
                  args: [],
                })
              ],
            ],
          }
        );

        // Check the evm tx was executed successfully
        const ethEvent = (await context.polkadotJs().query.system.events()).find(({ event }) =>
          context.polkadotJs().events.ethereum.Executed.is(event)
        );
        //expect((ethEvent.toHuman() as any).event["data"]["exitReason"]["Revert"]).equals(
        //  "Reverted"
        //);

        await validateContextCheckerAfterCall(
          context,
          result.contractAddress,
          ALITH_ADDRESS,
          1n
        );

        const rawTx = await context.writeContract({
          contractName: "CallBatchPrecompileFromConstructor",
          contractAddress: result.contractAddress,
          functionName: "simple",
          args: [
            contextCheckerContract.contractAddress,
            [
              encodeFunctionData({
                abi: contextCheckerContract.abi,
                functionName: "simple",
                args: [],
              })
            ],
          ],
          gas: 5_000_000n,
          value: parseEther("0"),
        });
        const blockResult = await context.createBlock(rawTx, { allowFailures: false });

        await new Promise(r => setTimeout(r, 120_000))
        await validateContextCheckerAfterCall(
          context,
          result.contractAddress,
          ALITH_ADDRESS,
          2n
        );

        await new Promise(r => setTimeout(r, 120_000))

        console.log(result);
      },
    });
  },
});
