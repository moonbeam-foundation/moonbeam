{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "proposalHash",
            "type": "bytes32"
          }
        ],
        "name": "Closed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "proposalHash",
            "type": "bytes32"
          }
        ],
        "name": "Executed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "who",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint32",
            "name": "proposalIndex",
            "type": "uint32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "proposalHash",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "uint32",
            "name": "threshold",
            "type": "uint32"
          }
        ],
        "name": "Proposed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "who",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "proposalHash",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "voted",
            "type": "bool"
          }
        ],
        "name": "Voted",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "proposalHash",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "proposalIndex",
            "type": "uint32"
          },
          {
            "internalType": "uint64",
            "name": "proposalWeightBound",
            "type": "uint64"
          },
          { "internalType": "uint32", "name": "lengthBound", "type": "uint32" }
        ],
        "name": "close",
        "outputs": [
          { "internalType": "bool", "name": "executed", "type": "bool" }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "bytes", "name": "proposal", "type": "bytes" }
        ],
        "name": "execute",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "account", "type": "address" }
        ],
        "name": "isMember",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "members",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "members",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "prime",
        "outputs": [
          { "internalType": "address", "name": "prime", "type": "address" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "bytes", "name": "proposal", "type": "bytes" }
        ],
        "name": "proposalHash",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "proposalHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "proposals",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "proposalsHash",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint32", "name": "threshold", "type": "uint32" },
          { "internalType": "bytes", "name": "proposal", "type": "bytes" }
        ],
        "name": "propose",
        "outputs": [
          { "internalType": "uint32", "name": "index", "type": "uint32" }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "proposalHash",
            "type": "bytes32"
          },
          {
            "internalType": "uint32",
            "name": "proposalIndex",
            "type": "uint32"
          },
          { "internalType": "bool", "name": "approve", "type": "bool" }
        ],
        "name": "vote",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "close(bytes32,uint32,uint64,uint32)": {
          "custom:selector": "638d9d47",
          "details": "Close a proposal. Can be called by anyone once there is enough votes. Reverts if called at a non appropriate time.",
          "params": {
            "lengthBound": "Must be a value higher or equal to the length of the SCALE-encoded proposal in bytes.",
            "proposalHash": "Hash of the proposal to close.",
            "proposalIndex": "Index of the proposal.",
            "proposalWeightBound": "Maximum amount of Substrate weight the proposal can use. This call will revert if the proposal call would use more."
          },
          "returns": { "executed": "Was the proposal executed or removed?" }
        },
        "execute(bytes)": {
          "custom:selector": "09c5eabe",
          "details": "Execute a proposal as a single member of the collective. The sender must be a member of the collective. This will NOT revert if the Substrate proposal is dispatched but fails !",
          "params": { "proposal": "SCALE-encoded Substrate call." }
        },
        "isMember(address)": {
          "custom:selector": "a230c524",
          "details": "Check if the given account is a member of the collective.",
          "params": { "account": "Account to check membership." }
        },
        "members()": {
          "custom:selector": "bdd4d18d",
          "details": "Get the list of members.",
          "returns": { "members": "List of members." }
        },
        "prime()": {
          "custom:selector": "c7ee005e",
          "details": "Get the prime account if there is one.",
          "returns": { "prime": "Prime account of 0x00..00 if None." }
        },
        "proposalHash(bytes)": {
          "custom:selector": "fc379417",
          "details": "Compute the hash of a proposal.",
          "params": { "proposal": "SCALE-encoded Substrate call." },
          "returns": { "proposalHash": "Hash of the proposal." }
        },
        "proposals()": {
          "custom:selector": "55ef20e6",
          "details": "Get the hashes of active proposals.",
          "returns": { "proposalsHash": "Hashes of active proposals." }
        },
        "propose(uint32,bytes)": {
          "custom:selector": "c57f3260",
          "details": "Make a proposal for a call. The sender must be a member of the collective. If the threshold is less than 2 then the proposal will be dispatched directly from the group of one member of the collective.",
          "params": {
            "proposal": "SCALE-encoded Substrate call.",
            "threshold": "Amount of members required to dispatch the proposal."
          },
          "returns": {
            "index": "Index of the new proposal. Meaningless if threshold < 2"
          }
        },
        "vote(bytes32,uint32,bool)": {
          "custom:selector": "73e37688",
          "details": "Vote for a proposal. The sender must be a member of the collective.",
          "params": {
            "approve": "The vote itself, is the caller approving or not the proposal.",
            "proposalHash": "Hash of the proposal to vote for. Ensure the caller knows what they're voting in case of front-running or reorgs.",
            "proposalIndex": "Index of the proposal (returned by propose)."
          }
        }
      },
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "close(bytes32,uint32,uint64,uint32)": "638d9d47",
        "execute(bytes)": "09c5eabe",
        "isMember(address)": "a230c524",
        "members()": "bdd4d18d",
        "prime()": "c7ee005e",
        "proposalHash(bytes)": "fc379417",
        "proposals()": "55ef20e6",
        "propose(uint32,bytes)": "c57f3260",
        "vote(bytes32,uint32,bool)": "73e37688"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"proposalIndex\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"threshold\",\"type\":\"uint32\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"proposalIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"proposalWeightBound\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lengthBound\",\"type\":\"uint32\"}],\"name\":\"close\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proposal\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prime\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proposal\",\"type\":\"bytes\"}],\"name\":\"proposalHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalsHash\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"threshold\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"proposal\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"proposalIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(bytes32,uint32,uint64,uint32)\":{\"custom:selector\":\"638d9d47\",\"details\":\"Close a proposal. Can be called by anyone once there is enough votes. Reverts if called at a non appropriate time.\",\"params\":{\"lengthBound\":\"Must be a value higher or equal to the length of the SCALE-encoded proposal in bytes.\",\"proposalHash\":\"Hash of the proposal to close.\",\"proposalIndex\":\"Index of the proposal.\",\"proposalWeightBound\":\"Maximum amount of Substrate weight the proposal can use. This call will revert if the proposal call would use more.\"},\"returns\":{\"executed\":\"Was the proposal executed or removed?\"}},\"execute(bytes)\":{\"custom:selector\":\"09c5eabe\",\"details\":\"Execute a proposal as a single member of the collective. The sender must be a member of the collective. This will NOT revert if the Substrate proposal is dispatched but fails !\",\"params\":{\"proposal\":\"SCALE-encoded Substrate call.\"}},\"isMember(address)\":{\"custom:selector\":\"a230c524\",\"details\":\"Check if the given account is a member of the collective.\",\"params\":{\"account\":\"Account to check membership.\"}},\"members()\":{\"custom:selector\":\"bdd4d18d\",\"details\":\"Get the list of members.\",\"returns\":{\"members\":\"List of members.\"}},\"prime()\":{\"custom:selector\":\"c7ee005e\",\"details\":\"Get the prime account if there is one.\",\"returns\":{\"prime\":\"Prime account of 0x00..00 if None.\"}},\"proposalHash(bytes)\":{\"custom:selector\":\"fc379417\",\"details\":\"Compute the hash of a proposal.\",\"params\":{\"proposal\":\"SCALE-encoded Substrate call.\"},\"returns\":{\"proposalHash\":\"Hash of the proposal.\"}},\"proposals()\":{\"custom:selector\":\"55ef20e6\",\"details\":\"Get the hashes of active proposals.\",\"returns\":{\"proposalsHash\":\"Hashes of active proposals.\"}},\"propose(uint32,bytes)\":{\"custom:selector\":\"c57f3260\",\"details\":\"Make a proposal for a call. The sender must be a member of the collective. If the threshold is less than 2 then the proposal will be dispatched directly from the group of one member of the collective.\",\"params\":{\"proposal\":\"SCALE-encoded Substrate call.\",\"threshold\":\"Amount of members required to dispatch the proposal.\"},\"returns\":{\"index\":\"Index of the new proposal. Meaningless if threshold < 2\"}},\"vote(bytes32,uint32,bool)\":{\"custom:selector\":\"73e37688\",\"details\":\"Vote for a proposal. The sender must be a member of the collective.\",\"params\":{\"approve\":\"The vote itself, is the caller approving or not the proposal.\",\"proposalHash\":\"Hash of the proposal to vote for. Ensure the caller knows what they're voting in case of front-running or reorgs.\",\"proposalIndex\":\"Index of the proposal (returned by propose).\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"CollectivePrecompile\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0xa853fe6fafe0465a51865e8aa4f24c50b06b1886fb65fab44c35d7f1d0e26d26\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://da0a32eb0c137b4b2333eb3cdc75cadd37b4f770ea24c995f44a6b3fabb4256a\",\"dweb:/ipfs/QmXw2PNXmYwd6TgwxkBUniHvtZonVFSq4xRXxvd7m5R4is\"]},\"precompiles/collective/Collective.sol\":{\"keccak256\":\"0xf3641d0dec901eaa9bab4b68b758202907e1000962b524150908d3d1e5d9daa5\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://a5298a6f5a1ac328cdc86d6d99b3ba6ec22755484ba1f1c78d48acb3bacb4c17\",\"dweb:/ipfs/QmW6BMagFSi3zt9E7aaUSttVWSAhb1xdMEm3suodkQdkkr\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "sourceCode": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\nimport \"../../../precompiles/collective/Collective.sol\";\n\nabstract contract CollectivePrecompile is Collective {}\n"
}
