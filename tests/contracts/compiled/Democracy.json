{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "who",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "target",
            "type": "address"
          }
        ],
        "name": "Delegated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint32",
            "name": "proposalIndex",
            "type": "uint32"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "deposit",
            "type": "uint256"
          }
        ],
        "name": "Proposed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint32",
            "name": "proposalIndex",
            "type": "uint32"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "seconder",
            "type": "address"
          }
        ],
        "name": "Seconded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint32",
            "name": "referendumIndex",
            "type": "uint32"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "voter",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "aye",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "voteAmount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint8",
            "name": "conviction",
            "type": "uint8"
          }
        ],
        "name": "StandardVote",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "who",
            "type": "address"
          }
        ],
        "name": "Undelegated",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "representative",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "conviction",
            "type": "uint256"
          },
          { "internalType": "uint256", "name": "amount", "type": "uint256" }
        ],
        "name": "delegate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "propIndex", "type": "uint256" }
        ],
        "name": "depositOf",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint32", "name": "refIndex", "type": "uint32" }
        ],
        "name": "finishedReferendumInfo",
        "outputs": [
          { "internalType": "bool", "name": "", "type": "bool" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lowestUnbaked",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "encodedProposal",
            "type": "bytes"
          }
        ],
        "name": "noteImminentPreimage",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "encodedProposal",
            "type": "bytes"
          }
        ],
        "name": "notePreimage",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint32", "name": "refIndex", "type": "uint32" }
        ],
        "name": "ongoingReferendumInfo",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "bytes32", "name": "", "type": "bytes32" },
          { "internalType": "uint8", "name": "", "type": "uint8" },
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "proposalHash",
            "type": "bytes32"
          },
          { "internalType": "uint256", "name": "value", "type": "uint256" }
        ],
        "name": "propose",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "publicPropCount",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "refIndex", "type": "uint256" }
        ],
        "name": "removeVote",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "propIndex", "type": "uint256" },
          {
            "internalType": "uint256",
            "name": "secondsUpperBound",
            "type": "uint256"
          }
        ],
        "name": "second",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "refIndex", "type": "uint256" },
          { "internalType": "bool", "name": "aye", "type": "bool" },
          {
            "internalType": "uint256",
            "name": "voteAmount",
            "type": "uint256"
          },
          { "internalType": "uint256", "name": "conviction", "type": "uint256" }
        ],
        "name": "standardVote",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "unDelegate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "target", "type": "address" }
        ],
        "name": "unlock",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "The Moonbeam Team",
      "custom:address": "0x0000000000000000000000000000000000000803",
      "details": "The interface through which solidity contracts will interact with pallet-democracy. This interface does not exhaustively wrap pallet democracy, rather it wraps the most important parts and the parts that are expected to be most useful to evm contracts. More exhaustive wrapping can be added later if it is desireable and the pallet interface is deemed sufficiently stable.",
      "events": {
        "Delegated(address,address)": {
          "custom:selector": "4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea2",
          "details": "An account delegated some voting power to another account",
          "params": {
            "target": "address Address of the delegatee.",
            "who": "address Address of the delegator."
          }
        },
        "Proposed(uint32,uint256)": {
          "custom:selector": "d89e173ca5c9fd0ec38f2b01995c4f1748210f686fa189a6b8d189c210444924",
          "details": "A motion has been proposed by a public account.",
          "params": {
            "deposit": "uint256 Amount of tokens deposited.",
            "proposalIndex": "uint32 Index of the proposal."
          }
        },
        "Seconded(uint32,address)": {
          "custom:selector": "e1613d7e3f54885ef3ffdb714435193b9b80818bd3381f108a4d4b21e842654a",
          "details": "An account has seconded a proposal.",
          "params": {
            "proposalIndex": "uint32 Index of the proposal.",
            "seconder": "address Address of the seconder."
          }
        },
        "StandardVote(uint32,address,bool,uint256,uint8)": {
          "custom:selector": "057363260bf880d3658601ecff97e75b67a22f38b7066c0e47e2d170477579c3",
          "details": "An account made a standard vote.",
          "params": {
            "aye": "bool Is it a vote for or against the referendum.",
            "conviction": "uint8 Conviction of the vote.",
            "referendumIndex": "uint32 Index of the referendum.",
            "voteAmount": "uint256 Amount used to vote.",
            "voter": "address Address of the voter."
          }
        },
        "Undelegated(address)": {
          "custom:selector": "42176493fdfcada70cc1bcf321c9a2314e9571a9fe53c54a5385a1eeac8bc1d7",
          "details": "An account undelegated.",
          "params": { "who": "address Address of the delegator." }
        }
      },
      "kind": "dev",
      "methods": {
        "delegate(address,uint256,uint256)": {
          "custom:selector": "0185921e",
          "details": "The balance delegated is locked for as long as it is delegated, and thereafter for the time appropriate for the conviction's lock period.",
          "params": {
            "amount": "The number of tokens whose voting power shall be delegated.",
            "conviction": "The conviction with which you are delegating. This conviction is used for All_ delegated votes.",
            "representative": "The account to whom the vote shall be delegated."
          }
        },
        "depositOf(uint256)": {
          "custom:selector": "4767142d",
          "details": "Unlike the similarly-named Rust function this one only returns the value, not the complete list of backers.",
          "params": {
            "propIndex": "The index of the proposal you are interested in"
          },
          "returns": { "_0": "The amount of tokens locked behind the proposal" }
        },
        "finishedReferendumInfo(uint32)": {
          "custom:selector": "c75abcce",
          "details": "This, along with `ongoingReferendumInfo`, wraps the pallet's `referendumInfo` function. It is necessary to split it into two here because Solidity only has c-style enums.",
          "params": {
            "refIndex": "The index of the referendum you are interested in"
          },
          "returns": {
            "_0": "A tuple including whether the referendum passed, and the block at which it finished."
          }
        },
        "lowestUnbaked()": {
          "custom:selector": "d49dccf0",
          "returns": {
            "_0": "The lowest referendum index representing an unbaked referendum."
          }
        },
        "noteImminentPreimage(bytes)": {
          "custom:selector": "974791e3",
          "params": {
            "encodedProposal": "The scale-encoded proposal whose hash has been submitted on-chain."
          }
        },
        "notePreimage(bytes)": {
          "custom:selector": "cb00f603",
          "params": {
            "encodedProposal": "The scale-encoded proposal whose hash has been submitted on-chain."
          }
        },
        "ongoingReferendumInfo(uint32)": {
          "custom:selector": "f033b7cd",
          "details": "This, along with `finishedReferendumInfo`, wraps the pallet's `referendumInfo` function. It is necessary to split it into two here because Solidity only has c-style enums.",
          "params": {
            "refIndex": "The index of the referendum you are interested in"
          },
          "returns": {
            "_0": "A tuple including:  * The block in which the referendum ended  * The proposal hash  * The baising mechanism 0-SuperMajorityApprove, 1-SuperMajorityAgainst, 2-SimpleMajority  * The delay between passing and launching  * The total aye vote (including conviction)  * The total nay vote (including conviction)  * The total turnout (not including conviction)"
          }
        },
        "propose(bytes32,uint256)": {
          "custom:selector": "7824e7d1",
          "params": {
            "proposalHash": "The hash of the proposal you are making",
            "value": "The number of tokens to be locked behind this proposal."
          }
        },
        "publicPropCount()": {
          "custom:selector": "31305462",
          "returns": {
            "_0": "The total number of public proposals past and present"
          }
        },
        "removeVote(uint256)": {
          "custom:selector": "3f68fde4",
          "details": "Locks get complex when votes are removed. See pallet-democracy's docs for details.",
          "params": {
            "refIndex": "The index of the referendum you are interested in"
          }
        },
        "second(uint256,uint256)": {
          "custom:selector": "c7a76601",
          "details": "No amount is necessary here. Seconds are always for the same amount that the original proposer locked. You may second multiple times.",
          "params": {
            "propIndex": "index of the proposal you want to second",
            "secondsUpperBound": "A number greater than or equal to the current number of seconds. This is necessary for calculating the weight of the call."
          }
        },
        "standardVote(uint256,bool,uint256,uint256)": {
          "custom:selector": "6cd18b0d",
          "details": "This function only supposrts `Standard` votes where you either vote aye xor nay. It does not support `Split` votes where you vote on both sides. If such a need arises, we should add an additional function to this interface called `splitVote`.",
          "params": {
            "aye": "`true` is a vote to enact the proposal; `false` is a vote to keep the status quo.",
            "conviction": "How strongly you want to vote. Higher conviction means longer lock time. This must be an interget in the range 0 to 6",
            "refIndex": "index of the referendum you want to vote in",
            "voteAmount": "The number of tokens you are willing to lock if you get your way"
          }
        },
        "unDelegate()": {
          "custom:selector": "1eef225c",
          "details": "Tokens may be unlocked once the lock period corresponding to the conviction with which the delegation was issued has elapsed."
        },
        "unlock(address)": {
          "custom:selector": "2f6c493c",
          "params": {
            "target": "The account whose tokens should be unlocked. This may be any account."
          }
        }
      },
      "title": "Pallet Democracy Interface",
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "delegate(address,uint256,uint256)": "0185921e",
        "depositOf(uint256)": "4767142d",
        "finishedReferendumInfo(uint32)": "c75abcce",
        "lowestUnbaked()": "d49dccf0",
        "noteImminentPreimage(bytes)": "974791e3",
        "notePreimage(bytes)": "cb00f603",
        "ongoingReferendumInfo(uint32)": "f033b7cd",
        "propose(bytes32,uint256)": "7824e7d1",
        "publicPropCount()": "31305462",
        "removeVote(uint256)": "3f68fde4",
        "second(uint256,uint256)": "c7a76601",
        "standardVote(uint256,bool,uint256,uint256)": "6cd18b0d",
        "unDelegate()": "1eef225c",
        "unlock(address)": "2f6c493c"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"proposalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"proposalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seconder\",\"type\":\"address\"}],\"name\":\"Seconded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"referendumIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"aye\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"conviction\",\"type\":\"uint8\"}],\"name\":\"StandardVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"representative\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"conviction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"propIndex\",\"type\":\"uint256\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"refIndex\",\"type\":\"uint32\"}],\"name\":\"finishedReferendumInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowestUnbaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedProposal\",\"type\":\"bytes\"}],\"name\":\"noteImminentPreimage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedProposal\",\"type\":\"bytes\"}],\"name\":\"notePreimage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"refIndex\",\"type\":\"uint32\"}],\"name\":\"ongoingReferendumInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPropCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refIndex\",\"type\":\"uint256\"}],\"name\":\"removeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"propIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUpperBound\",\"type\":\"uint256\"}],\"name\":\"second\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"aye\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conviction\",\"type\":\"uint256\"}],\"name\":\"standardVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Moonbeam Team\",\"custom:address\":\"0x0000000000000000000000000000000000000803\",\"details\":\"The interface through which solidity contracts will interact with pallet-democracy. This interface does not exhaustively wrap pallet democracy, rather it wraps the most important parts and the parts that are expected to be most useful to evm contracts. More exhaustive wrapping can be added later if it is desireable and the pallet interface is deemed sufficiently stable.\",\"events\":{\"Delegated(address,address)\":{\"custom:selector\":\"4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea2\",\"details\":\"An account delegated some voting power to another account\",\"params\":{\"target\":\"address Address of the delegatee.\",\"who\":\"address Address of the delegator.\"}},\"Proposed(uint32,uint256)\":{\"custom:selector\":\"d89e173ca5c9fd0ec38f2b01995c4f1748210f686fa189a6b8d189c210444924\",\"details\":\"A motion has been proposed by a public account.\",\"params\":{\"deposit\":\"uint256 Amount of tokens deposited.\",\"proposalIndex\":\"uint32 Index of the proposal.\"}},\"Seconded(uint32,address)\":{\"custom:selector\":\"e1613d7e3f54885ef3ffdb714435193b9b80818bd3381f108a4d4b21e842654a\",\"details\":\"An account has seconded a proposal.\",\"params\":{\"proposalIndex\":\"uint32 Index of the proposal.\",\"seconder\":\"address Address of the seconder.\"}},\"StandardVote(uint32,address,bool,uint256,uint8)\":{\"custom:selector\":\"057363260bf880d3658601ecff97e75b67a22f38b7066c0e47e2d170477579c3\",\"details\":\"An account made a standard vote.\",\"params\":{\"aye\":\"bool Is it a vote for or against the referendum.\",\"conviction\":\"uint8 Conviction of the vote.\",\"referendumIndex\":\"uint32 Index of the referendum.\",\"voteAmount\":\"uint256 Amount used to vote.\",\"voter\":\"address Address of the voter.\"}},\"Undelegated(address)\":{\"custom:selector\":\"42176493fdfcada70cc1bcf321c9a2314e9571a9fe53c54a5385a1eeac8bc1d7\",\"details\":\"An account undelegated.\",\"params\":{\"who\":\"address Address of the delegator.\"}}},\"kind\":\"dev\",\"methods\":{\"delegate(address,uint256,uint256)\":{\"custom:selector\":\"0185921e\",\"details\":\"The balance delegated is locked for as long as it is delegated, and thereafter for the time appropriate for the conviction's lock period.\",\"params\":{\"amount\":\"The number of tokens whose voting power shall be delegated.\",\"conviction\":\"The conviction with which you are delegating. This conviction is used for All_ delegated votes.\",\"representative\":\"The account to whom the vote shall be delegated.\"}},\"depositOf(uint256)\":{\"custom:selector\":\"4767142d\",\"details\":\"Unlike the similarly-named Rust function this one only returns the value, not the complete list of backers.\",\"params\":{\"propIndex\":\"The index of the proposal you are interested in\"},\"returns\":{\"_0\":\"The amount of tokens locked behind the proposal\"}},\"finishedReferendumInfo(uint32)\":{\"custom:selector\":\"c75abcce\",\"details\":\"This, along with `ongoingReferendumInfo`, wraps the pallet's `referendumInfo` function. It is necessary to split it into two here because Solidity only has c-style enums.\",\"params\":{\"refIndex\":\"The index of the referendum you are interested in\"},\"returns\":{\"_0\":\"A tuple including whether the referendum passed, and the block at which it finished.\"}},\"lowestUnbaked()\":{\"custom:selector\":\"d49dccf0\",\"returns\":{\"_0\":\"The lowest referendum index representing an unbaked referendum.\"}},\"noteImminentPreimage(bytes)\":{\"custom:selector\":\"974791e3\",\"params\":{\"encodedProposal\":\"The scale-encoded proposal whose hash has been submitted on-chain.\"}},\"notePreimage(bytes)\":{\"custom:selector\":\"cb00f603\",\"params\":{\"encodedProposal\":\"The scale-encoded proposal whose hash has been submitted on-chain.\"}},\"ongoingReferendumInfo(uint32)\":{\"custom:selector\":\"f033b7cd\",\"details\":\"This, along with `finishedReferendumInfo`, wraps the pallet's `referendumInfo` function. It is necessary to split it into two here because Solidity only has c-style enums.\",\"params\":{\"refIndex\":\"The index of the referendum you are interested in\"},\"returns\":{\"_0\":\"A tuple including:  * The block in which the referendum ended  * The proposal hash  * The baising mechanism 0-SuperMajorityApprove, 1-SuperMajorityAgainst, 2-SimpleMajority  * The delay between passing and launching  * The total aye vote (including conviction)  * The total nay vote (including conviction)  * The total turnout (not including conviction)\"}},\"propose(bytes32,uint256)\":{\"custom:selector\":\"7824e7d1\",\"params\":{\"proposalHash\":\"The hash of the proposal you are making\",\"value\":\"The number of tokens to be locked behind this proposal.\"}},\"publicPropCount()\":{\"custom:selector\":\"31305462\",\"returns\":{\"_0\":\"The total number of public proposals past and present\"}},\"removeVote(uint256)\":{\"custom:selector\":\"3f68fde4\",\"details\":\"Locks get complex when votes are removed. See pallet-democracy's docs for details.\",\"params\":{\"refIndex\":\"The index of the referendum you are interested in\"}},\"second(uint256,uint256)\":{\"custom:selector\":\"c7a76601\",\"details\":\"No amount is necessary here. Seconds are always for the same amount that the original proposer locked. You may second multiple times.\",\"params\":{\"propIndex\":\"index of the proposal you want to second\",\"secondsUpperBound\":\"A number greater than or equal to the current number of seconds. This is necessary for calculating the weight of the call.\"}},\"standardVote(uint256,bool,uint256,uint256)\":{\"custom:selector\":\"6cd18b0d\",\"details\":\"This function only supposrts `Standard` votes where you either vote aye xor nay. It does not support `Split` votes where you vote on both sides. If such a need arises, we should add an additional function to this interface called `splitVote`.\",\"params\":{\"aye\":\"`true` is a vote to enact the proposal; `false` is a vote to keep the status quo.\",\"conviction\":\"How strongly you want to vote. Higher conviction means longer lock time. This must be an interget in the range 0 to 6\",\"refIndex\":\"index of the referendum you want to vote in\",\"voteAmount\":\"The number of tokens you are willing to lock if you get your way\"}},\"unDelegate()\":{\"custom:selector\":\"1eef225c\",\"details\":\"Tokens may be unlocked once the lock period corresponding to the conviction with which the delegation was issued has elapsed.\"},\"unlock(address)\":{\"custom:selector\":\"2f6c493c\",\"params\":{\"target\":\"The account whose tokens should be unlocked. This may be any account.\"}}},\"title\":\"Pallet Democracy Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"delegate(address,uint256,uint256)\":{\"notice\":\"Delegate voting power to another account.\"},\"depositOf(uint256)\":{\"notice\":\"Get the total amount locked behind a proposal.\"},\"finishedReferendumInfo(uint32)\":{\"notice\":\"Get the details about a finished referendum.\"},\"lowestUnbaked()\":{\"notice\":\"Get the index of the lowest unbaked referendum\"},\"noteImminentPreimage(bytes)\":{\"notice\":\"Register the preimage for an upcoming proposal. This requires the proposal to be in the dispatch queue. No deposit is needed. When this call is successful, i.e. the preimage has not been uploaded before and matches some imminent proposal, no fee is paid.\"},\"notePreimage(bytes)\":{\"notice\":\"Register the preimage for an upcoming proposal. This doesn't require the proposal to be in the dispatch queue but does require a deposit, returned once enacted.\"},\"ongoingReferendumInfo(uint32)\":{\"notice\":\"Get the details about an ongoing referendum.\"},\"propose(bytes32,uint256)\":{\"notice\":\"Make a new proposal\"},\"publicPropCount()\":{\"notice\":\"Get The total number of public proposals past and present\"},\"removeVote(uint256)\":{\"notice\":\"Remove a vote for a referendum.\"},\"second(uint256,uint256)\":{\"notice\":\"Signal agreement with a proposal\"},\"standardVote(uint256,bool,uint256,uint256)\":{\"notice\":\"Vote in a referendum.\"},\"unDelegate()\":{\"notice\":\"Undelegatehe voting power\"},\"unlock(address)\":{\"notice\":\"Unlock tokens that have an expired lock.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"Democracy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0x8a935490a181334d0ecbde461a8d1882a5ec5e45c1f30d280370c12520050514\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://bfea80efb837881a8482eec72065fe5c90df4020fa0f29580761959b3b09f561\",\"dweb:/ipfs/QmSUgNRNYBGozhkGHKxrDuehy9PKiV21ieN1Em7enPsuEf\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": {
      "kind": "user",
      "methods": {
        "delegate(address,uint256,uint256)": {
          "notice": "Delegate voting power to another account."
        },
        "depositOf(uint256)": {
          "notice": "Get the total amount locked behind a proposal."
        },
        "finishedReferendumInfo(uint32)": {
          "notice": "Get the details about a finished referendum."
        },
        "lowestUnbaked()": {
          "notice": "Get the index of the lowest unbaked referendum"
        },
        "noteImminentPreimage(bytes)": {
          "notice": "Register the preimage for an upcoming proposal. This requires the proposal to be in the dispatch queue. No deposit is needed. When this call is successful, i.e. the preimage has not been uploaded before and matches some imminent proposal, no fee is paid."
        },
        "notePreimage(bytes)": {
          "notice": "Register the preimage for an upcoming proposal. This doesn't require the proposal to be in the dispatch queue but does require a deposit, returned once enacted."
        },
        "ongoingReferendumInfo(uint32)": {
          "notice": "Get the details about an ongoing referendum."
        },
        "propose(bytes32,uint256)": { "notice": "Make a new proposal" },
        "publicPropCount()": {
          "notice": "Get The total number of public proposals past and present"
        },
        "removeVote(uint256)": { "notice": "Remove a vote for a referendum." },
        "second(uint256,uint256)": {
          "notice": "Signal agreement with a proposal"
        },
        "standardVote(uint256,bool,uint256,uint256)": {
          "notice": "Vote in a referendum."
        },
        "unDelegate()": { "notice": "Undelegatehe voting power" },
        "unlock(address)": {
          "notice": "Unlock tokens that have an expired lock."
        }
      },
      "version": 1
    }
  },
  "sourceCode": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\n/// @dev The Democracy contract's address.\naddress constant DEMOCRACY_ADDRESS = 0x0000000000000000000000000000000000000803;\n\n/// @dev The Democracy contract's instance.\nDemocracy constant DEMOCRACY_CONTRACT = Democracy(DEMOCRACY_ADDRESS);\n\n/// @author The Moonbeam Team\n/// @title Pallet Democracy Interface\n/// @dev The interface through which solidity contracts will interact with pallet-democracy.\n/// This interface does not exhaustively wrap pallet democracy, rather it wraps the most\n/// important parts and the parts that are expected to be most useful to evm contracts.\n/// More exhaustive wrapping can be added later if it is desireable and the pallet interface\n/// is deemed sufficiently stable.\n/// @custom:address 0x0000000000000000000000000000000000000803\ninterface Democracy {\n    // First some simple accessors\n\n    /// Get The total number of public proposals past and present\n    /// @custom:selector 31305462\n    ///\n    /// @return The total number of public proposals past and present\n    function publicPropCount() external view returns (uint256);\n\n    /// Get details about all public porposals.\n    /// @custom:selector\n    /// @return (prop index, proposal hash, proposer)\n    /// TODO This is supposed to be a vec. Let's save this one for later.\n    // function publicProps()\n    //     external\n    //     view\n    //     returns (\n    //         uint256,\n    //         bytes32,\n    //         address\n    //     );\n\n    /// Get the total amount locked behind a proposal.\n    /// @custom:selector 4767142d\n    ///\n    /// @dev Unlike the similarly-named Rust function this one only returns the value, not the\n    /// complete list of backers.\n    /// @param propIndex The index of the proposal you are interested in\n    /// @return The amount of tokens locked behind the proposal\n    function depositOf(uint256 propIndex) external view returns (uint256);\n\n    /// Get the index of the lowest unbaked referendum\n    /// @custom:selector d49dccf0\n    ///\n    /// @return The lowest referendum index representing an unbaked referendum.\n    function lowestUnbaked() external view returns (uint256);\n\n    /// Get the details about an ongoing referendum.\n    /// @custom:selector f033b7cd\n    ///\n    /// @dev This, along with `finishedReferendumInfo`, wraps the pallet's `referendumInfo`\n    /// function. It is necessary to split it into two here because Solidity only has c-style enums.\n    /// @param refIndex The index of the referendum you are interested in\n    /// @return A tuple including:\n    ///  * The block in which the referendum ended\n    ///  * The proposal hash\n    ///  * The baising mechanism 0-SuperMajorityApprove, 1-SuperMajorityAgainst, 2-SimpleMajority\n    ///  * The delay between passing and launching\n    ///  * The total aye vote (including conviction)\n    ///  * The total nay vote (including conviction)\n    ///  * The total turnout (not including conviction)\n    function ongoingReferendumInfo(uint32 refIndex)\n        external\n        view\n        returns (\n            uint256,\n            bytes32,\n            uint8,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /// Get the details about a finished referendum.\n    /// @custom:selector c75abcce\n    ///\n    /// @dev This, along with `ongoingReferendumInfo`, wraps the pallet's `referendumInfo`\n    /// function. It is necessary to split it into two here because Solidity only has c-style enums.\n    /// @param refIndex The index of the referendum you are interested in\n    /// @return A tuple including whether the referendum passed, and the block at which it finished.\n    function finishedReferendumInfo(uint32 refIndex)\n        external\n        view\n        returns (bool, uint256);\n\n    // Now the dispatchables\n\n    /// Make a new proposal\n    /// @custom:selector 7824e7d1\n    ///\n    /// @param proposalHash The hash of the proposal you are making\n    /// @param value The number of tokens to be locked behind this proposal.\n    function propose(bytes32 proposalHash, uint256 value) external;\n\n    /// Signal agreement with a proposal\n    /// @custom:selector c7a76601\n    ///\n    /// @dev No amount is necessary here. Seconds are always for the same amount that the original\n    /// proposer locked. You may second multiple times.\n    ///\n    /// @param propIndex index of the proposal you want to second\n    /// @param secondsUpperBound A number greater than or equal to the current number of seconds.\n    /// This is necessary for calculating the weight of the call.\n    function second(uint256 propIndex, uint256 secondsUpperBound) external;\n\n    //TODO should we have an alternative `simpleSecond` where the upper bound is read from storage?\n\n    /// Vote in a referendum.\n    /// @custom:selector 6cd18b0d\n    ///\n    /// @param refIndex index of the referendum you want to vote in\n    /// @param aye `true` is a vote to enact the proposal; `false` is a vote to keep the status quo.\n    /// @param voteAmount The number of tokens you are willing to lock if you get your way\n    /// @param conviction How strongly you want to vote. Higher conviction means longer lock time.\n    /// This must be an interget in the range 0 to 6\n    ///\n    /// @dev This function only supposrts `Standard` votes where you either vote aye xor nay.\n    /// It does not support `Split` votes where you vote on both sides. If such a need\n    /// arises, we should add an additional function to this interface called `splitVote`.\n    function standardVote(\n        uint256 refIndex,\n        bool aye,\n        uint256 voteAmount,\n        uint256 conviction\n    ) external;\n\n    /// Remove a vote for a referendum.\n    /// @custom:selector 3f68fde4\n    ///\n    /// @dev Locks get complex when votes are removed. See pallet-democracy's docs for details.\n    /// @param refIndex The index of the referendum you are interested in\n    function removeVote(uint256 refIndex) external;\n\n    /// Delegate voting power to another account.\n    /// @custom:selector 0185921e\n    ///\n    /// @dev The balance delegated is locked for as long as it is delegated, and thereafter for the\n    /// time appropriate for the conviction's lock period.\n    /// @param representative The account to whom the vote shall be delegated.\n    /// @param conviction The conviction with which you are delegating. This conviction is used for\n    /// All_ delegated votes.\n    /// @param amount The number of tokens whose voting power shall be delegated.\n    function delegate(\n        address representative,\n        uint256 conviction,\n        uint256 amount\n    ) external;\n\n    /// Undelegatehe voting power\n    /// @custom:selector 1eef225c\n    ///\n    /// @dev Tokens may be unlocked once the lock period corresponding to the conviction with which\n    /// the delegation was issued has elapsed.\n    function unDelegate() external;\n\n    /// Unlock tokens that have an expired lock.\n    /// @custom:selector 2f6c493c\n    ///\n    /// @param target The account whose tokens should be unlocked. This may be any account.\n    function unlock(address target) external;\n\n    /// Register the preimage for an upcoming proposal. This doesn't require the proposal to be\n    /// in the dispatch queue but does require a deposit, returned once enacted.\n    /// @custom:selector cb00f603\n    ///\n    /// @param encodedProposal The scale-encoded proposal whose hash has been submitted on-chain.\n    function notePreimage(bytes memory encodedProposal) external;\n\n    /// Register the preimage for an upcoming proposal. This requires the proposal to be\n    /// in the dispatch queue. No deposit is needed. When this call is successful, i.e.\n    /// the preimage has not been uploaded before and matches some imminent proposal,\n    /// no fee is paid.\n    /// @custom:selector 974791e3\n    ///\n    /// @param encodedProposal The scale-encoded proposal whose hash has been submitted on-chain.\n    function noteImminentPreimage(bytes memory encodedProposal) external;\n\n    /// @dev A motion has been proposed by a public account.\n    /// @custom:selector d89e173ca5c9fd0ec38f2b01995c4f1748210f686fa189a6b8d189c210444924\n    /// @param proposalIndex uint32 Index of the proposal.\n    /// @param deposit uint256 Amount of tokens deposited.\n    event Proposed(uint32 indexed proposalIndex, uint256 deposit);\n\n    /// @dev An account has seconded a proposal.\n    /// @custom:selector e1613d7e3f54885ef3ffdb714435193b9b80818bd3381f108a4d4b21e842654a\n    /// @param proposalIndex uint32 Index of the proposal.\n    /// @param seconder address Address of the seconder.\n    event Seconded(uint32 indexed proposalIndex, address seconder);\n\n    /// @dev An account made a standard vote.\n    /// @custom:selector 057363260bf880d3658601ecff97e75b67a22f38b7066c0e47e2d170477579c3\n    /// @param referendumIndex uint32 Index of the referendum.\n    /// @param voter address Address of the voter.\n    /// @param aye bool Is it a vote for or against the referendum.\n    /// @param voteAmount uint256 Amount used to vote.\n    /// @param conviction uint8 Conviction of the vote.\n    event StandardVote(\n        uint32 indexed referendumIndex,\n        address voter,\n        bool aye,\n        uint256 voteAmount,\n        uint8 conviction\n    );\n\n    /// @dev An account delegated some voting power to another account\n    /// @custom:selector 4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea2\n    /// @param who address Address of the delegator.\n    /// @param target address Address of the delegatee.\n    event Delegated(address indexed who, address target);\n\n    /// @dev An account undelegated.\n    /// @custom:selector 42176493fdfcada70cc1bcf321c9a2314e9571a9fe53c54a5385a1eeac8bc1d7\n    /// @param who address Address of the delegator.\n    event Undelegated(address indexed who);\n}\n"
}
