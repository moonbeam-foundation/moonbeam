{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "previousAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "beacon",
            "type": "address"
          }
        ],
        "name": "BeaconUpgraded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "implementation",
            "type": "address"
          }
        ],
        "name": "Upgraded",
        "type": "event"
      }
    ],
    "devdoc": {
      "custom:oz-upgrades-unsafe-allow": "delegatecall",
      "details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._",
      "events": {
        "AdminChanged(address,address)": {
          "details": "Emitted when the admin account has changed."
        },
        "BeaconUpgraded(address)": {
          "details": "Emitted when the beacon is upgraded."
        },
        "Upgraded(address)": {
          "details": "Emitted when the implementation is upgraded."
        }
      },
      "kind": "dev",
      "methods": {},
      "stateVariables": {
        "_ADMIN_SLOT": {
          "details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
        },
        "_BEACON_SLOT": {
          "details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
        },
        "_IMPLEMENTATION_SLOT": {
          "details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."
        }
      },
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {}
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0x2959208c45a08c76960ff3a7f53280b5ab92450166e0ab69ec4c90fd36566710\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://3cd79641f2184ce85d388f587e0ecca81190c6caa895471c5001a72eeb6326e9\",\"dweb:/ipfs/Qma5DCRzRDZ2tV97dX56UgugdtTxPg9sUrVnPX5Ljh1eyD\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "sourceCode": "/**\n *Submitted for verification at moonbase.moonscan.io on 2023-03-15\n */\n\n// SPDX-License-Identifier: Apache 2\n// File: contracts/Structs.sol\n\n// contracts/Structs.sol\n\npragma solidity ^0.8.0;\n\ninterface Structs {\n    struct Provider {\n        uint16 chainId;\n        uint16 governanceChainId;\n        bytes32 governanceContract;\n    }\n\n    struct GuardianSet {\n        address[] keys;\n        uint32 expirationTime;\n    }\n\n    struct Signature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint8 guardianIndex;\n    }\n\n    struct VM {\n        uint8 version;\n        uint32 timestamp;\n        uint32 nonce;\n        uint16 emitterChainId;\n        bytes32 emitterAddress;\n        uint64 sequence;\n        uint8 consistencyLevel;\n        bytes payload;\n        uint32 guardianSetIndex;\n        Signature[] signatures;\n        bytes32 hash;\n    }\n}\n\n// File: contracts/libraries/external/BytesLib.sol\n\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    ) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    ) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(\n                    add(tempBytes, lengthmod),\n                    mul(0x20, iszero(lengthmod))\n                )\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(\n                        add(\n                            add(_bytes, lengthmod),\n                            mul(0x20, iszero(lengthmod))\n                        ),\n                        _start\n                    )\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(\n                mload(add(add(_bytes, 0x20), _start)),\n                0x1000000000000000000000000\n            )\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    ) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    ) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n\n// File: contracts/GovernanceStructs.sol\n\n// contracts/GovernanceStructs.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev `GovernanceStructs` defines a set of structs and parsing functions\n * for minimal struct validation\n */\ncontract GovernanceStructs {\n    using BytesLib for bytes;\n\n    enum GovernanceAction {\n        UpgradeContract,\n        UpgradeGuardianset\n    }\n\n    struct ContractUpgrade {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n        address newContract;\n    }\n\n    struct GuardianSetUpgrade {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n        Structs.GuardianSet newGuardianSet;\n        uint32 newGuardianSetIndex;\n    }\n\n    struct SetMessageFee {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n        uint256 messageFee;\n    }\n\n    struct TransferFees {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n        uint256 amount;\n        bytes32 recipient;\n    }\n\n    struct RecoverChainId {\n        bytes32 module;\n        uint8 action;\n        uint256 evmChainId;\n        uint16 newChainId;\n    }\n\n    /// @dev Parse a contract upgrade (action 1) with minimal validation\n    function parseContractUpgrade(\n        bytes memory encodedUpgrade\n    ) public pure returns (ContractUpgrade memory cu) {\n        uint index = 0;\n\n        cu.module = encodedUpgrade.toBytes32(index);\n        index += 32;\n\n        cu.action = encodedUpgrade.toUint8(index);\n        index += 1;\n\n        require(cu.action == 1, \"invalid ContractUpgrade\");\n\n        cu.chain = encodedUpgrade.toUint16(index);\n        index += 2;\n\n        cu.newContract = address(\n            uint160(uint256(encodedUpgrade.toBytes32(index)))\n        );\n        index += 32;\n\n        require(encodedUpgrade.length == index, \"invalid ContractUpgrade\");\n    }\n\n    /// @dev Parse a guardianSet upgrade (action 2) with minimal validation\n    function parseGuardianSetUpgrade(\n        bytes memory encodedUpgrade\n    ) public pure returns (GuardianSetUpgrade memory gsu) {\n        uint index = 0;\n\n        gsu.module = encodedUpgrade.toBytes32(index);\n        index += 32;\n\n        gsu.action = encodedUpgrade.toUint8(index);\n        index += 1;\n\n        require(gsu.action == 2, \"invalid GuardianSetUpgrade\");\n\n        gsu.chain = encodedUpgrade.toUint16(index);\n        index += 2;\n\n        gsu.newGuardianSetIndex = encodedUpgrade.toUint32(index);\n        index += 4;\n\n        uint8 guardianLength = encodedUpgrade.toUint8(index);\n        index += 1;\n\n        gsu.newGuardianSet = Structs.GuardianSet({\n            keys: new address[](guardianLength),\n            expirationTime: 0\n        });\n\n        for (uint i = 0; i < guardianLength; i++) {\n            gsu.newGuardianSet.keys[i] = encodedUpgrade.toAddress(index);\n            index += 20;\n        }\n\n        require(encodedUpgrade.length == index, \"invalid GuardianSetUpgrade\");\n    }\n\n    /// @dev Parse a setMessageFee (action 3) with minimal validation\n    function parseSetMessageFee(\n        bytes memory encodedSetMessageFee\n    ) public pure returns (SetMessageFee memory smf) {\n        uint index = 0;\n\n        smf.module = encodedSetMessageFee.toBytes32(index);\n        index += 32;\n\n        smf.action = encodedSetMessageFee.toUint8(index);\n        index += 1;\n\n        require(smf.action == 3, \"invalid SetMessageFee\");\n\n        smf.chain = encodedSetMessageFee.toUint16(index);\n        index += 2;\n\n        smf.messageFee = encodedSetMessageFee.toUint256(index);\n        index += 32;\n\n        require(encodedSetMessageFee.length == index, \"invalid SetMessageFee\");\n    }\n\n    /// @dev Parse a transferFees (action 4) with minimal validation\n    function parseTransferFees(\n        bytes memory encodedTransferFees\n    ) public pure returns (TransferFees memory tf) {\n        uint index = 0;\n\n        tf.module = encodedTransferFees.toBytes32(index);\n        index += 32;\n\n        tf.action = encodedTransferFees.toUint8(index);\n        index += 1;\n\n        require(tf.action == 4, \"invalid TransferFees\");\n\n        tf.chain = encodedTransferFees.toUint16(index);\n        index += 2;\n\n        tf.amount = encodedTransferFees.toUint256(index);\n        index += 32;\n\n        tf.recipient = encodedTransferFees.toBytes32(index);\n        index += 32;\n\n        require(encodedTransferFees.length == index, \"invalid TransferFees\");\n    }\n\n    /// @dev Parse a recoverChainId (action 5) with minimal validation\n    function parseRecoverChainId(\n        bytes memory encodedRecoverChainId\n    ) public pure returns (RecoverChainId memory rci) {\n        uint index = 0;\n\n        rci.module = encodedRecoverChainId.toBytes32(index);\n        index += 32;\n\n        rci.action = encodedRecoverChainId.toUint8(index);\n        index += 1;\n\n        require(rci.action == 5, \"invalid RecoverChainId\");\n\n        rci.evmChainId = encodedRecoverChainId.toUint256(index);\n        index += 32;\n\n        rci.newChainId = encodedRecoverChainId.toUint16(index);\n        index += 2;\n\n        require(\n            encodedRecoverChainId.length == index,\n            \"invalid RecoverChainId\"\n        );\n    }\n}\n\n// File: contracts/State.sol\n\n// contracts/State.sol\n\npragma solidity ^0.8.0;\n\ncontract Events {\n    event LogGuardianSetChanged(\n        uint32 oldGuardianIndex,\n        uint32 newGuardianIndex\n    );\n\n    event LogMessagePublished(\n        address emitter_address,\n        uint32 nonce,\n        bytes payload\n    );\n}\n\ncontract Storage {\n    struct WormholeState {\n        Structs.Provider provider;\n        // Mapping of guardian_set_index => guardian set\n        mapping(uint32 => Structs.GuardianSet) guardianSets;\n        // Current active guardian set index\n        uint32 guardianSetIndex;\n        // Period for which a guardian set stays active after it has been replaced\n        uint32 guardianSetExpiry;\n        // Sequence numbers per emitter\n        mapping(address => uint64) sequences;\n        // Mapping of consumed governance actions\n        mapping(bytes32 => bool) consumedGovernanceActions;\n        // Mapping of initialized implementations\n        mapping(address => bool) initializedImplementations;\n        uint256 messageFee;\n        // EIP-155 Chain ID\n        uint256 evmChainId;\n    }\n}\n\ncontract State {\n    Storage.WormholeState _state;\n}\n\n// File: contracts/Getters.sol\n\n// contracts/Getters.sol\n\npragma solidity ^0.8.0;\n\ncontract Getters is State {\n    function getGuardianSet(\n        uint32 index\n    ) public view returns (Structs.GuardianSet memory) {\n        return _state.guardianSets[index];\n    }\n\n    function getCurrentGuardianSetIndex() public view returns (uint32) {\n        return _state.guardianSetIndex;\n    }\n\n    function getGuardianSetExpiry() public view returns (uint32) {\n        return _state.guardianSetExpiry;\n    }\n\n    function governanceActionIsConsumed(\n        bytes32 hash\n    ) public view returns (bool) {\n        return _state.consumedGovernanceActions[hash];\n    }\n\n    function isInitialized(address impl) public view returns (bool) {\n        return _state.initializedImplementations[impl];\n    }\n\n    function chainId() public view returns (uint16) {\n        return _state.provider.chainId;\n    }\n\n    function evmChainId() public view returns (uint256) {\n        return _state.evmChainId;\n    }\n\n    function isFork() public view returns (bool) {\n        return evmChainId() != block.chainid;\n    }\n\n    function governanceChainId() public view returns (uint16) {\n        return _state.provider.governanceChainId;\n    }\n\n    function governanceContract() public view returns (bytes32) {\n        return _state.provider.governanceContract;\n    }\n\n    function messageFee() public view returns (uint256) {\n        return _state.messageFee;\n    }\n\n    function nextSequence(address emitter) public view returns (uint64) {\n        return _state.sequences[emitter];\n    }\n}\n\n// File: contracts/Messages.sol\n\n// contracts/Messages.sol\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\ncontract Messages is Getters {\n    using BytesLib for bytes;\n\n    /// @dev parseAndVerifyVM serves to parse an encodedVM and wholy validate it for consumption\n    function parseAndVerifyVM(\n        bytes calldata encodedVM\n    )\n        public\n        view\n        returns (Structs.VM memory vm, bool valid, string memory reason)\n    {\n        vm = parseVM(encodedVM);\n        /// setting checkHash to false as we can trust the hash field in this case given that parseVM computes and then sets the hash field above\n        (valid, reason) = verifyVMInternal(vm, false);\n    }\n\n    /**\n     * @dev `verifyVM` serves to validate an arbitrary vm against a valid Guardian set\n     *  - it aims to make sure the VM is for a known guardianSet\n     *  - it aims to ensure the guardianSet is not expired\n     *  - it aims to ensure the VM has reached quorum\n     *  - it aims to verify the signatures provided against the guardianSet\n     *  - it aims to verify the hash field provided against the contents of the vm\n     */\n    function verifyVM(\n        Structs.VM memory vm\n    ) public view returns (bool valid, string memory reason) {\n        (valid, reason) = verifyVMInternal(vm, true);\n    }\n\n    /**\n     * @dev `verifyVMInternal` serves to validate an arbitrary vm against a valid Guardian set\n     * if checkHash is set then the hash field of the vm is verified against the hash of its contents\n     * in the case that the vm is securely parsed and the hash field can be trusted, checkHash can be set to false\n     * as the check would be redundant\n     */\n    function verifyVMInternal(\n        Structs.VM memory vm,\n        bool checkHash\n    ) internal view returns (bool valid, string memory reason) {\n        /// @dev Obtain the current guardianSet for the guardianSetIndex provided\n        Structs.GuardianSet memory guardianSet = getGuardianSet(\n            vm.guardianSetIndex\n        );\n\n        /**\n         * Verify that the hash field in the vm matches with the hash of the contents of the vm if checkHash is set\n         * WARNING: This hash check is critical to ensure that the vm.hash provided matches with the hash of the body.\n         * Without this check, it would not be safe to call verifyVM on it's own as vm.hash can be a valid signed hash\n         * but the body of the vm could be completely different from what was actually signed by the guardians\n         */\n        if (checkHash) {\n            bytes memory body = abi.encodePacked(\n                vm.timestamp,\n                vm.nonce,\n                vm.emitterChainId,\n                vm.emitterAddress,\n                vm.sequence,\n                vm.consistencyLevel,\n                vm.payload\n            );\n\n            bytes32 vmHash = keccak256(abi.encodePacked(keccak256(body)));\n\n            if (vmHash != vm.hash) {\n                return (false, \"vm.hash doesn't match body\");\n            }\n        }\n\n        /**\n         * @dev Checks whether the guardianSet has zero keys\n         * WARNING: This keys check is critical to ensure the guardianSet has keys present AND to ensure\n         * that guardianSet key size doesn't fall to zero and negatively impact quorum assessment.  If guardianSet\n         * key length is 0 and vm.signatures length is 0, this could compromise the integrity of both vm and\n         * signature verification.\n         */\n        if (guardianSet.keys.length == 0) {\n            return (false, \"invalid guardian set\");\n        }\n\n        /// @dev Checks if VM guardian set index matches the current index (unless the current set is expired).\n        if (\n            vm.guardianSetIndex != getCurrentGuardianSetIndex() &&\n            guardianSet.expirationTime < block.timestamp\n        ) {\n            return (false, \"guardian set has expired\");\n        }\n\n        /**\n         * @dev We're using a fixed point number transformation with 1 decimal to deal with rounding.\n         *   WARNING: This quorum check is critical to assessing whether we have enough Guardian signatures to validate a VM\n         *   if making any changes to this, obtain additional peer review. If guardianSet key length is 0 and\n         *   vm.signatures length is 0, this could compromise the integrity of both vm and signature verification.\n         */\n        if (vm.signatures.length < quorum(guardianSet.keys.length)) {\n            return (false, \"no quorum\");\n        }\n\n        /// @dev Verify the proposed vm.signatures against the guardianSet\n        (bool signaturesValid, string memory invalidReason) = verifySignatures(\n            vm.hash,\n            vm.signatures,\n            guardianSet\n        );\n        if (!signaturesValid) {\n            return (false, invalidReason);\n        }\n\n        /// If we are here, we've validated the VM is a valid multi-sig that matches the guardianSet.\n        return (true, \"\");\n    }\n\n    /**\n     * @dev verifySignatures serves to validate arbitrary sigatures against an arbitrary guardianSet\n     *  - it intentionally does not solve for expectations within guardianSet (you should use verifyVM if you need these protections)\n     *  - it intentioanlly does not solve for quorum (you should use verifyVM if you need these protections)\n     *  - it intentionally returns true when signatures is an empty set (you should use verifyVM if you need these protections)\n     */\n    function verifySignatures(\n        bytes32 hash,\n        Structs.Signature[] memory signatures,\n        Structs.GuardianSet memory guardianSet\n    ) public pure returns (bool valid, string memory reason) {\n        uint8 lastIndex = 0;\n        uint256 guardianCount = guardianSet.keys.length;\n        for (uint i = 0; i < signatures.length; i++) {\n            Structs.Signature memory sig = signatures[i];\n            address signatory = ecrecover(hash, sig.v, sig.r, sig.s);\n            // ecrecover returns 0 for invalid signatures. We explicitly require valid signatures to avoid unexpected\n            // behaviour due to the default storage slot value also being 0.\n            require(signatory != address(0), \"ecrecover failed with signature\");\n\n            /// Ensure that provided signature indices are ascending only\n            require(\n                i == 0 || sig.guardianIndex > lastIndex,\n                \"signature indices must be ascending\"\n            );\n            lastIndex = sig.guardianIndex;\n\n            /// @dev Ensure that the provided signature index is within the\n            /// bounds of the guardianSet. This is implicitly checked by the array\n            /// index operation below, so this check is technically redundant.\n            /// However, reverting explicitly here ensures that a bug is not\n            /// introduced accidentally later due to the nontrivial storage\n            /// semantics of solidity.\n            require(\n                sig.guardianIndex < guardianCount,\n                \"guardian index out of bounds\"\n            );\n\n            /// Check to see if the signer of the signature does not match a specific Guardian key at the provided index\n            if (signatory != guardianSet.keys[sig.guardianIndex]) {\n                return (false, \"VM signature invalid\");\n            }\n        }\n\n        /// If we are here, we've validated that the provided signatures are valid for the provided guardianSet\n        return (true, \"\");\n    }\n\n    /**\n     * @dev parseVM serves to parse an encodedVM into a vm struct\n     *  - it intentionally performs no validation functions, it simply parses raw into a struct\n     */\n    function parseVM(\n        bytes memory encodedVM\n    ) public pure virtual returns (Structs.VM memory vm) {\n        uint index = 0;\n\n        vm.version = encodedVM.toUint8(index);\n        index += 1;\n        // SECURITY: Note that currently the VM.version is not part of the hash\n        // and for reasons described below it cannot be made part of the hash.\n        // This means that this field's integrity is not protected and cannot be trusted.\n        // This is not a problem today since there is only one accepted version, but it\n        // could be a problem if we wanted to allow other versions in the future.\n        require(vm.version == 1, \"VM version incompatible\");\n\n        vm.guardianSetIndex = encodedVM.toUint32(index);\n        index += 4;\n\n        // Parse Signatures\n        uint256 signersLen = encodedVM.toUint8(index);\n        index += 1;\n        vm.signatures = new Structs.Signature[](signersLen);\n        for (uint i = 0; i < signersLen; i++) {\n            vm.signatures[i].guardianIndex = encodedVM.toUint8(index);\n            index += 1;\n\n            vm.signatures[i].r = encodedVM.toBytes32(index);\n            index += 32;\n            vm.signatures[i].s = encodedVM.toBytes32(index);\n            index += 32;\n            vm.signatures[i].v = encodedVM.toUint8(index) + 27;\n            index += 1;\n        }\n\n        /*\n        Hash the body\n\n        SECURITY: Do not change the way the hash of a VM is computed! \n        Changing it could result into two different hashes for the same observation. \n        But xDapps rely on the hash of an observation for replay protection.\n        */\n        bytes memory body = encodedVM.slice(index, encodedVM.length - index);\n        vm.hash = keccak256(abi.encodePacked(keccak256(body)));\n\n        // Parse the body\n        vm.timestamp = encodedVM.toUint32(index);\n        index += 4;\n\n        vm.nonce = encodedVM.toUint32(index);\n        index += 4;\n\n        vm.emitterChainId = encodedVM.toUint16(index);\n        index += 2;\n\n        vm.emitterAddress = encodedVM.toBytes32(index);\n        index += 32;\n\n        vm.sequence = encodedVM.toUint64(index);\n        index += 8;\n\n        vm.consistencyLevel = encodedVM.toUint8(index);\n        index += 1;\n\n        vm.payload = encodedVM.slice(index, encodedVM.length - index);\n    }\n\n    /**\n     * @dev quorum serves solely to determine the number of signatures required to acheive quorum\n     */\n    function quorum(\n        uint numGuardians\n    ) public pure virtual returns (uint numSignaturesRequiredForQuorum) {\n        // The max number of guardians is 255\n        require(numGuardians < 256, \"too many guardians\");\n        return ((numGuardians * 2) / 3) + 1;\n    }\n}\n\n// File: contracts/Setters.sol\n\n// contracts/Setters.sol\n\npragma solidity ^0.8.0;\n\ncontract Setters is State {\n    function updateGuardianSetIndex(uint32 newIndex) internal {\n        _state.guardianSetIndex = newIndex;\n    }\n\n    function expireGuardianSet(uint32 index) internal {\n        _state.guardianSets[index].expirationTime =\n            uint32(block.timestamp) +\n            86400;\n    }\n\n    function storeGuardianSet(\n        Structs.GuardianSet memory set,\n        uint32 index\n    ) internal {\n        uint setLength = set.keys.length;\n        for (uint i = 0; i < setLength; i++) {\n            require(set.keys[i] != address(0), \"Invalid key\");\n        }\n        _state.guardianSets[index] = set;\n    }\n\n    function setInitialized(address implementatiom) internal {\n        _state.initializedImplementations[implementatiom] = true;\n    }\n\n    function setGovernanceActionConsumed(bytes32 hash) internal {\n        _state.consumedGovernanceActions[hash] = true;\n    }\n\n    function setChainId(uint16 chainId) internal {\n        _state.provider.chainId = chainId;\n    }\n\n    function setGovernanceChainId(uint16 chainId) internal {\n        _state.provider.governanceChainId = chainId;\n    }\n\n    function setGovernanceContract(bytes32 governanceContract) internal {\n        _state.provider.governanceContract = governanceContract;\n    }\n\n    function setMessageFee(uint256 newFee) internal {\n        _state.messageFee = newFee;\n    }\n\n    function setNextSequence(address emitter, uint64 sequence) internal {\n        _state.sequences[emitter] = sequence;\n    }\n\n    function setEvmChainId(uint256 evmChainId) internal {\n        require(evmChainId == block.chainid, \"invalid evmChainId\");\n        _state.evmChainId = evmChainId;\n    }\n}\n\n// File: @openzeppelin/contracts/proxy/beacon/IBeacon.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data\n    ) internal view returns (bytes memory) {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/StorageSlot.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(\n        bytes32 slot\n    ) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(\n        bytes32 slot\n    ) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(\n        bytes32 slot\n    ) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(\n        bytes32 slot\n    ) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\n\npragma solidity ^0.8.2;\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT =\n        0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(\n            Address.isContract(newImplementation),\n            \"ERC1967: new implementation is not a contract\"\n        );\n        StorageSlot\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\n            .value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot\n            .getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(\n                oldImplementation == _getImplementation(),\n                \"ERC1967Upgrade: upgrade breaks further upgrades\"\n            );\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT =\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(\n            newAdmin != address(0),\n            \"ERC1967: new admin is the zero address\"\n        );\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT =\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(\n            Address.isContract(newBeacon),\n            \"ERC1967: new beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(\n                IBeacon(newBeacon).implementation(),\n                data\n            );\n        }\n    }\n}\n\n// File: contracts/Governance.sol\n\n// contracts/Governance.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev `Governance` defines a means to enacting changes to the core bridge contract,\n * guardianSets, message fees, and transfer fees\n */\nabstract contract Governance is\n    GovernanceStructs,\n    Messages,\n    Setters,\n    ERC1967Upgrade\n{\n    event ContractUpgraded(\n        address indexed oldContract,\n        address indexed newContract\n    );\n    event GuardianSetAdded(uint32 indexed index);\n\n    // \"Core\" (left padded)\n    bytes32 constant module =\n        0x00000000000000000000000000000000000000000000000000000000436f7265;\n\n    /**\n     * @dev Upgrades a contract via Governance VAA/VM\n     */\n    function submitContractUpgrade(bytes memory _vm) public {\n        require(!isFork(), \"invalid fork\");\n\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        GovernanceStructs.ContractUpgrade memory upgrade = parseContractUpgrade(\n            vm.payload\n        );\n\n        // Verify the VAA is for this module\n        require(upgrade.module == module, \"Invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(upgrade.chain == chainId(), \"Invalid Chain\");\n\n        // Record the governance action as consumed\n        setGovernanceActionConsumed(vm.hash);\n\n        // Upgrades the implementation to the new contract\n        upgradeImplementation(upgrade.newContract);\n    }\n\n    /**\n     * @dev Sets a `messageFee` via Governance VAA/VM\n     */\n    function submitSetMessageFee(bytes memory _vm) public {\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        GovernanceStructs.SetMessageFee memory upgrade = parseSetMessageFee(\n            vm.payload\n        );\n\n        // Verify the VAA is for this module\n        require(upgrade.module == module, \"Invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(upgrade.chain == chainId() && !isFork(), \"Invalid Chain\");\n\n        // Record the governance action as consumed to prevent reentry\n        setGovernanceActionConsumed(vm.hash);\n\n        // Updates the messageFee\n        setMessageFee(upgrade.messageFee);\n    }\n\n    /**\n     * @dev Deploys a new `guardianSet` via Governance VAA/VM\n     */\n    function submitNewGuardianSet(bytes memory _vm) public {\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        GovernanceStructs.GuardianSetUpgrade\n            memory upgrade = parseGuardianSetUpgrade(vm.payload);\n\n        // Verify the VAA is for this module\n        require(upgrade.module == module, \"invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(\n            (upgrade.chain == chainId() && !isFork()) || upgrade.chain == 0,\n            \"invalid Chain\"\n        );\n\n        // Verify the Guardian Set keys are not empty, this guards\n        // against the accidential upgrade to an empty GuardianSet\n        require(\n            upgrade.newGuardianSet.keys.length > 0,\n            \"new guardian set is empty\"\n        );\n\n        // Verify that the index is incrementing via a predictable +1 pattern\n        require(\n            upgrade.newGuardianSetIndex == getCurrentGuardianSetIndex() + 1,\n            \"index must increase in steps of 1\"\n        );\n\n        // Record the governance action as consumed to prevent reentry\n        setGovernanceActionConsumed(vm.hash);\n\n        // Trigger a time-based expiry of current guardianSet\n        expireGuardianSet(getCurrentGuardianSetIndex());\n\n        // Add the new guardianSet to guardianSets\n        storeGuardianSet(upgrade.newGuardianSet, upgrade.newGuardianSetIndex);\n\n        // Makes the new guardianSet effective\n        updateGuardianSetIndex(upgrade.newGuardianSetIndex);\n    }\n\n    /**\n     * @dev Submits transfer fees to the recipient via Governance VAA/VM\n     */\n    function submitTransferFees(bytes memory _vm) public {\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        // Obtains the transfer from the VAA payload\n        GovernanceStructs.TransferFees memory transfer = parseTransferFees(\n            vm.payload\n        );\n\n        // Verify the VAA is for this module\n        require(transfer.module == module, \"invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(\n            (transfer.chain == chainId() && !isFork()) || transfer.chain == 0,\n            \"invalid Chain\"\n        );\n\n        // Record the governance action as consumed to prevent reentry\n        setGovernanceActionConsumed(vm.hash);\n\n        // Obtains the recipient address to be paid transfer fees\n        address payable recipient = payable(\n            address(uint160(uint256(transfer.recipient)))\n        );\n\n        // Transfers transfer fees to the recipient\n        recipient.transfer(transfer.amount);\n    }\n\n    /**\n     * @dev Updates the `chainId` and `evmChainId` on a forked chain via Governance VAA/VM\n     */\n    function submitRecoverChainId(bytes memory _vm) public {\n        require(isFork(), \"not a fork\");\n\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        GovernanceStructs.RecoverChainId memory rci = parseRecoverChainId(\n            vm.payload\n        );\n\n        // Verify the VAA is for this module\n        require(rci.module == module, \"invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(rci.evmChainId == block.chainid, \"invalid EVM Chain\");\n\n        // Record the governance action as consumed to prevent reentry\n        setGovernanceActionConsumed(vm.hash);\n\n        // Update the chainIds\n        setEvmChainId(rci.evmChainId);\n        setChainId(rci.newChainId);\n    }\n\n    /**\n     * @dev Upgrades the `currentImplementation` with a `newImplementation`\n     */\n    function upgradeImplementation(address newImplementation) internal {\n        address currentImplementation = _getImplementation();\n\n        _upgradeTo(newImplementation);\n\n        // Call initialize function of the new implementation\n        (bool success, bytes memory reason) = newImplementation.delegatecall(\n            abi.encodeWithSignature(\"initialize()\")\n        );\n\n        require(success, string(reason));\n\n        emit ContractUpgraded(currentImplementation, newImplementation);\n    }\n\n    /**\n     * @dev Verifies a Governance VAA/VM is valid\n     */\n    function verifyGovernanceVM(\n        Structs.VM memory vm\n    ) internal view returns (bool, string memory) {\n        // Verify the VAA is valid\n        (bool isValid, string memory reason) = verifyVM(vm);\n        if (!isValid) {\n            return (false, reason);\n        }\n\n        // only current guardianset can sign governance packets\n        if (vm.guardianSetIndex != getCurrentGuardianSetIndex()) {\n            return (false, \"not signed by current guardian set\");\n        }\n\n        // Verify the VAA is from the governance chain (Solana)\n        if (uint16(vm.emitterChainId) != governanceChainId()) {\n            return (false, \"wrong governance chain\");\n        }\n\n        // Verify the emitter contract is the governance contract (0x4 left padded)\n        if (vm.emitterAddress != governanceContract()) {\n            return (false, \"wrong governance contract\");\n        }\n\n        // Verify this governance action hasn't already been\n        // consumed to prevent reentry and replay\n        if (governanceActionIsConsumed(vm.hash)) {\n            return (false, \"governance action already consumed\");\n        }\n\n        // Confirm the governance VAA/VM is valid\n        return (true, \"\");\n    }\n}\n\n// File: contracts/Implementation.sol\n\n// contracts/Implementation.sol\n\npragma solidity ^0.8.0;\n\ncontract WormholeImplementation is Governance {\n    event LogMessagePublished(\n        address indexed sender,\n        uint64 sequence,\n        uint32 nonce,\n        bytes payload,\n        uint8 consistencyLevel\n    );\n\n    // Publish a message to be attested by the Wormhole network\n    function publishMessage(\n        uint32 nonce,\n        bytes memory payload,\n        uint8 consistencyLevel\n    ) public payable returns (uint64 sequence) {\n        // check fee\n        require(msg.value == messageFee(), \"invalid fee\");\n\n        sequence = useSequence(msg.sender);\n        // emit log\n        emit LogMessagePublished(\n            msg.sender,\n            sequence,\n            nonce,\n            payload,\n            consistencyLevel\n        );\n    }\n\n    function useSequence(address emitter) internal returns (uint64 sequence) {\n        sequence = nextSequence(emitter);\n        setNextSequence(emitter, sequence + 1);\n    }\n\n    function setup(\n        uint16 chainId,\n        uint16 governanceChainId,\n        bytes32 governanceContract,\n        Structs.GuardianSet memory guardianSet\n    ) public {\n        setChainId(chainId);\n        setGovernanceChainId(governanceChainId);\n        setGovernanceContract(governanceContract);\n        storeGuardianSet(guardianSet, 0);\n    }\n\n    function initialize() public virtual initializer {\n        // this function needs to be exposed for an upgrade to pass\n        if (evmChainId() == 0) {\n            uint256 evmChainId;\n            uint16 chain = chainId();\n\n            // Wormhole chain ids explicitly enumerated\n            if (chain == 2) {\n                evmChainId = 1; // ethereum\n            } else if (chain == 4) {\n                evmChainId = 56; // bsc\n            } else if (chain == 5) {\n                evmChainId = 137; // polygon\n            } else if (chain == 6) {\n                evmChainId = 43114; // avalanche\n            } else if (chain == 7) {\n                evmChainId = 42262; // oasis\n            } else if (chain == 9) {\n                evmChainId = 1313161554; // aurora\n            } else if (chain == 10) {\n                evmChainId = 250; // fantom\n            } else if (chain == 11) {\n                evmChainId = 686; // karura\n            } else if (chain == 12) {\n                evmChainId = 787; // acala\n            } else if (chain == 13) {\n                evmChainId = 8217; // klaytn\n            } else if (chain == 14) {\n                evmChainId = 42220; // celo\n            } else if (chain == 16) {\n                evmChainId = 1287; // moonbase\n            } else if (chain == 17) {\n                evmChainId = 245022934; // neon\n            } else if (chain == 23) {\n                evmChainId = 42161; // arbitrum\n            } else if (chain == 24) {\n                evmChainId = 10; // optimism\n            } else if (chain == 25) {\n                evmChainId = 100; // gnosis\n            } else {\n                revert(\"Unknown chain id.\");\n            }\n\n            setEvmChainId(evmChainId);\n        }\n    }\n\n    modifier initializer() {\n        address implementation = ERC1967Upgrade._getImplementation();\n\n        require(!isInitialized(implementation), \"already initialized\");\n\n        setInitialized(implementation);\n\n        _;\n    }\n\n    fallback() external payable {\n        revert(\"unsupported\");\n    }\n\n    receive() external payable {\n        revert(\"the Wormhole contract does not accept assets\");\n    }\n}\n"
}
