{
  "byteCode": "0x608060405234801561001057600080fd5b506103d7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b172b22211610071578063b172b22214610191578063d60b347f14610199578063e039f224146101c5578063eb8d3f12146101cd578063f951975a146101e3578063fbe3c2cd1461020357600080fd5b80631a90a219146100b95780631cfe7951146100d05780632c3c02a4146100ef5780634cf842b51461012257806364d42b171461016e5780639a8a059214610176575b600080fd5b6007545b6040519081526020015b60405180910390f35b60035463ffffffff165b60405163ffffffff90911681526020016100c7565b6101126100fd3660046102c7565b60009081526005602052604090205460ff1690565b60405190151581526020016100c7565b6101556101303660046102e0565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b60405167ffffffffffffffff90911681526020016100c7565b6008546100bd565b60005461ffff165b60405161ffff90911681526020016100c7565b6001546100bd565b6101126101a73660046102e0565b6001600160a01b031660009081526006602052604090205460ff1690565b610112610215565b600354640100000000900463ffffffff166100da565b6101f66101f1366004610310565b610228565b6040516100c79190610336565b60005462010000900461ffff1661017e565b60004661022160085490565b1415905090565b60408051808201825260608082526000602080840182905263ffffffff861682526002815290849020845181549283028101840186529485018281529394939092849284918401828280156102a657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610288575b50505091835250506001919091015463ffffffff1660209091015292915050565b6000602082840312156102d957600080fd5b5035919050565b6000602082840312156102f257600080fd5b81356001600160a01b038116811461030957600080fd5b9392505050565b60006020828403121561032257600080fd5b813563ffffffff8116811461030957600080fd5b6020808252825160408383015280516060840181905260009291820190839060808601905b808310156103845783516001600160a01b0316825292840192600192909201919084019061035b565b5063ffffffff84880151166040870152809450505050509291505056fea26469706673582212206325e9db78a1717e9cb47f82e2464004aa65e12202c9794b31424da2c65d831064736f6c63430008130033",
  "contract": {
    "abi": [
      {
        "inputs": [],
        "name": "chainId",
        "outputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "evmChainId",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getCurrentGuardianSetIndex",
        "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint32", "name": "index", "type": "uint32" }
        ],
        "name": "getGuardianSet",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address[]",
                "name": "keys",
                "type": "address[]"
              },
              {
                "internalType": "uint32",
                "name": "expirationTime",
                "type": "uint32"
              }
            ],
            "internalType": "struct Structs.GuardianSet",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getGuardianSetExpiry",
        "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "bytes32", "name": "hash", "type": "bytes32" }
        ],
        "name": "governanceActionIsConsumed",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "governanceChainId",
        "outputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "governanceContract",
        "outputs": [
          { "internalType": "bytes32", "name": "", "type": "bytes32" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "isFork",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "impl", "type": "address" }
        ],
        "name": "isInitialized",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "messageFee",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "emitter", "type": "address" }
        ],
        "name": "nextSequence",
        "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": { "kind": "dev", "methods": {}, "version": 1 },
    "evm": {
      "assembly": "    /* \"main.sol\":27120:28603  contract Getters is State {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"main.sol\":27120:28603  contract Getters is State {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xb172b222\n      gt\n      tag_15\n      jumpi\n      dup1\n      0xb172b222\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd60b347f\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xe039f224\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xeb8d3f12\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xf951975a\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xfbe3c2cd\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      dup1\n      0x1a90a219\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x1cfe7951\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2c3c02a4\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x4cf842b5\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x64d42b17\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x9a8a0592\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"main.sol\":28385:28478  function messageFee() public view returns (uint256) {... */\n    tag_3:\n        /* \"main.sol\":28454:28471  _state.messageFee */\n      sload(0x07)\n        /* \"main.sol\":28385:28478  function messageFee() public view returns (uint256) {... */\n    tag_16:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"main.sol\":28385:28478  function messageFee() public view returns (uint256) {... */\n    tag_18:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"main.sol\":27309:27423  function getCurrentGuardianSetIndex() public view returns (uint32) {... */\n    tag_4:\n        /* \"main.sol\":27393:27416  _state.guardianSetIndex */\n      and(0xffffffff, sload(0x03))\n        /* \"main.sol\":27309:27423  function getCurrentGuardianSetIndex() public view returns (uint32) {... */\n    tag_20:\n      mload(0x40)\n        /* \"#utility.yul\":370:380   */\n      0xffffffff\n        /* \"#utility.yul\":358:381   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":340:382   */\n      dup2\n      mstore\n        /* \"#utility.yul\":328:330   */\n      0x20\n        /* \"#utility.yul\":313:331   */\n      add\n        /* \"main.sol\":27309:27423  function getCurrentGuardianSetIndex() public view returns (uint32) {... */\n      tag_18\n        /* \"#utility.yul\":196:388   */\n      jump\n        /* \"main.sol\":27544:27697  function governanceActionIsConsumed(... */\n    tag_5:\n      tag_24\n      tag_25\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_25:\n        /* \"main.sol\":27629:27633  bool */\n      0x00\n        /* \"main.sol\":27652:27690  _state.consumedGovernanceActions[hash] */\n      swap1\n      dup2\n      mstore\n        /* \"main.sol\":27652:27684  _state.consumedGovernanceActions */\n      0x05\n        /* \"main.sol\":27652:27690  _state.consumedGovernanceActions[hash] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"main.sol\":27544:27697  function governanceActionIsConsumed(... */\n      jump\n    tag_24:\n      mload(0x40)\n        /* \"#utility.yul\":743:757   */\n      swap1\n      iszero\n        /* \"#utility.yul\":736:758   */\n      iszero\n        /* \"#utility.yul\":718:759   */\n      dup2\n      mstore\n        /* \"#utility.yul\":706:708   */\n      0x20\n        /* \"#utility.yul\":691:709   */\n      add\n        /* \"main.sol\":27544:27697  function governanceActionIsConsumed(... */\n      tag_18\n        /* \"#utility.yul\":578:765   */\n      jump\n        /* \"main.sol\":28484:28601  function nextSequence(address emitter) public view returns (uint64) {... */\n    tag_6:\n      tag_30\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"main.sol\":28569:28594  _state.sequences[emitter] */\n      and\n        /* \"main.sol\":28544:28550  uint64 */\n      0x00\n        /* \"main.sol\":28569:28594  _state.sequences[emitter] */\n      swap1\n      dup2\n      mstore\n        /* \"main.sol\":28569:28585  _state.sequences */\n      0x04\n        /* \"main.sol\":28569:28594  _state.sequences[emitter] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xffffffffffffffff\n      and\n      swap1\n        /* \"main.sol\":28484:28601  function nextSequence(address emitter) public view returns (uint64) {... */\n      jump\n    tag_30:\n      mload(0x40)\n        /* \"#utility.yul\":1235:1253   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1223:1254   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1205:1255   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1193:1195   */\n      0x20\n        /* \"#utility.yul\":1178:1196   */\n      add\n        /* \"main.sol\":28484:28601  function nextSequence(address emitter) public view returns (uint64) {... */\n      tag_18\n        /* \"#utility.yul\":1061:1261   */\n      jump\n        /* \"main.sol\":27937:28030  function evmChainId() public view returns (uint256) {... */\n    tag_7:\n        /* \"main.sol\":28006:28023  _state.evmChainId */\n      sload(0x08)\n        /* \"main.sol\":27937:28030  function evmChainId() public view returns (uint256) {... */\n      jump(tag_16)\n        /* \"main.sol\":27836:27931  function chainId() public view returns (uint16) {... */\n    tag_8:\n        /* \"main.sol\":27876:27882  uint16 */\n      0x00\n        /* \"main.sol\":27901:27924  _state.provider.chainId */\n      sload\n      0xffff\n      and\n        /* \"main.sol\":27836:27931  function chainId() public view returns (uint16) {... */\n    tag_39:\n      mload(0x40)\n        /* \"#utility.yul\":1440:1446   */\n      0xffff\n        /* \"#utility.yul\":1428:1447   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1410:1448   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1398:1400   */\n      0x20\n        /* \"#utility.yul\":1383:1401   */\n      add\n        /* \"main.sol\":27836:27931  function chainId() public view returns (uint16) {... */\n      tag_18\n        /* \"#utility.yul\":1266:1454   */\n      jump\n        /* \"main.sol\":28261:28379  function governanceContract() public view returns (bytes32) {... */\n    tag_9:\n        /* \"main.sol\":28338:28372  _state.provider.governanceContract */\n      sload(0x01)\n        /* \"main.sol\":28261:28379  function governanceContract() public view returns (bytes32) {... */\n      jump(tag_16)\n        /* \"main.sol\":27703:27830  function isInitialized(address impl) public view returns (bool) {... */\n    tag_10:\n      tag_24\n      tag_48\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_48:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"main.sol\":27784:27823  _state.initializedImplementations[impl] */\n      and\n        /* \"main.sol\":27761:27765  bool */\n      0x00\n        /* \"main.sol\":27784:27823  _state.initializedImplementations[impl] */\n      swap1\n      dup2\n      mstore\n        /* \"main.sol\":27784:27817  _state.initializedImplementations */\n      0x06\n        /* \"main.sol\":27784:27823  _state.initializedImplementations[impl] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"main.sol\":27703:27830  function isInitialized(address impl) public view returns (bool) {... */\n      jump\n        /* \"main.sol\":28036:28134  function isFork() public view returns (bool) {... */\n    tag_11:\n      tag_24\n      tag_52\n      jump\t// in\n        /* \"main.sol\":27429:27538  function getGuardianSetExpiry() public view returns (uint32) {... */\n    tag_12:\n        /* \"main.sol\":27507:27531  _state.guardianSetExpiry */\n      sload(0x03)\n      0x0100000000\n      swap1\n      div\n      0xffffffff\n      and\n        /* \"main.sol\":27429:27538  function getGuardianSetExpiry() public view returns (uint32) {... */\n      jump(tag_20)\n        /* \"main.sol\":27152:27303  function getGuardianSet(... */\n    tag_13:\n      tag_57\n      tag_58\n      calldatasize\n      0x04\n      tag_59\n      jump\t// in\n    tag_58:\n      tag_60\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      tag_18\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n        /* \"main.sol\":28140:28255  function governanceChainId() public view returns (uint16) {... */\n    tag_14:\n        /* \"main.sol\":28190:28196  uint16 */\n      0x00\n        /* \"main.sol\":28215:28248  _state.provider.governanceChainId */\n      sload\n      0x010000\n      swap1\n      div\n      0xffff\n      and\n        /* \"main.sol\":28140:28255  function governanceChainId() public view returns (uint16) {... */\n      jump(tag_39)\n        /* \"main.sol\":28036:28134  function isFork() public view returns (bool) {... */\n    tag_52:\n        /* \"main.sol\":28075:28079  bool */\n      0x00\n        /* \"main.sol\":28114:28127  block.chainid */\n      chainid\n        /* \"main.sol\":28098:28110  evmChainId() */\n      tag_75\n        /* \"main.sol\":28006:28023  _state.evmChainId */\n      sload(0x08)\n      swap1\n        /* \"main.sol\":27937:28030  function evmChainId() public view returns (uint256) {... */\n      jump\n        /* \"main.sol\":28098:28110  evmChainId() */\n    tag_75:\n        /* \"main.sol\":28098:28127  evmChainId() != block.chainid */\n      eq\n      iszero\n        /* \"main.sol\":28091:28127  return evmChainId() != block.chainid */\n      swap1\n      pop\n        /* \"main.sol\":28036:28134  function isFork() public view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"main.sol\":27152:27303  function getGuardianSet(... */\n    tag_60:\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      dup3\n      mstore\n      0x60\n      dup1\n      dup3\n      mstore\n      0x00\n      0x20\n      dup1\n      dup5\n      add\n      dup3\n      swap1\n      mstore\n        /* \"main.sol\":27270:27296  _state.guardianSets[index] */\n      0xffffffff\n      dup7\n      and\n      dup3\n      mstore\n        /* \"main.sol\":27270:27289  _state.guardianSets */\n      0x02\n        /* \"main.sol\":27270:27296  _state.guardianSets[index] */\n      dup2\n      mstore\n      swap1\n      dup5\n      swap1\n      keccak256\n        /* \"main.sol\":27263:27296  return _state.guardianSets[index] */\n      dup5\n      mload\n      dup2\n      sload\n      swap3\n      dup4\n      mul\n      dup2\n      add\n      dup5\n      add\n      dup7\n      mstore\n      swap5\n      dup6\n      add\n      dup3\n      dup2\n      mstore\n      swap4\n      swap5\n      swap4\n        /* \"main.sol\":27270:27296  _state.guardianSets[index] */\n      swap1\n      swap3\n        /* \"main.sol\":27263:27296  return _state.guardianSets[index] */\n      dup5\n      swap3\n        /* \"main.sol\":27270:27296  _state.guardianSets[index] */\n      dup5\n      swap2\n        /* \"main.sol\":27263:27296  return _state.guardianSets[index] */\n      dup5\n      add\n        /* \"main.sol\":27270:27296  _state.guardianSets[index] */\n      dup3\n        /* \"main.sol\":27263:27296  return _state.guardianSets[index] */\n      dup3\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_81:\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_81\n      jumpi\n    tag_80:\n      pop\n      pop\n      pop\n      swap2\n      dup4\n      mstore\n      pop\n      pop\n      0x01\n      swap2\n      swap1\n      swap2\n      add\n      sload\n      0xffffffff\n      and\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n      swap3\n        /* \"main.sol\":27152:27303  function getGuardianSet(... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":393:573   */\n    tag_26:\n        /* \"#utility.yul\":452:458   */\n      0x00\n        /* \"#utility.yul\":505:507   */\n      0x20\n        /* \"#utility.yul\":493:502   */\n      dup3\n        /* \"#utility.yul\":484:491   */\n      dup5\n        /* \"#utility.yul\":480:503   */\n      sub\n        /* \"#utility.yul\":476:508   */\n      slt\n        /* \"#utility.yul\":473:525   */\n      iszero\n      tag_87\n      jumpi\n        /* \"#utility.yul\":521:522   */\n      0x00\n        /* \"#utility.yul\":518:519   */\n      dup1\n        /* \"#utility.yul\":511:523   */\n      revert\n        /* \"#utility.yul\":473:525   */\n    tag_87:\n      pop\n        /* \"#utility.yul\":544:567   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":393:573   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":770:1056   */\n    tag_32:\n        /* \"#utility.yul\":829:835   */\n      0x00\n        /* \"#utility.yul\":882:884   */\n      0x20\n        /* \"#utility.yul\":870:879   */\n      dup3\n        /* \"#utility.yul\":861:868   */\n      dup5\n        /* \"#utility.yul\":857:880   */\n      sub\n        /* \"#utility.yul\":853:885   */\n      slt\n        /* \"#utility.yul\":850:902   */\n      iszero\n      tag_90\n      jumpi\n        /* \"#utility.yul\":898:899   */\n      0x00\n        /* \"#utility.yul\":895:896   */\n      dup1\n        /* \"#utility.yul\":888:900   */\n      revert\n        /* \"#utility.yul\":850:902   */\n    tag_90:\n        /* \"#utility.yul\":924:947   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":976:1007   */\n      dup2\n      and\n        /* \"#utility.yul\":966:1008   */\n      dup2\n      eq\n        /* \"#utility.yul\":956:1026   */\n      tag_91\n      jumpi\n        /* \"#utility.yul\":1022:1023   */\n      0x00\n        /* \"#utility.yul\":1019:1020   */\n      dup1\n        /* \"#utility.yul\":1012:1024   */\n      revert\n        /* \"#utility.yul\":956:1026   */\n    tag_91:\n        /* \"#utility.yul\":1045:1050   */\n      swap4\n        /* \"#utility.yul\":770:1056   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1641:1917   */\n    tag_59:\n        /* \"#utility.yul\":1699:1705   */\n      0x00\n        /* \"#utility.yul\":1752:1754   */\n      0x20\n        /* \"#utility.yul\":1740:1749   */\n      dup3\n        /* \"#utility.yul\":1731:1738   */\n      dup5\n        /* \"#utility.yul\":1727:1750   */\n      sub\n        /* \"#utility.yul\":1723:1755   */\n      slt\n        /* \"#utility.yul\":1720:1772   */\n      iszero\n      tag_96\n      jumpi\n        /* \"#utility.yul\":1768:1769   */\n      0x00\n        /* \"#utility.yul\":1765:1766   */\n      dup1\n        /* \"#utility.yul\":1758:1770   */\n      revert\n        /* \"#utility.yul\":1720:1772   */\n    tag_96:\n        /* \"#utility.yul\":1807:1816   */\n      dup2\n        /* \"#utility.yul\":1794:1817   */\n      calldataload\n        /* \"#utility.yul\":1857:1867   */\n      0xffffffff\n        /* \"#utility.yul\":1850:1855   */\n      dup2\n        /* \"#utility.yul\":1846:1868   */\n      and\n        /* \"#utility.yul\":1839:1844   */\n      dup2\n        /* \"#utility.yul\":1836:1869   */\n      eq\n        /* \"#utility.yul\":1826:1887   */\n      tag_91\n      jumpi\n        /* \"#utility.yul\":1883:1884   */\n      0x00\n        /* \"#utility.yul\":1880:1881   */\n      dup1\n        /* \"#utility.yul\":1873:1885   */\n      revert\n        /* \"#utility.yul\":1922:2758   */\n    tag_62:\n        /* \"#utility.yul\":2097:2099   */\n      0x20\n        /* \"#utility.yul\":2108:2129   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2199:2212   */\n      dup3\n      mload\n        /* \"#utility.yul\":2248:2252   */\n      0x40\n        /* \"#utility.yul\":2228:2246   */\n      dup4\n      dup4\n      add\n        /* \"#utility.yul\":2221:2253   */\n      mstore\n        /* \"#utility.yul\":2302:2321   */\n      dup1\n      mload\n        /* \"#utility.yul\":2167:2169   */\n      0x60\n        /* \"#utility.yul\":2152:2170   */\n      dup5\n      add\n        /* \"#utility.yul\":2330:2352   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":2068:2072   */\n      0x00\n      swap3\n        /* \"#utility.yul\":2097:2099   */\n      swap2\n        /* \"#utility.yul\":2410:2431   */\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":2068:2072   */\n      dup4\n      swap1\n        /* \"#utility.yul\":2383:2386   */\n      0x80\n        /* \"#utility.yul\":2368:2387   */\n      dup7\n      add\n      swap1\n        /* \"#utility.yul\":2459:2654   */\n    tag_99:\n        /* \"#utility.yul\":2473:2479   */\n      dup1\n        /* \"#utility.yul\":2470:2471   */\n      dup4\n        /* \"#utility.yul\":2467:2480   */\n      lt\n        /* \"#utility.yul\":2459:2654   */\n      iszero\n      tag_101\n      jumpi\n        /* \"#utility.yul\":2538:2551   */\n      dup4\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2534:2573   */\n      and\n        /* \"#utility.yul\":2522:2574   */\n      dup3\n      mstore\n        /* \"#utility.yul\":2629:2644   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":2570:2571   */\n      0x01\n        /* \"#utility.yul\":2488:2497   */\n      swap3\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":2594:2606   */\n      swap1\n      dup5\n      add\n      swap1\n        /* \"#utility.yul\":2459:2654   */\n      jump(tag_99)\n    tag_101:\n        /* \"#utility.yul\":2463:2466   */\n      pop\n        /* \"#utility.yul\":2720:2730   */\n      0xffffffff\n        /* \"#utility.yul\":2714:2716   */\n      dup5\n        /* \"#utility.yul\":2706:2712   */\n      dup9\n        /* \"#utility.yul\":2702:2717   */\n      add\n        /* \"#utility.yul\":2696:2718   */\n      mload\n        /* \"#utility.yul\":2692:2731   */\n      and\n        /* \"#utility.yul\":2685:2689   */\n      0x40\n        /* \"#utility.yul\":2674:2683   */\n      dup8\n        /* \"#utility.yul\":2670:2690   */\n      add\n        /* \"#utility.yul\":2663:2732   */\n      mstore\n        /* \"#utility.yul\":2749:2752   */\n      dup1\n        /* \"#utility.yul\":2741:2752   */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1922:2758   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212206325e9db78a1717e9cb47f82e2464004aa65e12202c9794b31424da2c65d831064736f6c63430008130033\n}\n",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b506103d7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b172b22211610071578063b172b22214610191578063d60b347f14610199578063e039f224146101c5578063eb8d3f12146101cd578063f951975a146101e3578063fbe3c2cd1461020357600080fd5b80631a90a219146100b95780631cfe7951146100d05780632c3c02a4146100ef5780634cf842b51461012257806364d42b171461016e5780639a8a059214610176575b600080fd5b6007545b6040519081526020015b60405180910390f35b60035463ffffffff165b60405163ffffffff90911681526020016100c7565b6101126100fd3660046102c7565b60009081526005602052604090205460ff1690565b60405190151581526020016100c7565b6101556101303660046102e0565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b60405167ffffffffffffffff90911681526020016100c7565b6008546100bd565b60005461ffff165b60405161ffff90911681526020016100c7565b6001546100bd565b6101126101a73660046102e0565b6001600160a01b031660009081526006602052604090205460ff1690565b610112610215565b600354640100000000900463ffffffff166100da565b6101f66101f1366004610310565b610228565b6040516100c79190610336565b60005462010000900461ffff1661017e565b60004661022160085490565b1415905090565b60408051808201825260608082526000602080840182905263ffffffff861682526002815290849020845181549283028101840186529485018281529394939092849284918401828280156102a657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610288575b50505091835250506001919091015463ffffffff1660209091015292915050565b6000602082840312156102d957600080fd5b5035919050565b6000602082840312156102f257600080fd5b81356001600160a01b038116811461030957600080fd5b9392505050565b60006020828403121561032257600080fd5b813563ffffffff8116811461030957600080fd5b6020808252825160408383015280516060840181905260009291820190839060808601905b808310156103845783516001600160a01b0316825292840192600192909201919084019061035b565b5063ffffffff84880151166040870152809450505050509291505056fea26469706673582212206325e9db78a1717e9cb47f82e2464004aa65e12202c9794b31424da2c65d831064736f6c63430008130033",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D7 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB172B222 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB172B222 EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0xD60B347F EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0xE039F224 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xEB8D3F12 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xF951975A EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xFBE3C2CD EQ PUSH2 0x203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1A90A219 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x1CFE7951 EQ PUSH2 0xD0 JUMPI DUP1 PUSH4 0x2C3C02A4 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x4CF842B5 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x64D42B17 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x9A8A0592 EQ PUSH2 0x176 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3 SLOAD PUSH4 0xFFFFFFFF AND JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH2 0x112 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH2 0x155 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0xBD JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xFFFF AND JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xBD JUMP JUMPDEST PUSH2 0x112 PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x112 PUSH2 0x215 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0xDA JUMP JUMPDEST PUSH2 0x1F6 PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x310 JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC7 SWAP2 SWAP1 PUSH2 0x336 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0x17E JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH2 0x221 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST EQ ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE PUSH4 0xFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x2 DUP2 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP4 MUL DUP2 ADD DUP5 ADD DUP7 MSTORE SWAP5 DUP6 ADD DUP3 DUP2 MSTORE SWAP4 SWAP5 SWAP4 SWAP1 SWAP3 DUP5 SWAP3 DUP5 SWAP2 DUP5 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x288 JUMPI JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD PUSH1 0x40 DUP4 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP3 SWAP2 DUP3 ADD SWAP1 DUP4 SWAP1 PUSH1 0x80 DUP7 ADD SWAP1 JUMPDEST DUP1 DUP4 LT ISZERO PUSH2 0x384 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x35B JUMP JUMPDEST POP PUSH4 0xFFFFFFFF DUP5 DUP9 ADD MLOAD AND PUSH1 0x40 DUP8 ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x25E9DB78 LOG1 PUSH18 0x7E9CB47F82E2464004AA65E12202C9794B31 TIMESTAMP 0x4D LOG2 0xC6 0x5D DUP4 LT PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
        "sourceMap": "27120:1483:0:-:0;;;;;;;;;;;;;;;;;;;"
      },
      "deployedBytecode": {
        "functionDebugData": {
          "@chainId_1047": {
            "entryPoint": null,
            "id": 1047,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@evmChainId_1056": {
            "entryPoint": null,
            "id": 1056,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@getCurrentGuardianSetIndex_1002": {
            "entryPoint": null,
            "id": 1002,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@getGuardianSetExpiry_1011": {
            "entryPoint": null,
            "id": 1011,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@getGuardianSet_993": {
            "entryPoint": 552,
            "id": 993,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "@governanceActionIsConsumed_1024": {
            "entryPoint": null,
            "id": 1024,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "@governanceChainId_1078": {
            "entryPoint": null,
            "id": 1078,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@governanceContract_1088": {
            "entryPoint": null,
            "id": 1088,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@isFork_1068": {
            "entryPoint": 533,
            "id": 1068,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@isInitialized_1037": {
            "entryPoint": null,
            "id": 1037,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "@messageFee_1097": {
            "entryPoint": null,
            "id": 1097,
            "parameterSlots": 0,
            "returnSlots": 1
          },
          "@nextSequence_1110": {
            "entryPoint": null,
            "id": 1110,
            "parameterSlots": 1,
            "returnSlots": 1
          },
          "abi_decode_tuple_t_address": {
            "entryPoint": 736,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_decode_tuple_t_bytes32": {
            "entryPoint": 711,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_decode_tuple_t_uint32": {
            "entryPoint": 784,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_struct$_GuardianSet_$14_memory_ptr__to_t_struct$_GuardianSet_$14_memory_ptr__fromStack_reversed": {
            "entryPoint": 822,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          },
          "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
            "entryPoint": null,
            "id": null,
            "parameterSlots": 2,
            "returnSlots": 1
          }
        },
        "generatedSources": [
          {
            "ast": {
              "nodeType": "YulBlock",
              "src": "0:2760:1",
              "statements": [
                { "nodeType": "YulBlock", "src": "6:3:1", "statements": [] },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "115:76:1",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "125:26:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "137:9:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "148:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "133:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "133:18:1"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "125:4:1"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "167:9:1"
                            },
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "178:6:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "160:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "160:25:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "160:25:1"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "84:9:1",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "95:6:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nodeType": "YulTypedName",
                      "src": "106:4:1",
                      "type": ""
                    }
                  ],
                  "src": "14:177:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "295:93:1",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "305:26:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "317:9:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "328:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "313:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "313:18:1"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "305:4:1"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "347:9:1"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "362:6:1"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "370:10:1",
                                  "type": "",
                                  "value": "0xffffffff"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "358:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "358:23:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "340:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "340:42:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "340:42:1"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "264:9:1",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "275:6:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nodeType": "YulTypedName",
                      "src": "286:4:1",
                      "type": ""
                    }
                  ],
                  "src": "196:192:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "463:110:1",
                    "statements": [
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "509:16:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "518:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "521:1:1",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "511:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "511:12:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "511:12:1"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dataEnd",
                                  "nodeType": "YulIdentifier",
                                  "src": "484:7:1"
                                },
                                {
                                  "name": "headStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "493:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nodeType": "YulIdentifier",
                                "src": "480:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "480:23:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "505:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "slt",
                            "nodeType": "YulIdentifier",
                            "src": "476:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "476:32:1"
                        },
                        "nodeType": "YulIf",
                        "src": "473:52:1"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "534:33:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "557:9:1"
                            }
                          ],
                          "functionName": {
                            "name": "calldataload",
                            "nodeType": "YulIdentifier",
                            "src": "544:12:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "544:23:1"
                        },
                        "variableNames": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "534:6:1"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_decode_tuple_t_bytes32",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "429:9:1",
                      "type": ""
                    },
                    {
                      "name": "dataEnd",
                      "nodeType": "YulTypedName",
                      "src": "440:7:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "452:6:1",
                      "type": ""
                    }
                  ],
                  "src": "393:180:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "673:92:1",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "683:26:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "695:9:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "706:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "691:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "691:18:1"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "683:4:1"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "725:9:1"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "750:6:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "iszero",
                                    "nodeType": "YulIdentifier",
                                    "src": "743:6:1"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "743:14:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nodeType": "YulIdentifier",
                                "src": "736:6:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "736:22:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "718:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "718:41:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "718:41:1"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "642:9:1",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "653:6:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nodeType": "YulTypedName",
                      "src": "664:4:1",
                      "type": ""
                    }
                  ],
                  "src": "578:187:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "840:216:1",
                    "statements": [
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "886:16:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "895:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "898:1:1",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "888:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "888:12:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "888:12:1"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dataEnd",
                                  "nodeType": "YulIdentifier",
                                  "src": "861:7:1"
                                },
                                {
                                  "name": "headStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "870:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nodeType": "YulIdentifier",
                                "src": "857:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "857:23:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "882:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "slt",
                            "nodeType": "YulIdentifier",
                            "src": "853:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "853:32:1"
                        },
                        "nodeType": "YulIf",
                        "src": "850:52:1"
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "911:36:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "937:9:1"
                            }
                          ],
                          "functionName": {
                            "name": "calldataload",
                            "nodeType": "YulIdentifier",
                            "src": "924:12:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "924:23:1"
                        },
                        "variables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "915:5:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1010:16:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1019:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1022:1:1",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1012:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1012:12:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1012:12:1"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "969:5:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "980:5:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "995:3:1",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1000:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "991:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "991:11:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1004:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "987:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "987:19:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "976:3:1"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "976:31:1"
                                }
                              ],
                              "functionName": {
                                "name": "eq",
                                "nodeType": "YulIdentifier",
                                "src": "966:2:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "966:42:1"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "959:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "959:50:1"
                        },
                        "nodeType": "YulIf",
                        "src": "956:70:1"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1035:15:1",
                        "value": {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "1045:5:1"
                        },
                        "variableNames": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1035:6:1"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_decode_tuple_t_address",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "806:9:1",
                      "type": ""
                    },
                    {
                      "name": "dataEnd",
                      "nodeType": "YulTypedName",
                      "src": "817:7:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "829:6:1",
                      "type": ""
                    }
                  ],
                  "src": "770:286:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1160:101:1",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1170:26:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "1182:9:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1193:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "1178:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1178:18:1"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "1170:4:1"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "1212:9:1"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1227:6:1"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1235:18:1",
                                  "type": "",
                                  "value": "0xffffffffffffffff"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "1223:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1223:31:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "1205:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1205:50:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1205:50:1"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "1129:9:1",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "1140:6:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nodeType": "YulTypedName",
                      "src": "1151:4:1",
                      "type": ""
                    }
                  ],
                  "src": "1061:200:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1365:89:1",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1375:26:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "1387:9:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1398:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "1383:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1383:18:1"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "1375:4:1"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "1417:9:1"
                            },
                            {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1432:6:1"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1440:6:1",
                                  "type": "",
                                  "value": "0xffff"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "1428:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1428:19:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "1410:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1410:38:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1410:38:1"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "1334:9:1",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "1345:6:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nodeType": "YulTypedName",
                      "src": "1356:4:1",
                      "type": ""
                    }
                  ],
                  "src": "1266:188:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1560:76:1",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1570:26:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "1582:9:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1593:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "1578:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1578:18:1"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "1570:4:1"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "1612:9:1"
                            },
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1623:6:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "1605:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1605:25:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1605:25:1"
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "1529:9:1",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "1540:6:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nodeType": "YulTypedName",
                      "src": "1551:4:1",
                      "type": ""
                    }
                  ],
                  "src": "1459:177:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1710:207:1",
                    "statements": [
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1756:16:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1765:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1768:1:1",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1758:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1758:12:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1758:12:1"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "dataEnd",
                                  "nodeType": "YulIdentifier",
                                  "src": "1731:7:1"
                                },
                                {
                                  "name": "headStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "1740:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nodeType": "YulIdentifier",
                                "src": "1727:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1727:23:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1752:2:1",
                              "type": "",
                              "value": "32"
                            }
                          ],
                          "functionName": {
                            "name": "slt",
                            "nodeType": "YulIdentifier",
                            "src": "1723:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1723:32:1"
                        },
                        "nodeType": "YulIf",
                        "src": "1720:52:1"
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "1781:36:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "1807:9:1"
                            }
                          ],
                          "functionName": {
                            "name": "calldataload",
                            "nodeType": "YulIdentifier",
                            "src": "1794:12:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1794:23:1"
                        },
                        "variables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "1785:5:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1871:16:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1880:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1883:1:1",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "1873:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1873:12:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1873:12:1"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "1839:5:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "1850:5:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1857:10:1",
                                      "type": "",
                                      "value": "0xffffffff"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "1846:3:1"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1846:22:1"
                                }
                              ],
                              "functionName": {
                                "name": "eq",
                                "nodeType": "YulIdentifier",
                                "src": "1836:2:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1836:33:1"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "1829:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1829:41:1"
                        },
                        "nodeType": "YulIf",
                        "src": "1826:61:1"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1896:15:1",
                        "value": {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "1906:5:1"
                        },
                        "variableNames": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1896:6:1"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_decode_tuple_t_uint32",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "1676:9:1",
                      "type": ""
                    },
                    {
                      "name": "dataEnd",
                      "nodeType": "YulTypedName",
                      "src": "1687:7:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "1699:6:1",
                      "type": ""
                    }
                  ],
                  "src": "1641:276:1"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "2077:681:1",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "2087:12:1",
                        "value": {
                          "kind": "number",
                          "nodeType": "YulLiteral",
                          "src": "2097:2:1",
                          "type": "",
                          "value": "32"
                        },
                        "variables": [
                          {
                            "name": "_1",
                            "nodeType": "YulTypedName",
                            "src": "2091:2:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "2115:9:1"
                            },
                            {
                              "name": "_1",
                              "nodeType": "YulIdentifier",
                              "src": "2126:2:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "2108:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2108:21:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2108:21:1"
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "2138:32:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "2156:9:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2167:2:1",
                              "type": "",
                              "value": "96"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "2152:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2152:18:1"
                        },
                        "variables": [
                          {
                            "name": "tail_1",
                            "nodeType": "YulTypedName",
                            "src": "2142:6:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "2179:33:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2205:6:1"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "2199:5:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2199:13:1"
                        },
                        "variables": [
                          {
                            "name": "memberValue0",
                            "nodeType": "YulTypedName",
                            "src": "2183:12:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "2232:9:1"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2243:2:1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2228:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2228:18:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2248:4:1",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "2221:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2221:32:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2221:32:1"
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "2262:17:1",
                        "value": {
                          "name": "tail_1",
                          "nodeType": "YulIdentifier",
                          "src": "2273:6:1"
                        },
                        "variables": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "2266:3:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "2288:33:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulIdentifier",
                              "src": "2308:12:1"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "2302:5:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2302:19:1"
                        },
                        "variables": [
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "2292:6:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulIdentifier",
                              "src": "2337:6:1"
                            },
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2345:6:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "2330:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2330:22:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2330:22:1"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "2361:26:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "headStart",
                              "nodeType": "YulIdentifier",
                              "src": "2372:9:1"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2383:3:1",
                              "type": "",
                              "value": "128"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "2368:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2368:19:1"
                        },
                        "variableNames": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "2361:3:1"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "2396:35:1",
                        "value": {
                          "arguments": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulIdentifier",
                              "src": "2414:12:1"
                            },
                            {
                              "name": "_1",
                              "nodeType": "YulIdentifier",
                              "src": "2428:2:1"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "2410:3:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2410:21:1"
                        },
                        "variables": [
                          {
                            "name": "srcPtr",
                            "nodeType": "YulTypedName",
                            "src": "2400:6:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "2440:10:1",
                        "value": {
                          "kind": "number",
                          "nodeType": "YulLiteral",
                          "src": "2449:1:1",
                          "type": "",
                          "value": "0"
                        },
                        "variables": [
                          {
                            "name": "i",
                            "nodeType": "YulTypedName",
                            "src": "2444:1:1",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2508:146:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2529:3:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "srcPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "2544:6:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "2538:5:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2538:13:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2561:3:1",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2566:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "2557:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2557:11:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2570:1:1",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "2553:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2553:19:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2534:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2534:39:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2522:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2522:52:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2522:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2587:19:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2598:3:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2603:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2594:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2594:12:1"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "2587:3:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2619:25:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2633:6:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2641:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2629:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2629:15:1"
                              },
                              "variableNames": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "2619:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "i",
                              "nodeType": "YulIdentifier",
                              "src": "2470:1:1"
                            },
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2473:6:1"
                            }
                          ],
                          "functionName": {
                            "name": "lt",
                            "nodeType": "YulIdentifier",
                            "src": "2467:2:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2467:13:1"
                        },
                        "nodeType": "YulForLoop",
                        "post": {
                          "nodeType": "YulBlock",
                          "src": "2481:18:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "2483:14:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "2492:1:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2495:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2488:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2488:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "2483:1:1"
                                }
                              ]
                            }
                          ]
                        },
                        "pre": {
                          "nodeType": "YulBlock",
                          "src": "2463:3:1",
                          "statements": []
                        },
                        "src": "2459:195:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "2674:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2685:4:1",
                                  "type": "",
                                  "value": "0x40"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2670:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2670:20:1"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2706:6:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2714:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2702:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2702:15:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "2696:5:1"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2696:22:1"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2720:10:1",
                                  "type": "",
                                  "value": "0xffffffff"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "2692:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2692:39:1"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "2663:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2663:69:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2663:69:1"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "2741:11:1",
                        "value": {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "2749:3:1"
                        },
                        "variableNames": [
                          {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "2741:4:1"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "abi_encode_tuple_t_struct$_GuardianSet_$14_memory_ptr__to_t_struct$_GuardianSet_$14_memory_ptr__fromStack_reversed",
                  "nodeType": "YulFunctionDefinition",
                  "parameters": [
                    {
                      "name": "headStart",
                      "nodeType": "YulTypedName",
                      "src": "2046:9:1",
                      "type": ""
                    },
                    {
                      "name": "value0",
                      "nodeType": "YulTypedName",
                      "src": "2057:6:1",
                      "type": ""
                    }
                  ],
                  "returnVariables": [
                    {
                      "name": "tail",
                      "nodeType": "YulTypedName",
                      "src": "2068:4:1",
                      "type": ""
                    }
                  ],
                  "src": "1922:836:1"
                }
              ]
            },
            "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_struct$_GuardianSet_$14_memory_ptr__to_t_struct$_GuardianSet_$14_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let tail_1 := add(headStart, 96)\n        let memberValue0 := mload(value0)\n        mstore(add(headStart, _1), 0x40)\n        let pos := tail_1\n        let length := mload(memberValue0)\n        mstore(tail_1, length)\n        pos := add(headStart, 128)\n        let srcPtr := add(memberValue0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        mstore(add(headStart, 0x40), and(mload(add(value0, _1)), 0xffffffff))\n        tail := pos\n    }\n}",
            "id": 1,
            "language": "Yul",
            "name": "#utility.yul"
          }
        ],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b172b22211610071578063b172b22214610191578063d60b347f14610199578063e039f224146101c5578063eb8d3f12146101cd578063f951975a146101e3578063fbe3c2cd1461020357600080fd5b80631a90a219146100b95780631cfe7951146100d05780632c3c02a4146100ef5780634cf842b51461012257806364d42b171461016e5780639a8a059214610176575b600080fd5b6007545b6040519081526020015b60405180910390f35b60035463ffffffff165b60405163ffffffff90911681526020016100c7565b6101126100fd3660046102c7565b60009081526005602052604090205460ff1690565b60405190151581526020016100c7565b6101556101303660046102e0565b6001600160a01b031660009081526004602052604090205467ffffffffffffffff1690565b60405167ffffffffffffffff90911681526020016100c7565b6008546100bd565b60005461ffff165b60405161ffff90911681526020016100c7565b6001546100bd565b6101126101a73660046102e0565b6001600160a01b031660009081526006602052604090205460ff1690565b610112610215565b600354640100000000900463ffffffff166100da565b6101f66101f1366004610310565b610228565b6040516100c79190610336565b60005462010000900461ffff1661017e565b60004661022160085490565b1415905090565b60408051808201825260608082526000602080840182905263ffffffff861682526002815290849020845181549283028101840186529485018281529394939092849284918401828280156102a657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610288575b50505091835250506001919091015463ffffffff1660209091015292915050565b6000602082840312156102d957600080fd5b5035919050565b6000602082840312156102f257600080fd5b81356001600160a01b038116811461030957600080fd5b9392505050565b60006020828403121561032257600080fd5b813563ffffffff8116811461030957600080fd5b6020808252825160408383015280516060840181905260009291820190839060808601905b808310156103845783516001600160a01b0316825292840192600192909201919084019061035b565b5063ffffffff84880151166040870152809450505050509291505056fea26469706673582212206325e9db78a1717e9cb47f82e2464004aa65e12202c9794b31424da2c65d831064736f6c63430008130033",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB172B222 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB172B222 EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0xD60B347F EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0xE039F224 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xEB8D3F12 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xF951975A EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xFBE3C2CD EQ PUSH2 0x203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1A90A219 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x1CFE7951 EQ PUSH2 0xD0 JUMPI DUP1 PUSH4 0x2C3C02A4 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x4CF842B5 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x64D42B17 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x9A8A0592 EQ PUSH2 0x176 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3 SLOAD PUSH4 0xFFFFFFFF AND JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH2 0x112 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH2 0x155 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0xBD JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xFFFF AND JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xBD JUMP JUMPDEST PUSH2 0x112 PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x112 PUSH2 0x215 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0xDA JUMP JUMPDEST PUSH2 0x1F6 PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x310 JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC7 SWAP2 SWAP1 PUSH2 0x336 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0x17E JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH2 0x221 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST EQ ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE PUSH4 0xFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x2 DUP2 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP4 MUL DUP2 ADD DUP5 ADD DUP7 MSTORE SWAP5 DUP6 ADD DUP3 DUP2 MSTORE SWAP4 SWAP5 SWAP4 SWAP1 SWAP3 DUP5 SWAP3 DUP5 SWAP2 DUP5 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x288 JUMPI JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD PUSH1 0x40 DUP4 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP3 SWAP2 DUP3 ADD SWAP1 DUP4 SWAP1 PUSH1 0x80 DUP7 ADD SWAP1 JUMPDEST DUP1 DUP4 LT ISZERO PUSH2 0x384 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x35B JUMP JUMPDEST POP PUSH4 0xFFFFFFFF DUP5 DUP9 ADD MLOAD AND PUSH1 0x40 DUP8 ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x25E9DB78 LOG1 PUSH18 0x7E9CB47F82E2464004AA65E12202C9794B31 TIMESTAMP 0x4D LOG2 0xC6 0x5D DUP4 LT PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
        "sourceMap": "27120:1483:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28385:93;28454:17;;28385:93;;;160:25:1;;;148:2;133:18;28385:93:0;;;;;;;;27309:114;27393:23;;;;27309:114;;;370:10:1;358:23;;;340:42;;328:2;313:18;27309:114:0;196:192:1;27544:153:0;;;;;;:::i;:::-;27629:4;27652:38;;;:32;:38;;;;;;;;;27544:153;;;;743:14:1;;736:22;718:41;;706:2;691:18;27544:153:0;578:187:1;28484:117:0;;;;;;:::i;:::-;-1:-1:-1;;;;;28569:25:0;28544:6;28569:25;;;:16;:25;;;;;;;;;28484:117;;;;1235:18:1;1223:31;;;1205:50;;1193:2;1178:18;28484:117:0;1061:200:1;27937:93:0;28006:17;;27937:93;;27836:95;27876:6;27901:23;;;27836:95;;;1440:6:1;1428:19;;;1410:38;;1398:2;1383:18;27836:95:0;1266:188:1;28261:118:0;28338:34;;28261:118;;27703:127;;;;;;:::i;:::-;-1:-1:-1;;;;;27784:39:0;27761:4;27784:39;;;:33;:39;;;;;;;;;27703:127;28036:98;;;:::i;27429:109::-;27507:24;;;;;;;27429:109;;27152:151;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;28140:115::-;28190:6;28215:33;;;;;;28140:115;;28036:98;28075:4;28114:13;28098:12;28006:17;;;27937:93;28098:12;:29;;28091:36;;28036:98;:::o;27152:151::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;27270:26:0;;;;;:19;:26;;;;;;27263:33;;;;;;;;;;;;;;;;;;;-1:-1:-1;;27263:33:0;27270:26;;27263:33;;27270:26;;27263:33;;27270:26;27263:33;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;27263:33:0;;;;;;;;;;;;;;;;-1:-1:-1;;;27263:33:0;;;-1:-1:-1;;27263:33:0;;;;;;;;;;;;;;27152:151;-1:-1:-1;;27152:151:0:o;393:180:1:-;452:6;505:2;493:9;484:7;480:23;476:32;473:52;;;521:1;518;511:12;473:52;-1:-1:-1;544:23:1;;393:180;-1:-1:-1;393:180:1:o;770:286::-;829:6;882:2;870:9;861:7;857:23;853:32;850:52;;;898:1;895;888:12;850:52;924:23;;-1:-1:-1;;;;;976:31:1;;966:42;;956:70;;1022:1;1019;1012:12;956:70;1045:5;770:286;-1:-1:-1;;;770:286:1:o;1641:276::-;1699:6;1752:2;1740:9;1731:7;1727:23;1723:32;1720:52;;;1768:1;1765;1758:12;1720:52;1807:9;1794:23;1857:10;1850:5;1846:22;1839:5;1836:33;1826:61;;1883:1;1880;1873:12;1922:836;2097:2;2108:21;;;2199:13;;2248:4;2228:18;;;2221:32;2302:19;;2167:2;2152:18;;2330:22;;;2068:4;;2097:2;2410:21;;;2068:4;;2383:3;2368:19;;;2459:195;2473:6;2470:1;2467:13;2459:195;;;2538:13;;-1:-1:-1;;;;;2534:39:1;2522:52;;2629:15;;;;2570:1;2488:9;;;;;2594:12;;;;2459:195;;;2463:3;2720:10;2714:2;2706:6;2702:15;2696:22;2692:39;2685:4;2674:9;2670:20;2663:69;2749:3;2741:11;;;;;;1922:836;;;;:::o"
      },
      "gasEstimates": {
        "creation": {
          "codeDepositCost": "196600",
          "executionCost": "238",
          "totalCost": "196838"
        },
        "external": {
          "chainId()": "2407",
          "evmChainId()": "2370",
          "getCurrentGuardianSetIndex()": "2319",
          "getGuardianSet(uint32)": "infinite",
          "getGuardianSetExpiry()": "2384",
          "governanceActionIsConsumed(bytes32)": "2495",
          "governanceChainId()": "2428",
          "governanceContract()": "2281",
          "isFork()": "2388",
          "isInitialized(address)": "2536",
          "messageFee()": "2271",
          "nextSequence(address)": "2584"
        }
      },
      "legacyAssembly": {
        ".code": [
          {
            "begin": 27120,
            "end": 28603,
            "name": "PUSH",
            "source": 0,
            "value": "80"
          },
          {
            "begin": 27120,
            "end": 28603,
            "name": "PUSH",
            "source": 0,
            "value": "40"
          },
          { "begin": 27120, "end": 28603, "name": "MSTORE", "source": 0 },
          { "begin": 27120, "end": 28603, "name": "CALLVALUE", "source": 0 },
          { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
          { "begin": 27120, "end": 28603, "name": "ISZERO", "source": 0 },
          {
            "begin": 27120,
            "end": 28603,
            "name": "PUSH [tag]",
            "source": 0,
            "value": "1"
          },
          { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
          {
            "begin": 27120,
            "end": 28603,
            "name": "PUSH",
            "source": 0,
            "value": "0"
          },
          { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
          { "begin": 27120, "end": 28603, "name": "REVERT", "source": 0 },
          {
            "begin": 27120,
            "end": 28603,
            "name": "tag",
            "source": 0,
            "value": "1"
          },
          { "begin": 27120, "end": 28603, "name": "JUMPDEST", "source": 0 },
          { "begin": 27120, "end": 28603, "name": "POP", "source": 0 },
          {
            "begin": 27120,
            "end": 28603,
            "name": "PUSH #[$]",
            "source": 0,
            "value": "0000000000000000000000000000000000000000000000000000000000000000"
          },
          { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
          {
            "begin": 27120,
            "end": 28603,
            "name": "PUSH [$]",
            "source": 0,
            "value": "0000000000000000000000000000000000000000000000000000000000000000"
          },
          {
            "begin": 27120,
            "end": 28603,
            "name": "PUSH",
            "source": 0,
            "value": "0"
          },
          { "begin": 27120, "end": 28603, "name": "CODECOPY", "source": 0 },
          {
            "begin": 27120,
            "end": 28603,
            "name": "PUSH",
            "source": 0,
            "value": "0"
          },
          { "begin": 27120, "end": 28603, "name": "RETURN", "source": 0 }
        ],
        ".data": {
          "0": {
            ".auxdata": "a26469706673582212206325e9db78a1717e9cb47f82e2464004aa65e12202c9794b31424da2c65d831064736f6c63430008130033",
            ".code": [
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "80"
              },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 27120, "end": 28603, "name": "MSTORE", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "CALLVALUE",
                "source": 0
              },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "ISZERO", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "1"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "REVERT", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "tag",
                "source": 0,
                "value": "1"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPDEST", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "POP", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 27120,
                "end": 28603,
                "name": "CALLDATASIZE",
                "source": 0
              },
              { "begin": 27120, "end": 28603, "name": "LT", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "2"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 27120,
                "end": 28603,
                "name": "CALLDATALOAD",
                "source": 0
              },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "E0"
              },
              { "begin": 27120, "end": 28603, "name": "SHR", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "B172B222"
              },
              { "begin": 27120, "end": 28603, "name": "GT", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "15"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "B172B222"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "9"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "D60B347F"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "10"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "E039F224"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "11"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "EB8D3F12"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "12"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "F951975A"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "13"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "FBE3C2CD"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "14"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "REVERT", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "tag",
                "source": 0,
                "value": "15"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPDEST", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "1A90A219"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "3"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "1CFE7951"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "4"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "2C3C02A4"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "5"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "4CF842B5"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "6"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "64D42B17"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "7"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "9A8A0592"
              },
              { "begin": 27120, "end": 28603, "name": "EQ", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "8"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPI", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "tag",
                "source": 0,
                "value": "2"
              },
              { "begin": 27120, "end": 28603, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27120,
                "end": 28603,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 27120, "end": 28603, "name": "DUP1", "source": 0 },
              { "begin": 27120, "end": 28603, "name": "REVERT", "source": 0 },
              {
                "begin": 28385,
                "end": 28478,
                "name": "tag",
                "source": 0,
                "value": "3"
              },
              { "begin": 28385, "end": 28478, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28454,
                "end": 28471,
                "name": "PUSH",
                "source": 0,
                "value": "7"
              },
              { "begin": 28454, "end": 28471, "name": "SLOAD", "source": 0 },
              {
                "begin": 28385,
                "end": 28478,
                "name": "tag",
                "source": 0,
                "value": "16"
              },
              { "begin": 28385, "end": 28478, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28385,
                "end": 28478,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 28385, "end": 28478, "name": "MLOAD", "source": 0 },
              { "begin": 160, "end": 185, "name": "SWAP1", "source": 1 },
              { "begin": 160, "end": 185, "name": "DUP2", "source": 1 },
              { "begin": 160, "end": 185, "name": "MSTORE", "source": 1 },
              {
                "begin": 148,
                "end": 150,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 133, "end": 151, "name": "ADD", "source": 1 },
              {
                "begin": 28385,
                "end": 28478,
                "name": "tag",
                "source": 0,
                "value": "18"
              },
              { "begin": 28385, "end": 28478, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28385,
                "end": 28478,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 28385, "end": 28478, "name": "MLOAD", "source": 0 },
              { "begin": 28385, "end": 28478, "name": "DUP1", "source": 0 },
              { "begin": 28385, "end": 28478, "name": "SWAP2", "source": 0 },
              { "begin": 28385, "end": 28478, "name": "SUB", "source": 0 },
              { "begin": 28385, "end": 28478, "name": "SWAP1", "source": 0 },
              { "begin": 28385, "end": 28478, "name": "RETURN", "source": 0 },
              {
                "begin": 27309,
                "end": 27423,
                "name": "tag",
                "source": 0,
                "value": "4"
              },
              { "begin": 27309, "end": 27423, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27393,
                "end": 27416,
                "name": "PUSH",
                "source": 0,
                "value": "3"
              },
              { "begin": 27393, "end": 27416, "name": "SLOAD", "source": 0 },
              {
                "begin": 27393,
                "end": 27416,
                "name": "PUSH",
                "source": 0,
                "value": "FFFFFFFF"
              },
              { "begin": 27393, "end": 27416, "name": "AND", "source": 0 },
              {
                "begin": 27309,
                "end": 27423,
                "name": "tag",
                "source": 0,
                "value": "20"
              },
              { "begin": 27309, "end": 27423, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27309,
                "end": 27423,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 27309, "end": 27423, "name": "MLOAD", "source": 0 },
              {
                "begin": 370,
                "end": 380,
                "name": "PUSH",
                "source": 1,
                "value": "FFFFFFFF"
              },
              { "begin": 358, "end": 381, "name": "SWAP1", "source": 1 },
              { "begin": 358, "end": 381, "name": "SWAP2", "source": 1 },
              { "begin": 358, "end": 381, "name": "AND", "source": 1 },
              { "begin": 340, "end": 382, "name": "DUP2", "source": 1 },
              { "begin": 340, "end": 382, "name": "MSTORE", "source": 1 },
              {
                "begin": 328,
                "end": 330,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 313, "end": 331, "name": "ADD", "source": 1 },
              {
                "begin": 27309,
                "end": 27423,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "18"
              },
              { "begin": 196, "end": 388, "name": "JUMP", "source": 1 },
              {
                "begin": 27544,
                "end": 27697,
                "name": "tag",
                "source": 0,
                "value": "5"
              },
              { "begin": 27544, "end": 27697, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27544,
                "end": 27697,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "24"
              },
              {
                "begin": 27544,
                "end": 27697,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "25"
              },
              {
                "begin": 27544,
                "end": 27697,
                "name": "CALLDATASIZE",
                "source": 0
              },
              {
                "begin": 27544,
                "end": 27697,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 27544,
                "end": 27697,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "26"
              },
              {
                "begin": 27544,
                "end": 27697,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 27544,
                "end": 27697,
                "name": "tag",
                "source": 0,
                "value": "25"
              },
              { "begin": 27544, "end": 27697, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27629,
                "end": 27633,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 27652, "end": 27690, "name": "SWAP1", "source": 0 },
              { "begin": 27652, "end": 27690, "name": "DUP2", "source": 0 },
              { "begin": 27652, "end": 27690, "name": "MSTORE", "source": 0 },
              {
                "begin": 27652,
                "end": 27684,
                "name": "PUSH",
                "source": 0,
                "value": "5"
              },
              {
                "begin": 27652,
                "end": 27690,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              { "begin": 27652, "end": 27690, "name": "MSTORE", "source": 0 },
              {
                "begin": 27652,
                "end": 27690,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 27652, "end": 27690, "name": "SWAP1", "source": 0 },
              {
                "begin": 27652,
                "end": 27690,
                "name": "KECCAK256",
                "source": 0
              },
              { "begin": 27652, "end": 27690, "name": "SLOAD", "source": 0 },
              {
                "begin": 27652,
                "end": 27690,
                "name": "PUSH",
                "source": 0,
                "value": "FF"
              },
              { "begin": 27652, "end": 27690, "name": "AND", "source": 0 },
              { "begin": 27652, "end": 27690, "name": "SWAP1", "source": 0 },
              { "begin": 27544, "end": 27697, "name": "JUMP", "source": 0 },
              {
                "begin": 27544,
                "end": 27697,
                "name": "tag",
                "source": 0,
                "value": "24"
              },
              { "begin": 27544, "end": 27697, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27544,
                "end": 27697,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 27544, "end": 27697, "name": "MLOAD", "source": 0 },
              { "begin": 743, "end": 757, "name": "SWAP1", "source": 1 },
              { "begin": 743, "end": 757, "name": "ISZERO", "source": 1 },
              { "begin": 736, "end": 758, "name": "ISZERO", "source": 1 },
              { "begin": 718, "end": 759, "name": "DUP2", "source": 1 },
              { "begin": 718, "end": 759, "name": "MSTORE", "source": 1 },
              {
                "begin": 706,
                "end": 708,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 691, "end": 709, "name": "ADD", "source": 1 },
              {
                "begin": 27544,
                "end": 27697,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "18"
              },
              { "begin": 578, "end": 765, "name": "JUMP", "source": 1 },
              {
                "begin": 28484,
                "end": 28601,
                "name": "tag",
                "source": 0,
                "value": "6"
              },
              { "begin": 28484, "end": 28601, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28484,
                "end": 28601,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "30"
              },
              {
                "begin": 28484,
                "end": 28601,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "31"
              },
              {
                "begin": 28484,
                "end": 28601,
                "name": "CALLDATASIZE",
                "source": 0
              },
              {
                "begin": 28484,
                "end": 28601,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 28484,
                "end": 28601,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "32"
              },
              {
                "begin": 28484,
                "end": 28601,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 28484,
                "end": 28601,
                "name": "tag",
                "source": 0,
                "value": "31"
              },
              { "begin": 28484, "end": 28601, "name": "JUMPDEST", "source": 0 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              { "begin": -1, "end": -1, "name": "SHL", "source": -1 },
              { "begin": -1, "end": -1, "name": "SUB", "source": -1 },
              { "begin": 28569, "end": 28594, "name": "AND", "source": 0 },
              {
                "begin": 28544,
                "end": 28550,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 28569, "end": 28594, "name": "SWAP1", "source": 0 },
              { "begin": 28569, "end": 28594, "name": "DUP2", "source": 0 },
              { "begin": 28569, "end": 28594, "name": "MSTORE", "source": 0 },
              {
                "begin": 28569,
                "end": 28585,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 28569,
                "end": 28594,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              { "begin": 28569, "end": 28594, "name": "MSTORE", "source": 0 },
              {
                "begin": 28569,
                "end": 28594,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 28569, "end": 28594, "name": "SWAP1", "source": 0 },
              {
                "begin": 28569,
                "end": 28594,
                "name": "KECCAK256",
                "source": 0
              },
              { "begin": 28569, "end": 28594, "name": "SLOAD", "source": 0 },
              {
                "begin": 28569,
                "end": 28594,
                "name": "PUSH",
                "source": 0,
                "value": "FFFFFFFFFFFFFFFF"
              },
              { "begin": 28569, "end": 28594, "name": "AND", "source": 0 },
              { "begin": 28569, "end": 28594, "name": "SWAP1", "source": 0 },
              { "begin": 28484, "end": 28601, "name": "JUMP", "source": 0 },
              {
                "begin": 28484,
                "end": 28601,
                "name": "tag",
                "source": 0,
                "value": "30"
              },
              { "begin": 28484, "end": 28601, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28484,
                "end": 28601,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 28484, "end": 28601, "name": "MLOAD", "source": 0 },
              {
                "begin": 1235,
                "end": 1253,
                "name": "PUSH",
                "source": 1,
                "value": "FFFFFFFFFFFFFFFF"
              },
              { "begin": 1223, "end": 1254, "name": "SWAP1", "source": 1 },
              { "begin": 1223, "end": 1254, "name": "SWAP2", "source": 1 },
              { "begin": 1223, "end": 1254, "name": "AND", "source": 1 },
              { "begin": 1205, "end": 1255, "name": "DUP2", "source": 1 },
              { "begin": 1205, "end": 1255, "name": "MSTORE", "source": 1 },
              {
                "begin": 1193,
                "end": 1195,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 1178, "end": 1196, "name": "ADD", "source": 1 },
              {
                "begin": 28484,
                "end": 28601,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "18"
              },
              { "begin": 1061, "end": 1261, "name": "JUMP", "source": 1 },
              {
                "begin": 27937,
                "end": 28030,
                "name": "tag",
                "source": 0,
                "value": "7"
              },
              { "begin": 27937, "end": 28030, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28006,
                "end": 28023,
                "name": "PUSH",
                "source": 0,
                "value": "8"
              },
              { "begin": 28006, "end": 28023, "name": "SLOAD", "source": 0 },
              {
                "begin": 27937,
                "end": 28030,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "16"
              },
              { "begin": 27937, "end": 28030, "name": "JUMP", "source": 0 },
              {
                "begin": 27836,
                "end": 27931,
                "name": "tag",
                "source": 0,
                "value": "8"
              },
              { "begin": 27836, "end": 27931, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27876,
                "end": 27882,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 27901, "end": 27924, "name": "SLOAD", "source": 0 },
              {
                "begin": 27901,
                "end": 27924,
                "name": "PUSH",
                "source": 0,
                "value": "FFFF"
              },
              { "begin": 27901, "end": 27924, "name": "AND", "source": 0 },
              {
                "begin": 27836,
                "end": 27931,
                "name": "tag",
                "source": 0,
                "value": "39"
              },
              { "begin": 27836, "end": 27931, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27836,
                "end": 27931,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 27836, "end": 27931, "name": "MLOAD", "source": 0 },
              {
                "begin": 1440,
                "end": 1446,
                "name": "PUSH",
                "source": 1,
                "value": "FFFF"
              },
              { "begin": 1428, "end": 1447, "name": "SWAP1", "source": 1 },
              { "begin": 1428, "end": 1447, "name": "SWAP2", "source": 1 },
              { "begin": 1428, "end": 1447, "name": "AND", "source": 1 },
              { "begin": 1410, "end": 1448, "name": "DUP2", "source": 1 },
              { "begin": 1410, "end": 1448, "name": "MSTORE", "source": 1 },
              {
                "begin": 1398,
                "end": 1400,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 1383, "end": 1401, "name": "ADD", "source": 1 },
              {
                "begin": 27836,
                "end": 27931,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "18"
              },
              { "begin": 1266, "end": 1454, "name": "JUMP", "source": 1 },
              {
                "begin": 28261,
                "end": 28379,
                "name": "tag",
                "source": 0,
                "value": "9"
              },
              { "begin": 28261, "end": 28379, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28338,
                "end": 28372,
                "name": "PUSH",
                "source": 0,
                "value": "1"
              },
              { "begin": 28338, "end": 28372, "name": "SLOAD", "source": 0 },
              {
                "begin": 28261,
                "end": 28379,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "16"
              },
              { "begin": 28261, "end": 28379, "name": "JUMP", "source": 0 },
              {
                "begin": 27703,
                "end": 27830,
                "name": "tag",
                "source": 0,
                "value": "10"
              },
              { "begin": 27703, "end": 27830, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27703,
                "end": 27830,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "24"
              },
              {
                "begin": 27703,
                "end": 27830,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "48"
              },
              {
                "begin": 27703,
                "end": 27830,
                "name": "CALLDATASIZE",
                "source": 0
              },
              {
                "begin": 27703,
                "end": 27830,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 27703,
                "end": 27830,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "32"
              },
              {
                "begin": 27703,
                "end": 27830,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 27703,
                "end": 27830,
                "name": "tag",
                "source": 0,
                "value": "48"
              },
              { "begin": 27703, "end": 27830, "name": "JUMPDEST", "source": 0 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              { "begin": -1, "end": -1, "name": "SHL", "source": -1 },
              { "begin": -1, "end": -1, "name": "SUB", "source": -1 },
              { "begin": 27784, "end": 27823, "name": "AND", "source": 0 },
              {
                "begin": 27761,
                "end": 27765,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 27784, "end": 27823, "name": "SWAP1", "source": 0 },
              { "begin": 27784, "end": 27823, "name": "DUP2", "source": 0 },
              { "begin": 27784, "end": 27823, "name": "MSTORE", "source": 0 },
              {
                "begin": 27784,
                "end": 27817,
                "name": "PUSH",
                "source": 0,
                "value": "6"
              },
              {
                "begin": 27784,
                "end": 27823,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              { "begin": 27784, "end": 27823, "name": "MSTORE", "source": 0 },
              {
                "begin": 27784,
                "end": 27823,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 27784, "end": 27823, "name": "SWAP1", "source": 0 },
              {
                "begin": 27784,
                "end": 27823,
                "name": "KECCAK256",
                "source": 0
              },
              { "begin": 27784, "end": 27823, "name": "SLOAD", "source": 0 },
              {
                "begin": 27784,
                "end": 27823,
                "name": "PUSH",
                "source": 0,
                "value": "FF"
              },
              { "begin": 27784, "end": 27823, "name": "AND", "source": 0 },
              { "begin": 27784, "end": 27823, "name": "SWAP1", "source": 0 },
              { "begin": 27703, "end": 27830, "name": "JUMP", "source": 0 },
              {
                "begin": 28036,
                "end": 28134,
                "name": "tag",
                "source": 0,
                "value": "11"
              },
              { "begin": 28036, "end": 28134, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28036,
                "end": 28134,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "24"
              },
              {
                "begin": 28036,
                "end": 28134,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "52"
              },
              {
                "begin": 28036,
                "end": 28134,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 27429,
                "end": 27538,
                "name": "tag",
                "source": 0,
                "value": "12"
              },
              { "begin": 27429, "end": 27538, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27507,
                "end": 27531,
                "name": "PUSH",
                "source": 0,
                "value": "3"
              },
              { "begin": 27507, "end": 27531, "name": "SLOAD", "source": 0 },
              {
                "begin": 27507,
                "end": 27531,
                "name": "PUSH",
                "source": 0,
                "value": "100000000"
              },
              { "begin": 27507, "end": 27531, "name": "SWAP1", "source": 0 },
              { "begin": 27507, "end": 27531, "name": "DIV", "source": 0 },
              {
                "begin": 27507,
                "end": 27531,
                "name": "PUSH",
                "source": 0,
                "value": "FFFFFFFF"
              },
              { "begin": 27507, "end": 27531, "name": "AND", "source": 0 },
              {
                "begin": 27429,
                "end": 27538,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "20"
              },
              { "begin": 27429, "end": 27538, "name": "JUMP", "source": 0 },
              {
                "begin": 27152,
                "end": 27303,
                "name": "tag",
                "source": 0,
                "value": "13"
              },
              { "begin": 27152, "end": 27303, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27152,
                "end": 27303,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "57"
              },
              {
                "begin": 27152,
                "end": 27303,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "58"
              },
              {
                "begin": 27152,
                "end": 27303,
                "name": "CALLDATASIZE",
                "source": 0
              },
              {
                "begin": 27152,
                "end": 27303,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 27152,
                "end": 27303,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "59"
              },
              {
                "begin": 27152,
                "end": 27303,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 27152,
                "end": 27303,
                "name": "tag",
                "source": 0,
                "value": "58"
              },
              { "begin": 27152, "end": 27303, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27152,
                "end": 27303,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "60"
              },
              {
                "begin": 27152,
                "end": 27303,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 27152,
                "end": 27303,
                "name": "tag",
                "source": 0,
                "value": "57"
              },
              { "begin": 27152, "end": 27303, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 27152,
                "end": 27303,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 27152, "end": 27303, "name": "MLOAD", "source": 0 },
              {
                "begin": 27152,
                "end": 27303,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "18"
              },
              { "begin": 27152, "end": 27303, "name": "SWAP2", "source": 0 },
              { "begin": 27152, "end": 27303, "name": "SWAP1", "source": 0 },
              {
                "begin": 27152,
                "end": 27303,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "62"
              },
              {
                "begin": 27152,
                "end": 27303,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 28140,
                "end": 28255,
                "name": "tag",
                "source": 0,
                "value": "14"
              },
              { "begin": 28140, "end": 28255, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28190,
                "end": 28196,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 28215, "end": 28248, "name": "SLOAD", "source": 0 },
              {
                "begin": 28215,
                "end": 28248,
                "name": "PUSH",
                "source": 0,
                "value": "10000"
              },
              { "begin": 28215, "end": 28248, "name": "SWAP1", "source": 0 },
              { "begin": 28215, "end": 28248, "name": "DIV", "source": 0 },
              {
                "begin": 28215,
                "end": 28248,
                "name": "PUSH",
                "source": 0,
                "value": "FFFF"
              },
              { "begin": 28215, "end": 28248, "name": "AND", "source": 0 },
              {
                "begin": 28140,
                "end": 28255,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "39"
              },
              { "begin": 28140, "end": 28255, "name": "JUMP", "source": 0 },
              {
                "begin": 28036,
                "end": 28134,
                "name": "tag",
                "source": 0,
                "value": "52"
              },
              { "begin": 28036, "end": 28134, "name": "JUMPDEST", "source": 0 },
              {
                "begin": 28075,
                "end": 28079,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 28114, "end": 28127, "name": "CHAINID", "source": 0 },
              {
                "begin": 28098,
                "end": 28110,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "75"
              },
              {
                "begin": 28006,
                "end": 28023,
                "name": "PUSH",
                "source": 0,
                "value": "8"
              },
              { "begin": 28006, "end": 28023, "name": "SLOAD", "source": 0 },
              { "begin": 28006, "end": 28023, "name": "SWAP1", "source": 0 },
              { "begin": 27937, "end": 28030, "name": "JUMP", "source": 0 },
              {
                "begin": 28098,
                "end": 28110,
                "name": "tag",
                "source": 0,
                "value": "75"
              },
              { "begin": 28098, "end": 28110, "name": "JUMPDEST", "source": 0 },
              { "begin": 28098, "end": 28127, "name": "EQ", "source": 0 },
              { "begin": 28098, "end": 28127, "name": "ISZERO", "source": 0 },
              { "begin": 28091, "end": 28127, "name": "SWAP1", "source": 0 },
              { "begin": 28091, "end": 28127, "name": "POP", "source": 0 },
              { "begin": 28036, "end": 28134, "name": "SWAP1", "source": 0 },
              {
                "begin": 28036,
                "end": 28134,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 27152,
                "end": 27303,
                "name": "tag",
                "source": 0,
                "value": "60"
              },
              { "begin": 27152, "end": 27303, "name": "JUMPDEST", "source": 0 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "40"
              },
              { "begin": -1, "end": -1, "name": "DUP1", "source": -1 },
              { "begin": -1, "end": -1, "name": "MLOAD", "source": -1 },
              { "begin": -1, "end": -1, "name": "DUP1", "source": -1 },
              { "begin": -1, "end": -1, "name": "DUP3", "source": -1 },
              { "begin": -1, "end": -1, "name": "ADD", "source": -1 },
              { "begin": -1, "end": -1, "name": "DUP3", "source": -1 },
              { "begin": -1, "end": -1, "name": "MSTORE", "source": -1 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "60"
              },
              { "begin": -1, "end": -1, "name": "DUP1", "source": -1 },
              { "begin": -1, "end": -1, "name": "DUP3", "source": -1 },
              { "begin": -1, "end": -1, "name": "MSTORE", "source": -1 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "20"
              },
              { "begin": -1, "end": -1, "name": "DUP1", "source": -1 },
              { "begin": -1, "end": -1, "name": "DUP5", "source": -1 },
              { "begin": -1, "end": -1, "name": "ADD", "source": -1 },
              { "begin": -1, "end": -1, "name": "DUP3", "source": -1 },
              { "begin": -1, "end": -1, "name": "SWAP1", "source": -1 },
              { "begin": -1, "end": -1, "name": "MSTORE", "source": -1 },
              {
                "begin": 27270,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "FFFFFFFF"
              },
              { "begin": 27270, "end": 27296, "name": "DUP7", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "AND", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "DUP3", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "MSTORE", "source": 0 },
              {
                "begin": 27270,
                "end": 27289,
                "name": "PUSH",
                "source": 0,
                "value": "2"
              },
              { "begin": 27270, "end": 27296, "name": "DUP2", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "MSTORE", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "SWAP1", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "DUP5", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "SWAP1", "source": 0 },
              {
                "begin": 27270,
                "end": 27296,
                "name": "KECCAK256",
                "source": 0
              },
              { "begin": 27263, "end": 27296, "name": "DUP5", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "MLOAD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SLOAD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP3", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP4", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "MUL", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP5", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP7", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "MSTORE", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP5", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP6", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP3", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "MSTORE", "source": 0 },
              { "begin": -1, "end": -1, "name": "SWAP4", "source": -1 },
              { "begin": -1, "end": -1, "name": "SWAP5", "source": -1 },
              { "begin": 27263, "end": 27296, "name": "SWAP4", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "SWAP1", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "SWAP3", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP5", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP3", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "DUP5", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "SWAP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP5", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27270, "end": 27296, "name": "DUP3", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP3", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP1", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ISZERO", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "80"
              },
              { "begin": 27263, "end": 27296, "name": "JUMPI", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              { "begin": 27263, "end": 27296, "name": "MUL", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP3", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP1", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              { "begin": 27263, "end": 27296, "name": "MSTORE", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 27263,
                "end": 27296,
                "name": "KECCAK256",
                "source": 0
              },
              { "begin": 27263, "end": 27296, "name": "SWAP1", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "tag",
                "source": 0,
                "value": "81"
              },
              { "begin": 27263, "end": 27296, "name": "JUMPDEST", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SLOAD", "source": 0 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              { "begin": -1, "end": -1, "name": "SHL", "source": -1 },
              { "begin": -1, "end": -1, "name": "SUB", "source": -1 },
              { "begin": 27263, "end": 27296, "name": "AND", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "MSTORE", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "1"
              },
              { "begin": 27263, "end": 27296, "name": "SWAP1", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP1", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP1", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP4", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "GT", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "81"
              },
              { "begin": 27263, "end": 27296, "name": "JUMPI", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "tag",
                "source": 0,
                "value": "80"
              },
              { "begin": 27263, "end": 27296, "name": "JUMPDEST", "source": 0 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              { "begin": 27263, "end": 27296, "name": "SWAP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "DUP4", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "MSTORE", "source": 0 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "1"
              },
              { "begin": 27263, "end": 27296, "name": "SWAP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP1", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SLOAD", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "FFFFFFFF"
              },
              { "begin": 27263, "end": 27296, "name": "AND", "source": 0 },
              {
                "begin": 27263,
                "end": 27296,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              { "begin": 27263, "end": 27296, "name": "SWAP1", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP2", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "ADD", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "MSTORE", "source": 0 },
              { "begin": 27263, "end": 27296, "name": "SWAP3", "source": 0 },
              { "begin": 27152, "end": 27303, "name": "SWAP2", "source": 0 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              {
                "begin": 27152,
                "end": 27303,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 393,
                "end": 573,
                "name": "tag",
                "source": 1,
                "value": "26"
              },
              { "begin": 393, "end": 573, "name": "JUMPDEST", "source": 1 },
              {
                "begin": 452,
                "end": 458,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 505,
                "end": 507,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 493, "end": 502, "name": "DUP3", "source": 1 },
              { "begin": 484, "end": 491, "name": "DUP5", "source": 1 },
              { "begin": 480, "end": 503, "name": "SUB", "source": 1 },
              { "begin": 476, "end": 508, "name": "SLT", "source": 1 },
              { "begin": 473, "end": 525, "name": "ISZERO", "source": 1 },
              {
                "begin": 473,
                "end": 525,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "87"
              },
              { "begin": 473, "end": 525, "name": "JUMPI", "source": 1 },
              {
                "begin": 521,
                "end": 522,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              { "begin": 518, "end": 519, "name": "DUP1", "source": 1 },
              { "begin": 511, "end": 523, "name": "REVERT", "source": 1 },
              {
                "begin": 473,
                "end": 525,
                "name": "tag",
                "source": 1,
                "value": "87"
              },
              { "begin": 473, "end": 525, "name": "JUMPDEST", "source": 1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              { "begin": 544, "end": 567, "name": "CALLDATALOAD", "source": 1 },
              { "begin": 544, "end": 567, "name": "SWAP2", "source": 1 },
              { "begin": 393, "end": 573, "name": "SWAP1", "source": 1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              {
                "begin": 393,
                "end": 573,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 770,
                "end": 1056,
                "name": "tag",
                "source": 1,
                "value": "32"
              },
              { "begin": 770, "end": 1056, "name": "JUMPDEST", "source": 1 },
              {
                "begin": 829,
                "end": 835,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 882,
                "end": 884,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 870, "end": 879, "name": "DUP3", "source": 1 },
              { "begin": 861, "end": 868, "name": "DUP5", "source": 1 },
              { "begin": 857, "end": 880, "name": "SUB", "source": 1 },
              { "begin": 853, "end": 885, "name": "SLT", "source": 1 },
              { "begin": 850, "end": 902, "name": "ISZERO", "source": 1 },
              {
                "begin": 850,
                "end": 902,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "90"
              },
              { "begin": 850, "end": 902, "name": "JUMPI", "source": 1 },
              {
                "begin": 898,
                "end": 899,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              { "begin": 895, "end": 896, "name": "DUP1", "source": 1 },
              { "begin": 888, "end": 900, "name": "REVERT", "source": 1 },
              {
                "begin": 850,
                "end": 902,
                "name": "tag",
                "source": 1,
                "value": "90"
              },
              { "begin": 850, "end": 902, "name": "JUMPDEST", "source": 1 },
              { "begin": 924, "end": 947, "name": "DUP2", "source": 1 },
              { "begin": 924, "end": 947, "name": "CALLDATALOAD", "source": 1 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              { "begin": -1, "end": -1, "name": "SHL", "source": -1 },
              { "begin": -1, "end": -1, "name": "SUB", "source": -1 },
              { "begin": 976, "end": 1007, "name": "DUP2", "source": 1 },
              { "begin": 976, "end": 1007, "name": "AND", "source": 1 },
              { "begin": 966, "end": 1008, "name": "DUP2", "source": 1 },
              { "begin": 966, "end": 1008, "name": "EQ", "source": 1 },
              {
                "begin": 956,
                "end": 1026,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "91"
              },
              { "begin": 956, "end": 1026, "name": "JUMPI", "source": 1 },
              {
                "begin": 1022,
                "end": 1023,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              { "begin": 1019, "end": 1020, "name": "DUP1", "source": 1 },
              { "begin": 1012, "end": 1024, "name": "REVERT", "source": 1 },
              {
                "begin": 956,
                "end": 1026,
                "name": "tag",
                "source": 1,
                "value": "91"
              },
              { "begin": 956, "end": 1026, "name": "JUMPDEST", "source": 1 },
              { "begin": 1045, "end": 1050, "name": "SWAP4", "source": 1 },
              { "begin": 770, "end": 1056, "name": "SWAP3", "source": 1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              { "begin": -1, "end": -1, "name": "POP", "source": -1 },
              {
                "begin": 770,
                "end": 1056,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 1641,
                "end": 1917,
                "name": "tag",
                "source": 1,
                "value": "59"
              },
              { "begin": 1641, "end": 1917, "name": "JUMPDEST", "source": 1 },
              {
                "begin": 1699,
                "end": 1705,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 1752,
                "end": 1754,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 1740, "end": 1749, "name": "DUP3", "source": 1 },
              { "begin": 1731, "end": 1738, "name": "DUP5", "source": 1 },
              { "begin": 1727, "end": 1750, "name": "SUB", "source": 1 },
              { "begin": 1723, "end": 1755, "name": "SLT", "source": 1 },
              { "begin": 1720, "end": 1772, "name": "ISZERO", "source": 1 },
              {
                "begin": 1720,
                "end": 1772,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "96"
              },
              { "begin": 1720, "end": 1772, "name": "JUMPI", "source": 1 },
              {
                "begin": 1768,
                "end": 1769,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              { "begin": 1765, "end": 1766, "name": "DUP1", "source": 1 },
              { "begin": 1758, "end": 1770, "name": "REVERT", "source": 1 },
              {
                "begin": 1720,
                "end": 1772,
                "name": "tag",
                "source": 1,
                "value": "96"
              },
              { "begin": 1720, "end": 1772, "name": "JUMPDEST", "source": 1 },
              { "begin": 1807, "end": 1816, "name": "DUP2", "source": 1 },
              {
                "begin": 1794,
                "end": 1817,
                "name": "CALLDATALOAD",
                "source": 1
              },
              {
                "begin": 1857,
                "end": 1867,
                "name": "PUSH",
                "source": 1,
                "value": "FFFFFFFF"
              },
              { "begin": 1850, "end": 1855, "name": "DUP2", "source": 1 },
              { "begin": 1846, "end": 1868, "name": "AND", "source": 1 },
              { "begin": 1839, "end": 1844, "name": "DUP2", "source": 1 },
              { "begin": 1836, "end": 1869, "name": "EQ", "source": 1 },
              {
                "begin": 1826,
                "end": 1887,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "91"
              },
              { "begin": 1826, "end": 1887, "name": "JUMPI", "source": 1 },
              {
                "begin": 1883,
                "end": 1884,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              { "begin": 1880, "end": 1881, "name": "DUP1", "source": 1 },
              { "begin": 1873, "end": 1885, "name": "REVERT", "source": 1 },
              {
                "begin": 1922,
                "end": 2758,
                "name": "tag",
                "source": 1,
                "value": "62"
              },
              { "begin": 1922, "end": 2758, "name": "JUMPDEST", "source": 1 },
              {
                "begin": 2097,
                "end": 2099,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              { "begin": 2108, "end": 2129, "name": "DUP1", "source": 1 },
              { "begin": 2108, "end": 2129, "name": "DUP3", "source": 1 },
              { "begin": 2108, "end": 2129, "name": "MSTORE", "source": 1 },
              { "begin": 2199, "end": 2212, "name": "DUP3", "source": 1 },
              { "begin": 2199, "end": 2212, "name": "MLOAD", "source": 1 },
              {
                "begin": 2248,
                "end": 2252,
                "name": "PUSH",
                "source": 1,
                "value": "40"
              },
              { "begin": 2228, "end": 2246, "name": "DUP4", "source": 1 },
              { "begin": 2228, "end": 2246, "name": "DUP4", "source": 1 },
              { "begin": 2228, "end": 2246, "name": "ADD", "source": 1 },
              { "begin": 2221, "end": 2253, "name": "MSTORE", "source": 1 },
              { "begin": 2302, "end": 2321, "name": "DUP1", "source": 1 },
              { "begin": 2302, "end": 2321, "name": "MLOAD", "source": 1 },
              {
                "begin": 2167,
                "end": 2169,
                "name": "PUSH",
                "source": 1,
                "value": "60"
              },
              { "begin": 2152, "end": 2170, "name": "DUP5", "source": 1 },
              { "begin": 2152, "end": 2170, "name": "ADD", "source": 1 },
              { "begin": 2330, "end": 2352, "name": "DUP2", "source": 1 },
              { "begin": 2330, "end": 2352, "name": "SWAP1", "source": 1 },
              { "begin": 2330, "end": 2352, "name": "MSTORE", "source": 1 },
              {
                "begin": 2068,
                "end": 2072,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              { "begin": 2068, "end": 2072, "name": "SWAP3", "source": 1 },
              { "begin": 2097, "end": 2099, "name": "SWAP2", "source": 1 },
              { "begin": 2410, "end": 2431, "name": "DUP3", "source": 1 },
              { "begin": 2410, "end": 2431, "name": "ADD", "source": 1 },
              { "begin": 2410, "end": 2431, "name": "SWAP1", "source": 1 },
              { "begin": 2068, "end": 2072, "name": "DUP4", "source": 1 },
              { "begin": 2068, "end": 2072, "name": "SWAP1", "source": 1 },
              {
                "begin": 2383,
                "end": 2386,
                "name": "PUSH",
                "source": 1,
                "value": "80"
              },
              { "begin": 2368, "end": 2387, "name": "DUP7", "source": 1 },
              { "begin": 2368, "end": 2387, "name": "ADD", "source": 1 },
              { "begin": 2368, "end": 2387, "name": "SWAP1", "source": 1 },
              {
                "begin": 2459,
                "end": 2654,
                "name": "tag",
                "source": 1,
                "value": "99"
              },
              { "begin": 2459, "end": 2654, "name": "JUMPDEST", "source": 1 },
              { "begin": 2473, "end": 2479, "name": "DUP1", "source": 1 },
              { "begin": 2470, "end": 2471, "name": "DUP4", "source": 1 },
              { "begin": 2467, "end": 2480, "name": "LT", "source": 1 },
              { "begin": 2459, "end": 2654, "name": "ISZERO", "source": 1 },
              {
                "begin": 2459,
                "end": 2654,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "101"
              },
              { "begin": 2459, "end": 2654, "name": "JUMPI", "source": 1 },
              { "begin": 2538, "end": 2551, "name": "DUP4", "source": 1 },
              { "begin": 2538, "end": 2551, "name": "MLOAD", "source": 1 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              { "begin": -1, "end": -1, "name": "SHL", "source": -1 },
              { "begin": -1, "end": -1, "name": "SUB", "source": -1 },
              { "begin": 2534, "end": 2573, "name": "AND", "source": 1 },
              { "begin": 2522, "end": 2574, "name": "DUP3", "source": 1 },
              { "begin": 2522, "end": 2574, "name": "MSTORE", "source": 1 },
              { "begin": 2629, "end": 2644, "name": "SWAP3", "source": 1 },
              { "begin": 2629, "end": 2644, "name": "DUP5", "source": 1 },
              { "begin": 2629, "end": 2644, "name": "ADD", "source": 1 },
              { "begin": 2629, "end": 2644, "name": "SWAP3", "source": 1 },
              {
                "begin": 2570,
                "end": 2571,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              { "begin": 2488, "end": 2497, "name": "SWAP3", "source": 1 },
              { "begin": 2488, "end": 2497, "name": "SWAP1", "source": 1 },
              { "begin": 2488, "end": 2497, "name": "SWAP3", "source": 1 },
              { "begin": 2488, "end": 2497, "name": "ADD", "source": 1 },
              { "begin": 2488, "end": 2497, "name": "SWAP2", "source": 1 },
              { "begin": 2594, "end": 2606, "name": "SWAP1", "source": 1 },
              { "begin": 2594, "end": 2606, "name": "DUP5", "source": 1 },
              { "begin": 2594, "end": 2606, "name": "ADD", "source": 1 },
              { "begin": 2594, "end": 2606, "name": "SWAP1", "source": 1 },
              {
                "begin": 2459,
                "end": 2654,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "99"
              },
              { "begin": 2459, "end": 2654, "name": "JUMP", "source": 1 },
              {
                "begin": 2459,
                "end": 2654,
                "name": "tag",
                "source": 1,
                "value": "101"
              },
              { "begin": 2459, "end": 2654, "name": "JUMPDEST", "source": 1 },
              { "begin": 2463, "end": 2466, "name": "POP", "source": 1 },
              {
                "begin": 2720,
                "end": 2730,
                "name": "PUSH",
                "source": 1,
                "value": "FFFFFFFF"
              },
              { "begin": 2714, "end": 2716, "name": "DUP5", "source": 1 },
              { "begin": 2706, "end": 2712, "name": "DUP9", "source": 1 },
              { "begin": 2702, "end": 2717, "name": "ADD", "source": 1 },
              { "begin": 2696, "end": 2718, "name": "MLOAD", "source": 1 },
              { "begin": 2692, "end": 2731, "name": "AND", "source": 1 },
              {
                "begin": 2685,
                "end": 2689,
                "name": "PUSH",
                "source": 1,
                "value": "40"
              },
              { "begin": 2674, "end": 2683, "name": "DUP8", "source": 1 },
              { "begin": 2670, "end": 2690, "name": "ADD", "source": 1 },
              { "begin": 2663, "end": 2732, "name": "MSTORE", "source": 1 },
              { "begin": 2749, "end": 2752, "name": "DUP1", "source": 1 },
              { "begin": 2741, "end": 2752, "name": "SWAP5", "source": 1 },
              { "begin": 2741, "end": 2752, "name": "POP", "source": 1 },
              { "begin": 2741, "end": 2752, "name": "POP", "source": 1 },
              { "begin": 2741, "end": 2752, "name": "POP", "source": 1 },
              { "begin": 2741, "end": 2752, "name": "POP", "source": 1 },
              { "begin": 2741, "end": 2752, "name": "POP", "source": 1 },
              { "begin": 1922, "end": 2758, "name": "SWAP3", "source": 1 },
              { "begin": 1922, "end": 2758, "name": "SWAP2", "source": 1 },
              { "begin": 1922, "end": 2758, "name": "POP", "source": 1 },
              { "begin": 1922, "end": 2758, "name": "POP", "source": 1 },
              {
                "begin": 1922,
                "end": 2758,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              }
            ]
          }
        },
        "sourceList": ["main.sol", "#utility.yul"]
      },
      "methodIdentifiers": {
        "chainId()": "9a8a0592",
        "evmChainId()": "64d42b17",
        "getCurrentGuardianSetIndex()": "1cfe7951",
        "getGuardianSet(uint32)": "f951975a",
        "getGuardianSetExpiry()": "eb8d3f12",
        "governanceActionIsConsumed(bytes32)": "2c3c02a4",
        "governanceChainId()": "fbe3c2cd",
        "governanceContract()": "b172b222",
        "isFork()": "e039f224",
        "isInitialized(address)": "d60b347f",
        "messageFee()": "1a90a219",
        "nextSequence(address)": "4cf842b5"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentGuardianSetIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getGuardianSet\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"keys\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"}],\"internalType\":\"struct Structs.GuardianSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardianSetExpiry\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"governanceActionIsConsumed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"nextSequence\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"Getters\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0x2959208c45a08c76960ff3a7f53280b5ab92450166e0ab69ec4c90fd36566710\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://3cd79641f2184ce85d388f587e0ecca81190c6caa895471c5001a72eeb6326e9\",\"dweb:/ipfs/Qma5DCRzRDZ2tV97dX56UgugdtTxPg9sUrVnPX5Ljh1eyD\"]}},\"version\":1}",
    "storageLayout": {
      "storage": [
        {
          "astId": 975,
          "contract": "main.sol:Getters",
          "label": "_state",
          "offset": 0,
          "slot": "0",
          "type": "t_struct(WormholeState)971_storage"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_array(t_address)dyn_storage": {
          "base": "t_address",
          "encoding": "dynamic_array",
          "label": "address[]",
          "numberOfBytes": "32"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_bytes32": {
          "encoding": "inplace",
          "label": "bytes32",
          "numberOfBytes": "32"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_uint64)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint64)",
          "numberOfBytes": "32",
          "value": "t_uint64"
        },
        "t_mapping(t_bytes32,t_bool)": {
          "encoding": "mapping",
          "key": "t_bytes32",
          "label": "mapping(bytes32 => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_uint32,t_struct(GuardianSet)14_storage)": {
          "encoding": "mapping",
          "key": "t_uint32",
          "label": "mapping(uint32 => struct Structs.GuardianSet)",
          "numberOfBytes": "32",
          "value": "t_struct(GuardianSet)14_storage"
        },
        "t_struct(GuardianSet)14_storage": {
          "encoding": "inplace",
          "label": "struct Structs.GuardianSet",
          "members": [
            {
              "astId": 11,
              "contract": "main.sol:Getters",
              "label": "keys",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage"
            },
            {
              "astId": 13,
              "contract": "main.sol:Getters",
              "label": "expirationTime",
              "offset": 0,
              "slot": "1",
              "type": "t_uint32"
            }
          ],
          "numberOfBytes": "64"
        },
        "t_struct(Provider)8_storage": {
          "encoding": "inplace",
          "label": "struct Structs.Provider",
          "members": [
            {
              "astId": 3,
              "contract": "main.sol:Getters",
              "label": "chainId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint16"
            },
            {
              "astId": 5,
              "contract": "main.sol:Getters",
              "label": "governanceChainId",
              "offset": 2,
              "slot": "0",
              "type": "t_uint16"
            },
            {
              "astId": 7,
              "contract": "main.sol:Getters",
              "label": "governanceContract",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32"
            }
          ],
          "numberOfBytes": "64"
        },
        "t_struct(WormholeState)971_storage": {
          "encoding": "inplace",
          "label": "struct Storage.WormholeState",
          "members": [
            {
              "astId": 945,
              "contract": "main.sol:Getters",
              "label": "provider",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Provider)8_storage"
            },
            {
              "astId": 950,
              "contract": "main.sol:Getters",
              "label": "guardianSets",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint32,t_struct(GuardianSet)14_storage)"
            },
            {
              "astId": 952,
              "contract": "main.sol:Getters",
              "label": "guardianSetIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_uint32"
            },
            {
              "astId": 954,
              "contract": "main.sol:Getters",
              "label": "guardianSetExpiry",
              "offset": 4,
              "slot": "3",
              "type": "t_uint32"
            },
            {
              "astId": 958,
              "contract": "main.sol:Getters",
              "label": "sequences",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint64)"
            },
            {
              "astId": 962,
              "contract": "main.sol:Getters",
              "label": "consumedGovernanceActions",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_bool)"
            },
            {
              "astId": 966,
              "contract": "main.sol:Getters",
              "label": "initializedImplementations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)"
            },
            {
              "astId": 968,
              "contract": "main.sol:Getters",
              "label": "messageFee",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256"
            },
            {
              "astId": 970,
              "contract": "main.sol:Getters",
              "label": "evmChainId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "288"
        },
        "t_uint16": {
          "encoding": "inplace",
          "label": "uint16",
          "numberOfBytes": "2"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        },
        "t_uint32": {
          "encoding": "inplace",
          "label": "uint32",
          "numberOfBytes": "4"
        },
        "t_uint64": {
          "encoding": "inplace",
          "label": "uint64",
          "numberOfBytes": "8"
        }
      }
    },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "sourceCode": "/**\n *Submitted for verification at moonbase.moonscan.io on 2023-03-15\n */\n\n// SPDX-License-Identifier: Apache 2\n// File: contracts/Structs.sol\n\n// contracts/Structs.sol\n\npragma solidity ^0.8.0;\n\ninterface Structs {\n    struct Provider {\n        uint16 chainId;\n        uint16 governanceChainId;\n        bytes32 governanceContract;\n    }\n\n    struct GuardianSet {\n        address[] keys;\n        uint32 expirationTime;\n    }\n\n    struct Signature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint8 guardianIndex;\n    }\n\n    struct VM {\n        uint8 version;\n        uint32 timestamp;\n        uint32 nonce;\n        uint16 emitterChainId;\n        bytes32 emitterAddress;\n        uint64 sequence;\n        uint8 consistencyLevel;\n        bytes payload;\n        uint32 guardianSetIndex;\n        Signature[] signatures;\n        bytes32 hash;\n    }\n}\n\n// File: contracts/libraries/external/BytesLib.sol\n\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    ) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    ) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(\n                    add(tempBytes, lengthmod),\n                    mul(0x20, iszero(lengthmod))\n                )\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(\n                        add(\n                            add(_bytes, lengthmod),\n                            mul(0x20, iszero(lengthmod))\n                        ),\n                        _start\n                    )\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(\n                mload(add(add(_bytes, 0x20), _start)),\n                0x1000000000000000000000000\n            )\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(\n        bytes memory _bytes,\n        uint256 _start\n    ) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    ) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    ) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n\n// File: contracts/GovernanceStructs.sol\n\n// contracts/GovernanceStructs.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev `GovernanceStructs` defines a set of structs and parsing functions\n * for minimal struct validation\n */\ncontract GovernanceStructs {\n    using BytesLib for bytes;\n\n    enum GovernanceAction {\n        UpgradeContract,\n        UpgradeGuardianset\n    }\n\n    struct ContractUpgrade {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n        address newContract;\n    }\n\n    struct GuardianSetUpgrade {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n        Structs.GuardianSet newGuardianSet;\n        uint32 newGuardianSetIndex;\n    }\n\n    struct SetMessageFee {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n        uint256 messageFee;\n    }\n\n    struct TransferFees {\n        bytes32 module;\n        uint8 action;\n        uint16 chain;\n        uint256 amount;\n        bytes32 recipient;\n    }\n\n    struct RecoverChainId {\n        bytes32 module;\n        uint8 action;\n        uint256 evmChainId;\n        uint16 newChainId;\n    }\n\n    /// @dev Parse a contract upgrade (action 1) with minimal validation\n    function parseContractUpgrade(\n        bytes memory encodedUpgrade\n    ) public pure returns (ContractUpgrade memory cu) {\n        uint index = 0;\n\n        cu.module = encodedUpgrade.toBytes32(index);\n        index += 32;\n\n        cu.action = encodedUpgrade.toUint8(index);\n        index += 1;\n\n        require(cu.action == 1, \"invalid ContractUpgrade\");\n\n        cu.chain = encodedUpgrade.toUint16(index);\n        index += 2;\n\n        cu.newContract = address(\n            uint160(uint256(encodedUpgrade.toBytes32(index)))\n        );\n        index += 32;\n\n        require(encodedUpgrade.length == index, \"invalid ContractUpgrade\");\n    }\n\n    /// @dev Parse a guardianSet upgrade (action 2) with minimal validation\n    function parseGuardianSetUpgrade(\n        bytes memory encodedUpgrade\n    ) public pure returns (GuardianSetUpgrade memory gsu) {\n        uint index = 0;\n\n        gsu.module = encodedUpgrade.toBytes32(index);\n        index += 32;\n\n        gsu.action = encodedUpgrade.toUint8(index);\n        index += 1;\n\n        require(gsu.action == 2, \"invalid GuardianSetUpgrade\");\n\n        gsu.chain = encodedUpgrade.toUint16(index);\n        index += 2;\n\n        gsu.newGuardianSetIndex = encodedUpgrade.toUint32(index);\n        index += 4;\n\n        uint8 guardianLength = encodedUpgrade.toUint8(index);\n        index += 1;\n\n        gsu.newGuardianSet = Structs.GuardianSet({\n            keys: new address[](guardianLength),\n            expirationTime: 0\n        });\n\n        for (uint i = 0; i < guardianLength; i++) {\n            gsu.newGuardianSet.keys[i] = encodedUpgrade.toAddress(index);\n            index += 20;\n        }\n\n        require(encodedUpgrade.length == index, \"invalid GuardianSetUpgrade\");\n    }\n\n    /// @dev Parse a setMessageFee (action 3) with minimal validation\n    function parseSetMessageFee(\n        bytes memory encodedSetMessageFee\n    ) public pure returns (SetMessageFee memory smf) {\n        uint index = 0;\n\n        smf.module = encodedSetMessageFee.toBytes32(index);\n        index += 32;\n\n        smf.action = encodedSetMessageFee.toUint8(index);\n        index += 1;\n\n        require(smf.action == 3, \"invalid SetMessageFee\");\n\n        smf.chain = encodedSetMessageFee.toUint16(index);\n        index += 2;\n\n        smf.messageFee = encodedSetMessageFee.toUint256(index);\n        index += 32;\n\n        require(encodedSetMessageFee.length == index, \"invalid SetMessageFee\");\n    }\n\n    /// @dev Parse a transferFees (action 4) with minimal validation\n    function parseTransferFees(\n        bytes memory encodedTransferFees\n    ) public pure returns (TransferFees memory tf) {\n        uint index = 0;\n\n        tf.module = encodedTransferFees.toBytes32(index);\n        index += 32;\n\n        tf.action = encodedTransferFees.toUint8(index);\n        index += 1;\n\n        require(tf.action == 4, \"invalid TransferFees\");\n\n        tf.chain = encodedTransferFees.toUint16(index);\n        index += 2;\n\n        tf.amount = encodedTransferFees.toUint256(index);\n        index += 32;\n\n        tf.recipient = encodedTransferFees.toBytes32(index);\n        index += 32;\n\n        require(encodedTransferFees.length == index, \"invalid TransferFees\");\n    }\n\n    /// @dev Parse a recoverChainId (action 5) with minimal validation\n    function parseRecoverChainId(\n        bytes memory encodedRecoverChainId\n    ) public pure returns (RecoverChainId memory rci) {\n        uint index = 0;\n\n        rci.module = encodedRecoverChainId.toBytes32(index);\n        index += 32;\n\n        rci.action = encodedRecoverChainId.toUint8(index);\n        index += 1;\n\n        require(rci.action == 5, \"invalid RecoverChainId\");\n\n        rci.evmChainId = encodedRecoverChainId.toUint256(index);\n        index += 32;\n\n        rci.newChainId = encodedRecoverChainId.toUint16(index);\n        index += 2;\n\n        require(\n            encodedRecoverChainId.length == index,\n            \"invalid RecoverChainId\"\n        );\n    }\n}\n\n// File: contracts/State.sol\n\n// contracts/State.sol\n\npragma solidity ^0.8.0;\n\ncontract Events {\n    event LogGuardianSetChanged(\n        uint32 oldGuardianIndex,\n        uint32 newGuardianIndex\n    );\n\n    event LogMessagePublished(\n        address emitter_address,\n        uint32 nonce,\n        bytes payload\n    );\n}\n\ncontract Storage {\n    struct WormholeState {\n        Structs.Provider provider;\n        // Mapping of guardian_set_index => guardian set\n        mapping(uint32 => Structs.GuardianSet) guardianSets;\n        // Current active guardian set index\n        uint32 guardianSetIndex;\n        // Period for which a guardian set stays active after it has been replaced\n        uint32 guardianSetExpiry;\n        // Sequence numbers per emitter\n        mapping(address => uint64) sequences;\n        // Mapping of consumed governance actions\n        mapping(bytes32 => bool) consumedGovernanceActions;\n        // Mapping of initialized implementations\n        mapping(address => bool) initializedImplementations;\n        uint256 messageFee;\n        // EIP-155 Chain ID\n        uint256 evmChainId;\n    }\n}\n\ncontract State {\n    Storage.WormholeState _state;\n}\n\n// File: contracts/Getters.sol\n\n// contracts/Getters.sol\n\npragma solidity ^0.8.0;\n\ncontract Getters is State {\n    function getGuardianSet(\n        uint32 index\n    ) public view returns (Structs.GuardianSet memory) {\n        return _state.guardianSets[index];\n    }\n\n    function getCurrentGuardianSetIndex() public view returns (uint32) {\n        return _state.guardianSetIndex;\n    }\n\n    function getGuardianSetExpiry() public view returns (uint32) {\n        return _state.guardianSetExpiry;\n    }\n\n    function governanceActionIsConsumed(\n        bytes32 hash\n    ) public view returns (bool) {\n        return _state.consumedGovernanceActions[hash];\n    }\n\n    function isInitialized(address impl) public view returns (bool) {\n        return _state.initializedImplementations[impl];\n    }\n\n    function chainId() public view returns (uint16) {\n        return _state.provider.chainId;\n    }\n\n    function evmChainId() public view returns (uint256) {\n        return _state.evmChainId;\n    }\n\n    function isFork() public view returns (bool) {\n        return evmChainId() != block.chainid;\n    }\n\n    function governanceChainId() public view returns (uint16) {\n        return _state.provider.governanceChainId;\n    }\n\n    function governanceContract() public view returns (bytes32) {\n        return _state.provider.governanceContract;\n    }\n\n    function messageFee() public view returns (uint256) {\n        return _state.messageFee;\n    }\n\n    function nextSequence(address emitter) public view returns (uint64) {\n        return _state.sequences[emitter];\n    }\n}\n\n// File: contracts/Messages.sol\n\n// contracts/Messages.sol\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\ncontract Messages is Getters {\n    using BytesLib for bytes;\n\n    /// @dev parseAndVerifyVM serves to parse an encodedVM and wholy validate it for consumption\n    function parseAndVerifyVM(\n        bytes calldata encodedVM\n    )\n        public\n        view\n        returns (Structs.VM memory vm, bool valid, string memory reason)\n    {\n        vm = parseVM(encodedVM);\n        /// setting checkHash to false as we can trust the hash field in this case given that parseVM computes and then sets the hash field above\n        (valid, reason) = verifyVMInternal(vm, false);\n    }\n\n    /**\n     * @dev `verifyVM` serves to validate an arbitrary vm against a valid Guardian set\n     *  - it aims to make sure the VM is for a known guardianSet\n     *  - it aims to ensure the guardianSet is not expired\n     *  - it aims to ensure the VM has reached quorum\n     *  - it aims to verify the signatures provided against the guardianSet\n     *  - it aims to verify the hash field provided against the contents of the vm\n     */\n    function verifyVM(\n        Structs.VM memory vm\n    ) public view returns (bool valid, string memory reason) {\n        (valid, reason) = verifyVMInternal(vm, true);\n    }\n\n    /**\n     * @dev `verifyVMInternal` serves to validate an arbitrary vm against a valid Guardian set\n     * if checkHash is set then the hash field of the vm is verified against the hash of its contents\n     * in the case that the vm is securely parsed and the hash field can be trusted, checkHash can be set to false\n     * as the check would be redundant\n     */\n    function verifyVMInternal(\n        Structs.VM memory vm,\n        bool checkHash\n    ) internal view returns (bool valid, string memory reason) {\n        /// @dev Obtain the current guardianSet for the guardianSetIndex provided\n        Structs.GuardianSet memory guardianSet = getGuardianSet(\n            vm.guardianSetIndex\n        );\n\n        /**\n         * Verify that the hash field in the vm matches with the hash of the contents of the vm if checkHash is set\n         * WARNING: This hash check is critical to ensure that the vm.hash provided matches with the hash of the body.\n         * Without this check, it would not be safe to call verifyVM on it's own as vm.hash can be a valid signed hash\n         * but the body of the vm could be completely different from what was actually signed by the guardians\n         */\n        if (checkHash) {\n            bytes memory body = abi.encodePacked(\n                vm.timestamp,\n                vm.nonce,\n                vm.emitterChainId,\n                vm.emitterAddress,\n                vm.sequence,\n                vm.consistencyLevel,\n                vm.payload\n            );\n\n            bytes32 vmHash = keccak256(abi.encodePacked(keccak256(body)));\n\n            if (vmHash != vm.hash) {\n                return (false, \"vm.hash doesn't match body\");\n            }\n        }\n\n        /**\n         * @dev Checks whether the guardianSet has zero keys\n         * WARNING: This keys check is critical to ensure the guardianSet has keys present AND to ensure\n         * that guardianSet key size doesn't fall to zero and negatively impact quorum assessment.  If guardianSet\n         * key length is 0 and vm.signatures length is 0, this could compromise the integrity of both vm and\n         * signature verification.\n         */\n        if (guardianSet.keys.length == 0) {\n            return (false, \"invalid guardian set\");\n        }\n\n        /// @dev Checks if VM guardian set index matches the current index (unless the current set is expired).\n        if (\n            vm.guardianSetIndex != getCurrentGuardianSetIndex() &&\n            guardianSet.expirationTime < block.timestamp\n        ) {\n            return (false, \"guardian set has expired\");\n        }\n\n        /**\n         * @dev We're using a fixed point number transformation with 1 decimal to deal with rounding.\n         *   WARNING: This quorum check is critical to assessing whether we have enough Guardian signatures to validate a VM\n         *   if making any changes to this, obtain additional peer review. If guardianSet key length is 0 and\n         *   vm.signatures length is 0, this could compromise the integrity of both vm and signature verification.\n         */\n        if (vm.signatures.length < quorum(guardianSet.keys.length)) {\n            return (false, \"no quorum\");\n        }\n\n        /// @dev Verify the proposed vm.signatures against the guardianSet\n        (bool signaturesValid, string memory invalidReason) = verifySignatures(\n            vm.hash,\n            vm.signatures,\n            guardianSet\n        );\n        if (!signaturesValid) {\n            return (false, invalidReason);\n        }\n\n        /// If we are here, we've validated the VM is a valid multi-sig that matches the guardianSet.\n        return (true, \"\");\n    }\n\n    /**\n     * @dev verifySignatures serves to validate arbitrary sigatures against an arbitrary guardianSet\n     *  - it intentionally does not solve for expectations within guardianSet (you should use verifyVM if you need these protections)\n     *  - it intentioanlly does not solve for quorum (you should use verifyVM if you need these protections)\n     *  - it intentionally returns true when signatures is an empty set (you should use verifyVM if you need these protections)\n     */\n    function verifySignatures(\n        bytes32 hash,\n        Structs.Signature[] memory signatures,\n        Structs.GuardianSet memory guardianSet\n    ) public pure returns (bool valid, string memory reason) {\n        uint8 lastIndex = 0;\n        uint256 guardianCount = guardianSet.keys.length;\n        for (uint i = 0; i < signatures.length; i++) {\n            Structs.Signature memory sig = signatures[i];\n            address signatory = ecrecover(hash, sig.v, sig.r, sig.s);\n            // ecrecover returns 0 for invalid signatures. We explicitly require valid signatures to avoid unexpected\n            // behaviour due to the default storage slot value also being 0.\n            require(signatory != address(0), \"ecrecover failed with signature\");\n\n            /// Ensure that provided signature indices are ascending only\n            require(\n                i == 0 || sig.guardianIndex > lastIndex,\n                \"signature indices must be ascending\"\n            );\n            lastIndex = sig.guardianIndex;\n\n            /// @dev Ensure that the provided signature index is within the\n            /// bounds of the guardianSet. This is implicitly checked by the array\n            /// index operation below, so this check is technically redundant.\n            /// However, reverting explicitly here ensures that a bug is not\n            /// introduced accidentally later due to the nontrivial storage\n            /// semantics of solidity.\n            require(\n                sig.guardianIndex < guardianCount,\n                \"guardian index out of bounds\"\n            );\n\n            /// Check to see if the signer of the signature does not match a specific Guardian key at the provided index\n            if (signatory != guardianSet.keys[sig.guardianIndex]) {\n                return (false, \"VM signature invalid\");\n            }\n        }\n\n        /// If we are here, we've validated that the provided signatures are valid for the provided guardianSet\n        return (true, \"\");\n    }\n\n    /**\n     * @dev parseVM serves to parse an encodedVM into a vm struct\n     *  - it intentionally performs no validation functions, it simply parses raw into a struct\n     */\n    function parseVM(\n        bytes memory encodedVM\n    ) public pure virtual returns (Structs.VM memory vm) {\n        uint index = 0;\n\n        vm.version = encodedVM.toUint8(index);\n        index += 1;\n        // SECURITY: Note that currently the VM.version is not part of the hash\n        // and for reasons described below it cannot be made part of the hash.\n        // This means that this field's integrity is not protected and cannot be trusted.\n        // This is not a problem today since there is only one accepted version, but it\n        // could be a problem if we wanted to allow other versions in the future.\n        require(vm.version == 1, \"VM version incompatible\");\n\n        vm.guardianSetIndex = encodedVM.toUint32(index);\n        index += 4;\n\n        // Parse Signatures\n        uint256 signersLen = encodedVM.toUint8(index);\n        index += 1;\n        vm.signatures = new Structs.Signature[](signersLen);\n        for (uint i = 0; i < signersLen; i++) {\n            vm.signatures[i].guardianIndex = encodedVM.toUint8(index);\n            index += 1;\n\n            vm.signatures[i].r = encodedVM.toBytes32(index);\n            index += 32;\n            vm.signatures[i].s = encodedVM.toBytes32(index);\n            index += 32;\n            vm.signatures[i].v = encodedVM.toUint8(index) + 27;\n            index += 1;\n        }\n\n        /*\n        Hash the body\n\n        SECURITY: Do not change the way the hash of a VM is computed! \n        Changing it could result into two different hashes for the same observation. \n        But xDapps rely on the hash of an observation for replay protection.\n        */\n        bytes memory body = encodedVM.slice(index, encodedVM.length - index);\n        vm.hash = keccak256(abi.encodePacked(keccak256(body)));\n\n        // Parse the body\n        vm.timestamp = encodedVM.toUint32(index);\n        index += 4;\n\n        vm.nonce = encodedVM.toUint32(index);\n        index += 4;\n\n        vm.emitterChainId = encodedVM.toUint16(index);\n        index += 2;\n\n        vm.emitterAddress = encodedVM.toBytes32(index);\n        index += 32;\n\n        vm.sequence = encodedVM.toUint64(index);\n        index += 8;\n\n        vm.consistencyLevel = encodedVM.toUint8(index);\n        index += 1;\n\n        vm.payload = encodedVM.slice(index, encodedVM.length - index);\n    }\n\n    /**\n     * @dev quorum serves solely to determine the number of signatures required to acheive quorum\n     */\n    function quorum(\n        uint numGuardians\n    ) public pure virtual returns (uint numSignaturesRequiredForQuorum) {\n        // The max number of guardians is 255\n        require(numGuardians < 256, \"too many guardians\");\n        return ((numGuardians * 2) / 3) + 1;\n    }\n}\n\n// File: contracts/Setters.sol\n\n// contracts/Setters.sol\n\npragma solidity ^0.8.0;\n\ncontract Setters is State {\n    function updateGuardianSetIndex(uint32 newIndex) internal {\n        _state.guardianSetIndex = newIndex;\n    }\n\n    function expireGuardianSet(uint32 index) internal {\n        _state.guardianSets[index].expirationTime =\n            uint32(block.timestamp) +\n            86400;\n    }\n\n    function storeGuardianSet(\n        Structs.GuardianSet memory set,\n        uint32 index\n    ) internal {\n        uint setLength = set.keys.length;\n        for (uint i = 0; i < setLength; i++) {\n            require(set.keys[i] != address(0), \"Invalid key\");\n        }\n        _state.guardianSets[index] = set;\n    }\n\n    function setInitialized(address implementatiom) internal {\n        _state.initializedImplementations[implementatiom] = true;\n    }\n\n    function setGovernanceActionConsumed(bytes32 hash) internal {\n        _state.consumedGovernanceActions[hash] = true;\n    }\n\n    function setChainId(uint16 chainId) internal {\n        _state.provider.chainId = chainId;\n    }\n\n    function setGovernanceChainId(uint16 chainId) internal {\n        _state.provider.governanceChainId = chainId;\n    }\n\n    function setGovernanceContract(bytes32 governanceContract) internal {\n        _state.provider.governanceContract = governanceContract;\n    }\n\n    function setMessageFee(uint256 newFee) internal {\n        _state.messageFee = newFee;\n    }\n\n    function setNextSequence(address emitter, uint64 sequence) internal {\n        _state.sequences[emitter] = sequence;\n    }\n\n    function setEvmChainId(uint256 evmChainId) internal {\n        require(evmChainId == block.chainid, \"invalid evmChainId\");\n        _state.evmChainId = evmChainId;\n    }\n}\n\n// File: @openzeppelin/contracts/proxy/beacon/IBeacon.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data\n    ) internal view returns (bytes memory) {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/StorageSlot.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(\n        bytes32 slot\n    ) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(\n        bytes32 slot\n    ) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(\n        bytes32 slot\n    ) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(\n        bytes32 slot\n    ) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\n\npragma solidity ^0.8.2;\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT =\n        0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(\n            Address.isContract(newImplementation),\n            \"ERC1967: new implementation is not a contract\"\n        );\n        StorageSlot\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\n            .value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot\n            .getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(\n                oldImplementation == _getImplementation(),\n                \"ERC1967Upgrade: upgrade breaks further upgrades\"\n            );\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT =\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(\n            newAdmin != address(0),\n            \"ERC1967: new admin is the zero address\"\n        );\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT =\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(\n            Address.isContract(newBeacon),\n            \"ERC1967: new beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(\n                IBeacon(newBeacon).implementation(),\n                data\n            );\n        }\n    }\n}\n\n// File: contracts/Governance.sol\n\n// contracts/Governance.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev `Governance` defines a means to enacting changes to the core bridge contract,\n * guardianSets, message fees, and transfer fees\n */\nabstract contract Governance is\n    GovernanceStructs,\n    Messages,\n    Setters,\n    ERC1967Upgrade\n{\n    event ContractUpgraded(\n        address indexed oldContract,\n        address indexed newContract\n    );\n    event GuardianSetAdded(uint32 indexed index);\n\n    // \"Core\" (left padded)\n    bytes32 constant module =\n        0x00000000000000000000000000000000000000000000000000000000436f7265;\n\n    /**\n     * @dev Upgrades a contract via Governance VAA/VM\n     */\n    function submitContractUpgrade(bytes memory _vm) public {\n        require(!isFork(), \"invalid fork\");\n\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        GovernanceStructs.ContractUpgrade memory upgrade = parseContractUpgrade(\n            vm.payload\n        );\n\n        // Verify the VAA is for this module\n        require(upgrade.module == module, \"Invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(upgrade.chain == chainId(), \"Invalid Chain\");\n\n        // Record the governance action as consumed\n        setGovernanceActionConsumed(vm.hash);\n\n        // Upgrades the implementation to the new contract\n        upgradeImplementation(upgrade.newContract);\n    }\n\n    /**\n     * @dev Sets a `messageFee` via Governance VAA/VM\n     */\n    function submitSetMessageFee(bytes memory _vm) public {\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        GovernanceStructs.SetMessageFee memory upgrade = parseSetMessageFee(\n            vm.payload\n        );\n\n        // Verify the VAA is for this module\n        require(upgrade.module == module, \"Invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(upgrade.chain == chainId() && !isFork(), \"Invalid Chain\");\n\n        // Record the governance action as consumed to prevent reentry\n        setGovernanceActionConsumed(vm.hash);\n\n        // Updates the messageFee\n        setMessageFee(upgrade.messageFee);\n    }\n\n    /**\n     * @dev Deploys a new `guardianSet` via Governance VAA/VM\n     */\n    function submitNewGuardianSet(bytes memory _vm) public {\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        GovernanceStructs.GuardianSetUpgrade\n            memory upgrade = parseGuardianSetUpgrade(vm.payload);\n\n        // Verify the VAA is for this module\n        require(upgrade.module == module, \"invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(\n            (upgrade.chain == chainId() && !isFork()) || upgrade.chain == 0,\n            \"invalid Chain\"\n        );\n\n        // Verify the Guardian Set keys are not empty, this guards\n        // against the accidential upgrade to an empty GuardianSet\n        require(\n            upgrade.newGuardianSet.keys.length > 0,\n            \"new guardian set is empty\"\n        );\n\n        // Verify that the index is incrementing via a predictable +1 pattern\n        require(\n            upgrade.newGuardianSetIndex == getCurrentGuardianSetIndex() + 1,\n            \"index must increase in steps of 1\"\n        );\n\n        // Record the governance action as consumed to prevent reentry\n        setGovernanceActionConsumed(vm.hash);\n\n        // Trigger a time-based expiry of current guardianSet\n        expireGuardianSet(getCurrentGuardianSetIndex());\n\n        // Add the new guardianSet to guardianSets\n        storeGuardianSet(upgrade.newGuardianSet, upgrade.newGuardianSetIndex);\n\n        // Makes the new guardianSet effective\n        updateGuardianSetIndex(upgrade.newGuardianSetIndex);\n    }\n\n    /**\n     * @dev Submits transfer fees to the recipient via Governance VAA/VM\n     */\n    function submitTransferFees(bytes memory _vm) public {\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        // Obtains the transfer from the VAA payload\n        GovernanceStructs.TransferFees memory transfer = parseTransferFees(\n            vm.payload\n        );\n\n        // Verify the VAA is for this module\n        require(transfer.module == module, \"invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(\n            (transfer.chain == chainId() && !isFork()) || transfer.chain == 0,\n            \"invalid Chain\"\n        );\n\n        // Record the governance action as consumed to prevent reentry\n        setGovernanceActionConsumed(vm.hash);\n\n        // Obtains the recipient address to be paid transfer fees\n        address payable recipient = payable(\n            address(uint160(uint256(transfer.recipient)))\n        );\n\n        // Transfers transfer fees to the recipient\n        recipient.transfer(transfer.amount);\n    }\n\n    /**\n     * @dev Updates the `chainId` and `evmChainId` on a forked chain via Governance VAA/VM\n     */\n    function submitRecoverChainId(bytes memory _vm) public {\n        require(isFork(), \"not a fork\");\n\n        Structs.VM memory vm = parseVM(_vm);\n\n        // Verify the VAA is valid before processing it\n        (bool isValid, string memory reason) = verifyGovernanceVM(vm);\n        require(isValid, reason);\n\n        GovernanceStructs.RecoverChainId memory rci = parseRecoverChainId(\n            vm.payload\n        );\n\n        // Verify the VAA is for this module\n        require(rci.module == module, \"invalid Module\");\n\n        // Verify the VAA is for this chain\n        require(rci.evmChainId == block.chainid, \"invalid EVM Chain\");\n\n        // Record the governance action as consumed to prevent reentry\n        setGovernanceActionConsumed(vm.hash);\n\n        // Update the chainIds\n        setEvmChainId(rci.evmChainId);\n        setChainId(rci.newChainId);\n    }\n\n    /**\n     * @dev Upgrades the `currentImplementation` with a `newImplementation`\n     */\n    function upgradeImplementation(address newImplementation) internal {\n        address currentImplementation = _getImplementation();\n\n        _upgradeTo(newImplementation);\n\n        // Call initialize function of the new implementation\n        (bool success, bytes memory reason) = newImplementation.delegatecall(\n            abi.encodeWithSignature(\"initialize()\")\n        );\n\n        require(success, string(reason));\n\n        emit ContractUpgraded(currentImplementation, newImplementation);\n    }\n\n    /**\n     * @dev Verifies a Governance VAA/VM is valid\n     */\n    function verifyGovernanceVM(\n        Structs.VM memory vm\n    ) internal view returns (bool, string memory) {\n        // Verify the VAA is valid\n        (bool isValid, string memory reason) = verifyVM(vm);\n        if (!isValid) {\n            return (false, reason);\n        }\n\n        // only current guardianset can sign governance packets\n        if (vm.guardianSetIndex != getCurrentGuardianSetIndex()) {\n            return (false, \"not signed by current guardian set\");\n        }\n\n        // Verify the VAA is from the governance chain (Solana)\n        if (uint16(vm.emitterChainId) != governanceChainId()) {\n            return (false, \"wrong governance chain\");\n        }\n\n        // Verify the emitter contract is the governance contract (0x4 left padded)\n        if (vm.emitterAddress != governanceContract()) {\n            return (false, \"wrong governance contract\");\n        }\n\n        // Verify this governance action hasn't already been\n        // consumed to prevent reentry and replay\n        if (governanceActionIsConsumed(vm.hash)) {\n            return (false, \"governance action already consumed\");\n        }\n\n        // Confirm the governance VAA/VM is valid\n        return (true, \"\");\n    }\n}\n\n// File: contracts/Implementation.sol\n\n// contracts/Implementation.sol\n\npragma solidity ^0.8.0;\n\ncontract WormholeImplementation is Governance {\n    event LogMessagePublished(\n        address indexed sender,\n        uint64 sequence,\n        uint32 nonce,\n        bytes payload,\n        uint8 consistencyLevel\n    );\n\n    // Publish a message to be attested by the Wormhole network\n    function publishMessage(\n        uint32 nonce,\n        bytes memory payload,\n        uint8 consistencyLevel\n    ) public payable returns (uint64 sequence) {\n        // check fee\n        require(msg.value == messageFee(), \"invalid fee\");\n\n        sequence = useSequence(msg.sender);\n        // emit log\n        emit LogMessagePublished(\n            msg.sender,\n            sequence,\n            nonce,\n            payload,\n            consistencyLevel\n        );\n    }\n\n    function useSequence(address emitter) internal returns (uint64 sequence) {\n        sequence = nextSequence(emitter);\n        setNextSequence(emitter, sequence + 1);\n    }\n\n    function setup(\n        uint16 chainId,\n        uint16 governanceChainId,\n        bytes32 governanceContract,\n        Structs.GuardianSet memory guardianSet\n    ) public {\n        setChainId(chainId);\n        setGovernanceChainId(governanceChainId);\n        setGovernanceContract(governanceContract);\n        storeGuardianSet(guardianSet, 0);\n    }\n\n    function initialize() public virtual initializer {\n        // this function needs to be exposed for an upgrade to pass\n        if (evmChainId() == 0) {\n            uint256 evmChainId;\n            uint16 chain = chainId();\n\n            // Wormhole chain ids explicitly enumerated\n            if (chain == 2) {\n                evmChainId = 1; // ethereum\n            } else if (chain == 4) {\n                evmChainId = 56; // bsc\n            } else if (chain == 5) {\n                evmChainId = 137; // polygon\n            } else if (chain == 6) {\n                evmChainId = 43114; // avalanche\n            } else if (chain == 7) {\n                evmChainId = 42262; // oasis\n            } else if (chain == 9) {\n                evmChainId = 1313161554; // aurora\n            } else if (chain == 10) {\n                evmChainId = 250; // fantom\n            } else if (chain == 11) {\n                evmChainId = 686; // karura\n            } else if (chain == 12) {\n                evmChainId = 787; // acala\n            } else if (chain == 13) {\n                evmChainId = 8217; // klaytn\n            } else if (chain == 14) {\n                evmChainId = 42220; // celo\n            } else if (chain == 16) {\n                evmChainId = 1287; // moonbase\n            } else if (chain == 17) {\n                evmChainId = 245022934; // neon\n            } else if (chain == 23) {\n                evmChainId = 42161; // arbitrum\n            } else if (chain == 24) {\n                evmChainId = 10; // optimism\n            } else if (chain == 25) {\n                evmChainId = 100; // gnosis\n            } else {\n                revert(\"Unknown chain id.\");\n            }\n\n            setEvmChainId(evmChainId);\n        }\n    }\n\n    modifier initializer() {\n        address implementation = ERC1967Upgrade._getImplementation();\n\n        require(!isInitialized(implementation), \"already initialized\");\n\n        setInitialized(implementation);\n\n        _;\n    }\n\n    fallback() external payable {\n        revert(\"unsupported\");\n    }\n\n    receive() external payable {\n        revert(\"the Wormhole contract does not accept assets\");\n    }\n}\n"
}
