{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "owner", "type": "address" },
          { "internalType": "address", "name": "spender", "type": "address" }
        ],
        "name": "allowance",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "spender", "type": "address" },
          { "internalType": "uint256", "name": "value", "type": "uint256" }
        ],
        "name": "approve",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "who", "type": "address" }
        ],
        "name": "balanceOf",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "from", "type": "address" },
          { "internalType": "uint256", "name": "value", "type": "uint256" }
        ],
        "name": "burn",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "clear_metadata",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "decimals",
        "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "account", "type": "address" }
        ],
        "name": "freeze",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "freeze_asset",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "to", "type": "address" },
          { "internalType": "uint256", "name": "value", "type": "uint256" }
        ],
        "name": "mint",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "string", "name": "name", "type": "string" },
          { "internalType": "string", "name": "symbol", "type": "string" },
          { "internalType": "uint8", "name": "decimals", "type": "uint8" }
        ],
        "name": "set_metadata",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "issuer", "type": "address" },
          { "internalType": "address", "name": "admin", "type": "address" },
          { "internalType": "address", "name": "freezer", "type": "address" }
        ],
        "name": "set_team",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "account", "type": "address" }
        ],
        "name": "thaw",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "thaw_asset",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "to", "type": "address" },
          { "internalType": "uint256", "name": "value", "type": "uint256" }
        ],
        "name": "transfer",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "from", "type": "address" },
          { "internalType": "address", "name": "to", "type": "address" },
          { "internalType": "uint256", "name": "value", "type": "uint256" }
        ],
        "name": "transferFrom",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "owner", "type": "address" }
        ],
        "name": "transfer_ownership",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "see https://github.com/ethereum/EIPs/issues/20copied from https://github.com/OpenZeppelin/openzeppelin-contracts",
      "events": {
        "Approval(address,address,uint256)": {
          "details": "Event emited when an approval has been registered. Selector: 8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "params": {
            "owner": "address Owner of the tokens.",
            "spender": "address Allowed spender.",
            "value": "uint256 Amount of tokens approved."
          }
        },
        "Transfer(address,address,uint256)": {
          "details": "Event emited when a transfer has been performed. Selector: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "params": {
            "from": "address The address sending the tokens",
            "to": "address The address receiving the tokens.",
            "value": "uint256 The amount of tokens transfered."
          }
        }
      },
      "kind": "dev",
      "methods": {
        "allowance(address,address)": {
          "details": "Function to check the amount of tokens that an owner allowed to a spender. Selector: dd62ed3e",
          "params": {
            "owner": "address The address which owns the funds.",
            "spender": "address The address which will spend the funds."
          },
          "returns": {
            "_0": "A uint256 specifying the amount of tokens still available for the spender."
          }
        },
        "approve(address,uint256)": {
          "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Selector: 095ea7b3",
          "params": {
            "spender": "The address which will spend the funds.",
            "value": "The amount of tokens to be spent."
          }
        },
        "balanceOf(address)": {
          "details": "Gets the balance of the specified address. Selector: 70a08231",
          "params": { "who": "The address to query the balance of." },
          "returns": {
            "_0": "An uint256 representing the amount owned by the passed address."
          }
        },
        "burn(address,uint256)": {
          "details": "Burn tokens from an address Selector: 23b872dd",
          "params": {
            "from": "address The address from which you want to burn tokens",
            "value": "uint256 the amount of tokens to be burnt"
          }
        },
        "clear_metadata()": {
          "details": "Clear the name, symbol and decimals of your asset Selector: 23b872dd"
        },
        "decimals()": {
          "details": "Returns the decimals places of the token. Selector: 313ce567"
        },
        "freeze(address)": {
          "details": "Freeze an account, preventing it from operating with the asset Selector: 23b872dd",
          "params": { "account": "address The address that you want to freeze" }
        },
        "freeze_asset()": {
          "details": "Freeze the entire asset operations Selector: 23b872dd"
        },
        "mint(address,uint256)": {
          "details": "Mint tokens to an address Selector: 23b872dd",
          "params": {
            "to": "address The address to which you want to mint tokens",
            "value": "uint256 the amount of tokens to be minted"
          }
        },
        "name()": {
          "details": "Returns the name of the token. Selector: 06fdde03"
        },
        "set_metadata(string,string,uint8)": {
          "details": "Specify the name, symbol and decimals of your asset Selector: 23b872dd",
          "params": {
            "decimals": "uint8 The number of decimals of your asset",
            "name": "string The name of the asset",
            "symbol": "string The symbol of the asset"
          }
        },
        "set_team(address,address,address)": {
          "details": "Specify the issuer, admin and freezer of an asset Selector: 23b872dd",
          "params": {
            "admin": "address The address capable of burning tokens and unfreezing accounts/assets",
            "freezer": "address The address capable of freezing accounts/asset",
            "issuer": "address The address capable of issuing tokens"
          }
        },
        "symbol()": {
          "details": "Returns the symbol of the token. Selector: 95d89b41"
        },
        "thaw(address)": {
          "details": "Unfreeze an account, letting it from operating againt with the asset Selector: 23b872dd",
          "params": {
            "account": "address The address that you want to unfreeze"
          }
        },
        "thaw_asset()": {
          "details": "Unfreeze the entire asset operations Selector: 23b872dd"
        },
        "totalSupply()": {
          "details": "Total number of tokens in existence Selector: 18160ddd"
        },
        "transfer(address,uint256)": {
          "details": "Transfer token for a specified address Selector: a9059cbb",
          "params": {
            "to": "The address to transfer to.",
            "value": "The amount to be transferred."
          }
        },
        "transferFrom(address,address,uint256)": {
          "details": "Transfer tokens from one address to another Selector: 23b872dd",
          "params": {
            "from": "address The address which you want to send tokens from",
            "to": "address The address which you want to transfer to",
            "value": "uint256 the amount of tokens to be transferred"
          }
        },
        "transfer_ownership(address)": {
          "details": "Transfer the ownership of an asset to a new account Selector: 23b872dd",
          "params": { "owner": "address The address of the new owner" }
        }
      },
      "title": "ERC20 interface",
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "allowance(address,address)": "dd62ed3e",
        "approve(address,uint256)": "095ea7b3",
        "balanceOf(address)": "70a08231",
        "burn(address,uint256)": "9dc29fac",
        "clear_metadata()": "d3ba4b9e",
        "decimals()": "313ce567",
        "freeze(address)": "8d1fdf2f",
        "freeze_asset()": "6b8751c1",
        "mint(address,uint256)": "40c10f19",
        "name()": "06fdde03",
        "set_metadata(string,string,uint8)": "ee5dc1e4",
        "set_team(address,address,address)": "f8bf8e95",
        "symbol()": "95d89b41",
        "thaw(address)": "5ea20216",
        "thaw_asset()": "1cddec19",
        "totalSupply()": "18160ddd",
        "transfer(address,uint256)": "a9059cbb",
        "transferFrom(address,address,uint256)": "23b872dd",
        "transfer_ownership(address)": "f0350c04"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clear_metadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze_asset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"set_metadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"freezer\",\"type\":\"address\"}],\"name\":\"set_team\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"thaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thaw_asset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"transfer_ownership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://github.com/ethereum/EIPs/issues/20copied from https://github.com/OpenZeppelin/openzeppelin-contracts\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Event emited when an approval has been registered. Selector: 8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\"params\":{\"owner\":\"address Owner of the tokens.\",\"spender\":\"address Allowed spender.\",\"value\":\"uint256 Amount of tokens approved.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Event emited when a transfer has been performed. Selector: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\"params\":{\"from\":\"address The address sending the tokens\",\"to\":\"address The address receiving the tokens.\",\"value\":\"uint256 The amount of tokens transfered.\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender. Selector: dd62ed3e\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Selector: 095ea7b3\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address. Selector: 70a08231\",\"params\":{\"who\":\"The address to query the balance of.\"},\"returns\":{\"_0\":\"An uint256 representing the amount owned by the passed address.\"}},\"burn(address,uint256)\":{\"details\":\"Burn tokens from an address Selector: 23b872dd\",\"params\":{\"from\":\"address The address from which you want to burn tokens\",\"value\":\"uint256 the amount of tokens to be burnt\"}},\"clear_metadata()\":{\"details\":\"Clear the name, symbol and decimals of your asset Selector: 23b872dd\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token. Selector: 313ce567\"},\"freeze(address)\":{\"details\":\"Freeze an account, preventing it from operating with the asset Selector: 23b872dd\",\"params\":{\"account\":\"address The address that you want to freeze\"}},\"freeze_asset()\":{\"details\":\"Freeze the entire asset operations Selector: 23b872dd\"},\"mint(address,uint256)\":{\"details\":\"Mint tokens to an address Selector: 23b872dd\",\"params\":{\"to\":\"address The address to which you want to mint tokens\",\"value\":\"uint256 the amount of tokens to be minted\"}},\"name()\":{\"details\":\"Returns the name of the token. Selector: 06fdde03\"},\"set_metadata(string,string,uint8)\":{\"details\":\"Specify the name, symbol and decimals of your asset Selector: 23b872dd\",\"params\":{\"decimals\":\"uint8 The number of decimals of your asset\",\"name\":\"string The name of the asset\",\"symbol\":\"string The symbol of the asset\"}},\"set_team(address,address,address)\":{\"details\":\"Specify the issuer, admin and freezer of an asset Selector: 23b872dd\",\"params\":{\"admin\":\"address The address capable of burning tokens and unfreezing accounts/assets\",\"freezer\":\"address The address capable of freezing accounts/asset\",\"issuer\":\"address The address capable of issuing tokens\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token. Selector: 95d89b41\"},\"thaw(address)\":{\"details\":\"Unfreeze an account, letting it from operating againt with the asset Selector: 23b872dd\",\"params\":{\"account\":\"address The address that you want to unfreeze\"}},\"thaw_asset()\":{\"details\":\"Unfreeze the entire asset operations Selector: 23b872dd\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence Selector: 18160ddd\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address Selector: a9059cbb\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another Selector: 23b872dd\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}},\"transfer_ownership(address)\":{\"details\":\"Transfer the ownership of an asset to a new account Selector: 23b872dd\",\"params\":{\"owner\":\"address The address of the new owner\"}}},\"title\":\"ERC20 interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"LocalAssetExtendedErc20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0xeab1358fed3a348d9c7357741dc1ebff0141d0c79252c7fa8a081443d9eafec8\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://145c3e30ea69647e5eb335e61ca1e379827aa21717dccdb9d06b68c1f27f65b3\",\"dweb:/ipfs/QmVBrRHJKFiaeNYezbfpEtg5cJLCULTsS4ZaSjWrF5jMCZ\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "sourceCode": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n * @dev copied from https://github.com/OpenZeppelin/openzeppelin-contracts\n */\ninterface LocalAssetExtendedErc20 {\n    /**\n     * @dev Returns the name of the token.\n     * Selector: 06fdde03\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     * Selector: 95d89b41\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     * Selector: 313ce567\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Total number of tokens in existence\n     * Selector: 18160ddd\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * Selector: 70a08231\n     * @param who The address to query the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address who) external view returns (uint256);\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * Selector: dd62ed3e\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Transfer token for a specified address\n     * Selector: a9059cbb\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf\n     * of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may\n     * use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to\n     * mitigate this race condition is to first reduce the spender's allowance to 0 and set\n     * the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * Selector: 095ea7b3\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * Selector: 23b872dd\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    /**\n     * @dev Mint tokens to an address\n     * Selector: 23b872dd\n     * @param to address The address to which you want to mint tokens\n     * @param value uint256 the amount of tokens to be minted\n     */\n    function mint(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Burn tokens from an address\n     * Selector: 23b872dd\n     * @param from address The address from which you want to burn tokens\n     * @param value uint256 the amount of tokens to be burnt\n     */\n    function burn(address from, uint256 value) external returns (bool);\n\n    /**\n     * @dev Freeze an account, preventing it from operating with the asset\n     * Selector: 23b872dd\n     * @param account address The address that you want to freeze\n     */\n    function freeze(address account) external returns (bool);\n\n    /**\n     * @dev Unfreeze an account, letting it from operating againt with the asset\n     * Selector: 23b872dd\n     * @param account address The address that you want to unfreeze\n     */\n    function thaw(address account) external returns (bool);\n\n    /**\n     * @dev Freeze the entire asset operations\n     * Selector: 23b872dd\n     */\n    function freeze_asset() external returns (bool);\n\n    /**\n     * @dev Unfreeze the entire asset operations\n     * Selector: 23b872dd\n     */\n    function thaw_asset() external returns (bool);\n\n    /**\n     * @dev Transfer the ownership of an asset to a new account\n     * Selector: 23b872dd\n     * @param owner address The address of the new owner\n     */\n    function transfer_ownership(address owner) external returns (bool);\n\n    /**\n     * @dev Specify the issuer, admin and freezer of an asset\n     * Selector: 23b872dd\n     * @param issuer address The address capable of issuing tokens\n     * @param admin address The address capable of burning tokens and unfreezing accounts/assets\n     * @param freezer address The address capable of freezing accounts/asset\n     */\n    function set_team(\n        address issuer,\n        address admin,\n        address freezer\n    ) external returns (bool);\n\n    /**\n     * @dev Specify the name, symbol and decimals of your asset\n     * Selector: 23b872dd\n     * @param name string The name of the asset\n     * @param symbol string The symbol of the asset\n     * @param decimals uint8 The number of decimals of your asset\n     */\n    function set_metadata(\n        string calldata name,\n        string calldata symbol,\n        uint8 decimals\n    ) external returns (bool);\n\n    /**\n     * @dev Clear the name, symbol and decimals of your asset\n     * Selector: 23b872dd\n     */\n    function clear_metadata() external returns (bool);\n\n    /**\n     * @dev Event emited when a transfer has been performed.\n     * Selector: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n     * @param from address The address sending the tokens\n     * @param to address The address receiving the tokens.\n     * @param value uint256 The amount of tokens transfered.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Event emited when an approval has been registered.\n     * Selector: 8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n     * @param owner address Owner of the tokens.\n     * @param spender address Allowed spender.\n     * @param value uint256 Amount of tokens approved.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract LocalAssetExtendedErc20Instance is LocalAssetExtendedErc20 {\n    /// The ierc20 at the known pre-compile address.\n    LocalAssetExtendedErc20 public localasseterc20 =\n        LocalAssetExtendedErc20(0xffFfFffEDe9001a6f7F4798cCb76ef1E7f664701);\n    address localasseterc20address = 0xffFfFffEDe9001a6f7F4798cCb76ef1E7f664701;\n\n    receive() external payable {\n        // React to receiving ether\n    }\n\n    function set_address_interface(address instance_address) public {\n        localasseterc20 = LocalAssetExtendedErc20(instance_address);\n        localasseterc20address = instance_address;\n    }\n\n    function get_address() public view returns (address) {\n        return localasseterc20address;\n    }\n\n    function name() external view override returns (string memory) {\n        // We nominate our target collator with all the tokens provided\n        return localasseterc20.name();\n    }\n\n    function symbol() external view override returns (string memory) {\n        // We nominate our target collator with all the tokens provided\n        return localasseterc20.symbol();\n    }\n\n    function decimals() external view override returns (uint8) {\n        // We nominate our target collator with all the tokens provided\n        return localasseterc20.decimals();\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        // We nominate our target collator with all the tokens provided\n        return localasseterc20.totalSupply();\n    }\n\n    function balanceOf(address who) external view override returns (uint256) {\n        // We nominate our target collator with all the tokens provided\n        return localasseterc20.balanceOf(who);\n    }\n\n    function allowance(address owner, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return localasseterc20.allowance(owner, spender);\n    }\n\n    function transfer(address to, uint256 value)\n        external\n        override\n        returns (bool)\n    {\n        return localasseterc20.transfer(to, value);\n    }\n\n    function mint(address to, uint256 value) external override returns (bool) {\n        return localasseterc20.mint(to, value);\n    }\n\n    function burn(address from, uint256 value)\n        external\n        override\n        returns (bool)\n    {\n        return localasseterc20.burn(from, value);\n    }\n\n    function freeze(address account) external override returns (bool) {\n        return localasseterc20.freeze(account);\n    }\n\n    function thaw(address account) external override returns (bool) {\n        return localasseterc20.thaw(account);\n    }\n\n    function freeze_asset() external override returns (bool) {\n        return localasseterc20.freeze_asset();\n    }\n\n    function thaw_asset() external override returns (bool) {\n        return localasseterc20.thaw_asset();\n    }\n\n    function transfer_ownership(address owner)\n        external\n        override\n        returns (bool)\n    {\n        return localasseterc20.transfer_ownership(owner);\n    }\n\n    function set_team(\n        address issuer,\n        address admin,\n        address freezer\n    ) external override returns (bool) {\n        return localasseterc20.set_team(issuer, admin, freezer);\n    }\n\n    function set_metadata(\n        string calldata name,\n        string calldata symbol,\n        uint8 decimals\n    ) external override returns (bool) {\n        return localasseterc20.set_metadata(name, symbol, decimals);\n    }\n\n    function clear_metadata() external override returns (bool) {\n        return localasseterc20.clear_metadata();\n    }\n\n    function transfer_delegate(address to, uint256 value)\n        external\n        returns (bool)\n    {\n        (bool result, bytes memory data) = localasseterc20address.delegatecall(\n            abi.encodeWithSignature(\"transfer(address,uint256)\", to, value)\n        );\n        return result;\n    }\n\n    function approve(address spender, uint256 value)\n        external\n        override\n        returns (bool)\n    {\n        return localasseterc20.approve(spender, value);\n    }\n\n    function approve_delegate(address spender, uint256 value)\n        external\n        returns (bool)\n    {\n        (bool result, bytes memory data) = localasseterc20address.delegatecall(\n            abi.encodeWithSignature(\"approve(address,uint256)\", spender, value)\n        );\n        return result;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external override returns (bool) {\n        return localasseterc20.transferFrom(from, to, value);\n    }\n\n    function transferFrom_delegate(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool) {\n        (bool result, bytes memory data) = localasseterc20address.delegatecall(\n            abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                from,\n                to,\n                value\n            )\n        );\n        return result;\n    }\n}\n"
}
