{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "inputs": [
          { "internalType": "uint32", "name": "round", "type": "uint32" },
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "awardedPoints",
        "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "cancelCandidateBondLess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "cancelDelegationRequest",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "candidateCount",
            "type": "uint256"
          }
        ],
        "name": "cancelLeaveCandidates",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "cancelLeaveDelegators",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "candidateAutoCompoundingDelegationCount",
        "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "more", "type": "uint256" }
        ],
        "name": "candidateBondMore",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "candidateCount",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "candidateDelegationCount",
        "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "candidateExitIsPending",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "candidateRequestIsPending",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          {
            "internalType": "uint256",
            "name": "candidateDelegationCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "delegatorDelegationCount",
            "type": "uint256"
          }
        ],
        "name": "delegate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          { "internalType": "uint8", "name": "autoCompound", "type": "uint8" },
          {
            "internalType": "uint256",
            "name": "candidateDelegationCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "candidateAutoCompoundingDelegationCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "delegatorDelegationCount",
            "type": "uint256"
          }
        ],
        "name": "delegateWithAutoCompound",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" },
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "delegationAmount",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" },
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "delegationAutoCompound",
        "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" },
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "delegationRequestIsPending",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" },
          { "internalType": "uint256", "name": "more", "type": "uint256" }
        ],
        "name": "delegatorBondMore",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" }
        ],
        "name": "delegatorDelegationCount",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "executeCandidateBondLess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" },
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "executeDelegationRequest",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" },
          {
            "internalType": "uint256",
            "name": "candidateDelegationCount",
            "type": "uint256"
          }
        ],
        "name": "executeLeaveCandidates",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" },
          {
            "internalType": "uint256",
            "name": "delegatorDelegationCount",
            "type": "uint256"
          }
        ],
        "name": "executeLeaveDelegators",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "getCandidateTotalCounted",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" }
        ],
        "name": "getDelegatorTotalStaked",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "goOffline",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "goOnline",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "isCandidate",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" }
        ],
        "name": "isDelegator",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "delegator", "type": "address" },
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "isInTopDelegations",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "isSelectedCandidate",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          {
            "internalType": "uint256",
            "name": "candidateCount",
            "type": "uint256"
          }
        ],
        "name": "joinCandidates",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "minDelegation",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "round", "type": "uint256" }
        ],
        "name": "points",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "round",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "less", "type": "uint256" }
        ],
        "name": "scheduleCandidateBondLess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" },
          { "internalType": "uint256", "name": "less", "type": "uint256" }
        ],
        "name": "scheduleDelegatorBondLess",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "candidateCount",
            "type": "uint256"
          }
        ],
        "name": "scheduleLeaveCandidates",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "scheduleLeaveDelegators",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" }
        ],
        "name": "scheduleRevokeDelegation",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "selectedCandidates",
        "outputs": [
          { "internalType": "address[]", "name": "", "type": "address[]" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "candidate", "type": "address" },
          { "internalType": "uint8", "name": "value", "type": "uint8" },
          {
            "internalType": "uint256",
            "name": "candidateAutoCompoundingDelegationCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "delegatorDelegationCount",
            "type": "uint256"
          }
        ],
        "name": "setAutoCompound",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "The Moonbeam Team",
      "custom:address": "0x0000000000000000000000000000000000000800",
      "details": "The interface through which solidity contracts will interact with Parachain Staking We follow this same interface including four-byte function selectors, in the precompile that wraps the pallet",
      "kind": "dev",
      "methods": {
        "awardedPoints(uint32,address)": {
          "custom:selector": "bfea66ac",
          "details": "Total points awarded to a specific collator in a particular round. A value of `0` may signify that no blocks were produced or that the storage for that round has been removed",
          "params": {
            "candidate": "The candidate to whom the points are awarded",
            "round": "the round for which we are querying the awarded points"
          },
          "returns": {
            "_0": "The total points awarded to the collator for the provided round"
          }
        },
        "cancelCandidateBondLess()": {
          "custom:selector": "b5ad5f07",
          "details": "Cancel pending candidate bond request"
        },
        "cancelDelegationRequest(address)": {
          "custom:selector": "c90eee83",
          "details": "Cancel pending delegation request (already made in support of input by caller)",
          "params": { "candidate": "The address of the candidate" }
        },
        "cancelLeaveCandidates(uint256)": {
          "custom:selector": "9c76ebb4",
          "details": "Cancel request to leave the set of collator candidates",
          "params": {
            "candidateCount": "The number of candidates in the CandidatePool"
          }
        },
        "cancelLeaveDelegators()": {
          "custom:selector": "f7421284",
          "details": "Cancel request to leave the set of delegators"
        },
        "candidateAutoCompoundingDelegationCount(address)": {
          "custom:selector": "905f0806",
          "details": "Get the CandidateAutoCompoundingDelegationCount weight hint",
          "params": {
            "candidate": "The address for which we are querying the auto compounding     delegation count"
          },
          "returns": { "_0": "The number of auto compounding delegations" }
        },
        "candidateBondMore(uint256)": {
          "custom:selector": "a52c8643",
          "details": "Request to bond more for collator candidates",
          "params": { "more": "The additional amount self-bonded" }
        },
        "candidateCount()": {
          "custom:selector": "a9a981a3",
          "details": "Get the CandidateCount weight hint",
          "returns": { "_0": "The CandidateCount weight hint" }
        },
        "candidateDelegationCount(address)": {
          "custom:selector": "2ec087eb",
          "details": "Get the CandidateDelegationCount weight hint",
          "params": {
            "candidate": "The address for which we are querying the nomination count"
          },
          "returns": { "_0": "The number of nominations backing the collator" }
        },
        "candidateExitIsPending(address)": {
          "custom:selector": "43443682",
          "details": "Whether there exists a pending exit for candidate",
          "params": {
            "candidate": "the candidate for which the exit request was made"
          },
          "returns": {
            "_0": "Whether a pending request exists for such delegation"
          }
        },
        "candidateRequestIsPending(address)": {
          "custom:selector": "d0deec11",
          "details": "Whether there exists a pending bond less request made by a candidate",
          "params": { "candidate": "the candidate which made the request" },
          "returns": {
            "_0": "Whether a pending bond less request was made by the candidate"
          }
        },
        "delegate(address,uint256,uint256,uint256)": {
          "custom:selector": "829f5ee3",
          "details": "Make a delegation in support of a collator candidate",
          "params": {
            "amount": "The amount bonded in support of the collator candidate",
            "candidate": "The address of the supported collator candidate",
            "candidateDelegationCount": "The number of delegations in support of the candidate",
            "delegatorDelegationCount": "The number of existing delegations by the caller"
          }
        },
        "delegateWithAutoCompound(address,uint256,uint8,uint256,uint256,uint256)": {
          "custom:selector": "4b8bc9bf",
          "details": "Make a delegation in support of a collator candidate",
          "params": {
            "amount": "The amount bonded in support of the collator candidate",
            "autoCompound": "The percent of reward that should be auto-compounded",
            "candidate": "The address of the supported collator candidate",
            "candidateAutoCompoundingDelegationCount": "The number of auto-compounding delegations in support of the candidate",
            "candidateDelegationCount": "The number of delegations in support of the candidate",
            "delegatorDelegationCount": "The number of existing delegations by the caller"
          }
        },
        "delegationAmount(address,address)": {
          "custom:selector": "a73e51bc",
          "details": "The amount delegated in support of the candidate by the delegator",
          "params": {
            "candidate": "The candidate for which the delegation is in support of",
            "delegator": "Who made this delegation"
          },
          "returns": {
            "_0": "The amount of the delegation in support of the candidate by the delegator"
          }
        },
        "delegationAutoCompound(address,address)": {
          "custom:selector": "b4d4c7fd",
          "details": "Returns the percent value of auto-compound set for a delegation",
          "params": {
            "candidate": "the candidate for which the delegation was made",
            "delegator": "the delegator that made the delegation"
          },
          "returns": {
            "_0": "Percent of rewarded amount that is auto-compounded on each payout"
          }
        },
        "delegationRequestIsPending(address,address)": {
          "custom:selector": "3b16def8",
          "details": "Whether there exists a pending request for a delegation made by a delegator",
          "params": {
            "candidate": "the candidate for which the delegation was made",
            "delegator": "the delegator that made the delegation"
          },
          "returns": {
            "_0": "Whether a pending request exists for such delegation"
          }
        },
        "delegatorBondMore(address,uint256)": {
          "custom:selector": "0465135b",
          "details": "Bond more for delegators with respect to a specific collator candidate",
          "params": {
            "candidate": "The address of the collator candidate for which delegation shall increase",
            "more": "The amount by which the delegation is increased"
          }
        },
        "delegatorDelegationCount(address)": {
          "custom:selector": "067ec822",
          "details": "Get the DelegatorDelegationCount weight hint",
          "params": {
            "delegator": "The address for which we are querying the delegation count"
          },
          "returns": { "_0": "The number of delegations made by the delegator" }
        },
        "executeCandidateBondLess(address)": {
          "custom:selector": "2e290290",
          "details": "Execute pending candidate bond request",
          "params": {
            "candidate": "The address for the candidate for which the request will be executed"
          }
        },
        "executeDelegationRequest(address,address)": {
          "custom:selector": "e98c8abe",
          "details": "Execute pending delegation request (if exists && is due)",
          "params": {
            "candidate": "The address of the candidate",
            "delegator": "The address of the delegator"
          }
        },
        "executeLeaveCandidates(address,uint256)": {
          "custom:selector": "3867f308",
          "details": "Execute due request to leave the set of collator candidates",
          "params": {
            "candidate": "The candidate address for which the pending exit request will be executed",
            "candidateDelegationCount": "The number of delegations for the candidate to be revoked"
          }
        },
        "executeLeaveDelegators(address,uint256)": {
          "custom:selector": "fb1e2bf9",
          "details": "Execute request to leave the set of delegators and revoke all delegations",
          "params": {
            "delegator": "The leaving delegator",
            "delegatorDelegationCount": "The number of active delegations to be revoked by delegator"
          }
        },
        "getCandidateTotalCounted(address)": {
          "custom:selector": "bc5a1043",
          "details": "Fetch the total staked towards a candidate.",
          "params": { "candidate": "Address of the candidate." },
          "returns": { "_0": "Total amount of stake." }
        },
        "getDelegatorTotalStaked(address)": {
          "custom:selector": "e6861713",
          "details": "Fetch the total staked amount of a delegator, regardless of the candidate.",
          "params": { "delegator": "Address of the delegator." },
          "returns": { "_0": "Total amount of stake." }
        },
        "goOffline()": {
          "custom:selector": "a6485ccd",
          "details": "Temporarily leave the set of collator candidates without unbonding"
        },
        "goOnline()": {
          "custom:selector": "6e5b676b",
          "details": "Rejoin the set of collator candidates if previously had called `goOffline`"
        },
        "isCandidate(address)": {
          "custom:selector": "d51b9e93",
          "details": "Check whether the specified address is currently a collator candidate",
          "params": {
            "candidate": "the address that we want to confirm is a collator andidate"
          },
          "returns": {
            "_0": "A boolean confirming whether the address is a collator candidate"
          }
        },
        "isDelegator(address)": {
          "custom:selector": "fd8ab482",
          "details": "Check whether the specified address is currently a staking delegator",
          "params": {
            "delegator": "the address that we want to confirm is a delegator"
          },
          "returns": {
            "_0": "A boolean confirming whether the address is a delegator"
          }
        },
        "isInTopDelegations(address,address)": {
          "custom:selector": "91cc8657",
          "details": "Whether the delegation is in the top delegations",
          "params": {
            "candidate": "The candidate for which the delegation is in support of",
            "delegator": "Who made this delegation"
          },
          "returns": {
            "_0": "If delegation is in top delegations (is counted)"
          }
        },
        "isSelectedCandidate(address)": {
          "custom:selector": "740d7d2a",
          "details": "Check whether the specifies address is currently a part of the active set",
          "params": {
            "candidate": "the address that we want to confirm is a part of the active set"
          },
          "returns": {
            "_0": "A boolean confirming whether the address is a part of the active set"
          }
        },
        "joinCandidates(uint256,uint256)": {
          "custom:selector": "1f2f83ad",
          "details": "Join the set of collator candidates",
          "params": {
            "amount": "The amount self-bonded by the caller to become a collator candidate",
            "candidateCount": "The number of candidates in the CandidatePool"
          }
        },
        "minDelegation()": {
          "custom:selector": "02985992",
          "details": "Get the minimum delegation amount",
          "returns": { "_0": "The minimum delegation amount" }
        },
        "points(uint256)": {
          "custom:selector": "9799b4e7",
          "details": "Total points awarded to all collators in a particular round",
          "params": {
            "round": "the round for which we are querying the points total"
          },
          "returns": {
            "_0": "The total points awarded to all collators in the round"
          }
        },
        "round()": {
          "custom:selector": "146ca531",
          "details": "Get the current round number",
          "returns": { "_0": "The current round number" }
        },
        "scheduleCandidateBondLess(uint256)": {
          "custom:selector": "60744ae0",
          "details": "Request to bond less for collator candidates",
          "params": {
            "less": "The amount to be subtracted from self-bond and unreserved"
          }
        },
        "scheduleDelegatorBondLess(address,uint256)": {
          "custom:selector": "c172fd2b",
          "details": "Request to bond less for delegators with respect to a specific collator candidate",
          "params": {
            "candidate": "The address of the collator candidate for which delegation shall decrease",
            "less": "The amount by which the delegation is decreased (upon execution)"
          }
        },
        "scheduleLeaveCandidates(uint256)": {
          "custom:selector": "b1a3c1b7",
          "details": "Request to leave the set of collator candidates",
          "params": {
            "candidateCount": "The number of candidates in the CandidatePool"
          }
        },
        "scheduleLeaveDelegators()": {
          "custom:selector": "f939dadb",
          "details": "Request to leave the set of delegators"
        },
        "scheduleRevokeDelegation(address)": {
          "custom:selector": "1a1c740c",
          "details": "Request to revoke an existing delegation",
          "params": {
            "candidate": "The address of the collator candidate which will no longer be supported"
          }
        },
        "selectedCandidates()": {
          "custom:selector": "bcf868a6",
          "details": "Get the selected candidates for the current round",
          "returns": { "_0": "The selected candidate accounts" }
        },
        "setAutoCompound(address,uint8,uint256,uint256)": {
          "custom:selector": "faa1786f",
          "details": "Sets an auto-compound value for a delegation",
          "params": {
            "candidate": "The address of the supported collator candidate",
            "candidateAutoCompoundingDelegationCount": "The number of auto-compounding delegations in support of the candidate",
            "delegatorDelegationCount": "The number of existing delegations by the caller",
            "value": "The percent of reward that should be auto-compounded"
          }
        }
      },
      "title": "Pallet Parachain Staking Interface",
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "awardedPoints(uint32,address)": "bfea66ac",
        "cancelCandidateBondLess()": "b5ad5f07",
        "cancelDelegationRequest(address)": "c90eee83",
        "cancelLeaveCandidates(uint256)": "9c76ebb4",
        "cancelLeaveDelegators()": "f7421284",
        "candidateAutoCompoundingDelegationCount(address)": "905f0806",
        "candidateBondMore(uint256)": "a52c8643",
        "candidateCount()": "a9a981a3",
        "candidateDelegationCount(address)": "2ec087eb",
        "candidateExitIsPending(address)": "43443682",
        "candidateRequestIsPending(address)": "d0deec11",
        "delegate(address,uint256,uint256,uint256)": "829f5ee3",
        "delegateWithAutoCompound(address,uint256,uint8,uint256,uint256,uint256)": "4b8bc9bf",
        "delegationAmount(address,address)": "a73e51bc",
        "delegationAutoCompound(address,address)": "b4d4c7fd",
        "delegationRequestIsPending(address,address)": "3b16def8",
        "delegatorBondMore(address,uint256)": "0465135b",
        "delegatorDelegationCount(address)": "067ec822",
        "executeCandidateBondLess(address)": "2e290290",
        "executeDelegationRequest(address,address)": "e98c8abe",
        "executeLeaveCandidates(address,uint256)": "3867f308",
        "executeLeaveDelegators(address,uint256)": "fb1e2bf9",
        "getCandidateTotalCounted(address)": "bc5a1043",
        "getDelegatorTotalStaked(address)": "e6861713",
        "goOffline()": "a6485ccd",
        "goOnline()": "6e5b676b",
        "isCandidate(address)": "d51b9e93",
        "isDelegator(address)": "fd8ab482",
        "isInTopDelegations(address,address)": "91cc8657",
        "isSelectedCandidate(address)": "740d7d2a",
        "joinCandidates(uint256,uint256)": "1f2f83ad",
        "minDelegation()": "02985992",
        "points(uint256)": "9799b4e7",
        "round()": "146ca531",
        "scheduleCandidateBondLess(uint256)": "60744ae0",
        "scheduleDelegatorBondLess(address,uint256)": "c172fd2b",
        "scheduleLeaveCandidates(uint256)": "b1a3c1b7",
        "scheduleLeaveDelegators()": "f939dadb",
        "scheduleRevokeDelegation(address)": "1a1c740c",
        "selectedCandidates()": "bcf868a6",
        "setAutoCompound(address,uint8,uint256,uint256)": "faa1786f"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"awardedPoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelCandidateBondLess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"cancelDelegationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"candidateCount\",\"type\":\"uint256\"}],\"name\":\"cancelLeaveCandidates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelLeaveDelegators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"candidateAutoCompoundingDelegationCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"more\",\"type\":\"uint256\"}],\"name\":\"candidateBondMore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"candidateDelegationCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"candidateExitIsPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"candidateRequestIsPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"candidateDelegationCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorDelegationCount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"autoCompound\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"candidateDelegationCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"candidateAutoCompoundingDelegationCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorDelegationCount\",\"type\":\"uint256\"}],\"name\":\"delegateWithAutoCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"delegationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"delegationAutoCompound\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"delegationRequestIsPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"more\",\"type\":\"uint256\"}],\"name\":\"delegatorBondMore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"delegatorDelegationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"executeCandidateBondLess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"executeDelegationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"candidateDelegationCount\",\"type\":\"uint256\"}],\"name\":\"executeLeaveCandidates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegatorDelegationCount\",\"type\":\"uint256\"}],\"name\":\"executeLeaveDelegators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"getCandidateTotalCounted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"getDelegatorTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goOffline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goOnline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"isDelegator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isInTopDelegations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isSelectedCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"candidateCount\",\"type\":\"uint256\"}],\"name\":\"joinCandidates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"points\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"less\",\"type\":\"uint256\"}],\"name\":\"scheduleCandidateBondLess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"less\",\"type\":\"uint256\"}],\"name\":\"scheduleDelegatorBondLess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"candidateCount\",\"type\":\"uint256\"}],\"name\":\"scheduleLeaveCandidates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleLeaveDelegators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"scheduleRevokeDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectedCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"candidateAutoCompoundingDelegationCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorDelegationCount\",\"type\":\"uint256\"}],\"name\":\"setAutoCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Moonbeam Team\",\"custom:address\":\"0x0000000000000000000000000000000000000800\",\"details\":\"The interface through which solidity contracts will interact with Parachain Staking We follow this same interface including four-byte function selectors, in the precompile that wraps the pallet\",\"kind\":\"dev\",\"methods\":{\"awardedPoints(uint32,address)\":{\"custom:selector\":\"bfea66ac\",\"details\":\"Total points awarded to a specific collator in a particular round. A value of `0` may signify that no blocks were produced or that the storage for that round has been removed\",\"params\":{\"candidate\":\"The candidate to whom the points are awarded\",\"round\":\"the round for which we are querying the awarded points\"},\"returns\":{\"_0\":\"The total points awarded to the collator for the provided round\"}},\"cancelCandidateBondLess()\":{\"custom:selector\":\"b5ad5f07\",\"details\":\"Cancel pending candidate bond request\"},\"cancelDelegationRequest(address)\":{\"custom:selector\":\"c90eee83\",\"details\":\"Cancel pending delegation request (already made in support of input by caller)\",\"params\":{\"candidate\":\"The address of the candidate\"}},\"cancelLeaveCandidates(uint256)\":{\"custom:selector\":\"9c76ebb4\",\"details\":\"Cancel request to leave the set of collator candidates\",\"params\":{\"candidateCount\":\"The number of candidates in the CandidatePool\"}},\"cancelLeaveDelegators()\":{\"custom:selector\":\"f7421284\",\"details\":\"Cancel request to leave the set of delegators\"},\"candidateAutoCompoundingDelegationCount(address)\":{\"custom:selector\":\"905f0806\",\"details\":\"Get the CandidateAutoCompoundingDelegationCount weight hint\",\"params\":{\"candidate\":\"The address for which we are querying the auto compounding     delegation count\"},\"returns\":{\"_0\":\"The number of auto compounding delegations\"}},\"candidateBondMore(uint256)\":{\"custom:selector\":\"a52c8643\",\"details\":\"Request to bond more for collator candidates\",\"params\":{\"more\":\"The additional amount self-bonded\"}},\"candidateCount()\":{\"custom:selector\":\"a9a981a3\",\"details\":\"Get the CandidateCount weight hint\",\"returns\":{\"_0\":\"The CandidateCount weight hint\"}},\"candidateDelegationCount(address)\":{\"custom:selector\":\"2ec087eb\",\"details\":\"Get the CandidateDelegationCount weight hint\",\"params\":{\"candidate\":\"The address for which we are querying the nomination count\"},\"returns\":{\"_0\":\"The number of nominations backing the collator\"}},\"candidateExitIsPending(address)\":{\"custom:selector\":\"43443682\",\"details\":\"Whether there exists a pending exit for candidate\",\"params\":{\"candidate\":\"the candidate for which the exit request was made\"},\"returns\":{\"_0\":\"Whether a pending request exists for such delegation\"}},\"candidateRequestIsPending(address)\":{\"custom:selector\":\"d0deec11\",\"details\":\"Whether there exists a pending bond less request made by a candidate\",\"params\":{\"candidate\":\"the candidate which made the request\"},\"returns\":{\"_0\":\"Whether a pending bond less request was made by the candidate\"}},\"delegate(address,uint256,uint256,uint256)\":{\"custom:selector\":\"829f5ee3\",\"details\":\"Make a delegation in support of a collator candidate\",\"params\":{\"amount\":\"The amount bonded in support of the collator candidate\",\"candidate\":\"The address of the supported collator candidate\",\"candidateDelegationCount\":\"The number of delegations in support of the candidate\",\"delegatorDelegationCount\":\"The number of existing delegations by the caller\"}},\"delegateWithAutoCompound(address,uint256,uint8,uint256,uint256,uint256)\":{\"custom:selector\":\"4b8bc9bf\",\"details\":\"Make a delegation in support of a collator candidate\",\"params\":{\"amount\":\"The amount bonded in support of the collator candidate\",\"autoCompound\":\"The percent of reward that should be auto-compounded\",\"candidate\":\"The address of the supported collator candidate\",\"candidateAutoCompoundingDelegationCount\":\"The number of auto-compounding delegations in support of the candidate\",\"candidateDelegationCount\":\"The number of delegations in support of the candidate\",\"delegatorDelegationCount\":\"The number of existing delegations by the caller\"}},\"delegationAmount(address,address)\":{\"custom:selector\":\"a73e51bc\",\"details\":\"The amount delegated in support of the candidate by the delegator\",\"params\":{\"candidate\":\"The candidate for which the delegation is in support of\",\"delegator\":\"Who made this delegation\"},\"returns\":{\"_0\":\"The amount of the delegation in support of the candidate by the delegator\"}},\"delegationAutoCompound(address,address)\":{\"custom:selector\":\"b4d4c7fd\",\"details\":\"Returns the percent value of auto-compound set for a delegation\",\"params\":{\"candidate\":\"the candidate for which the delegation was made\",\"delegator\":\"the delegator that made the delegation\"},\"returns\":{\"_0\":\"Percent of rewarded amount that is auto-compounded on each payout\"}},\"delegationRequestIsPending(address,address)\":{\"custom:selector\":\"3b16def8\",\"details\":\"Whether there exists a pending request for a delegation made by a delegator\",\"params\":{\"candidate\":\"the candidate for which the delegation was made\",\"delegator\":\"the delegator that made the delegation\"},\"returns\":{\"_0\":\"Whether a pending request exists for such delegation\"}},\"delegatorBondMore(address,uint256)\":{\"custom:selector\":\"0465135b\",\"details\":\"Bond more for delegators with respect to a specific collator candidate\",\"params\":{\"candidate\":\"The address of the collator candidate for which delegation shall increase\",\"more\":\"The amount by which the delegation is increased\"}},\"delegatorDelegationCount(address)\":{\"custom:selector\":\"067ec822\",\"details\":\"Get the DelegatorDelegationCount weight hint\",\"params\":{\"delegator\":\"The address for which we are querying the delegation count\"},\"returns\":{\"_0\":\"The number of delegations made by the delegator\"}},\"executeCandidateBondLess(address)\":{\"custom:selector\":\"2e290290\",\"details\":\"Execute pending candidate bond request\",\"params\":{\"candidate\":\"The address for the candidate for which the request will be executed\"}},\"executeDelegationRequest(address,address)\":{\"custom:selector\":\"e98c8abe\",\"details\":\"Execute pending delegation request (if exists && is due)\",\"params\":{\"candidate\":\"The address of the candidate\",\"delegator\":\"The address of the delegator\"}},\"executeLeaveCandidates(address,uint256)\":{\"custom:selector\":\"3867f308\",\"details\":\"Execute due request to leave the set of collator candidates\",\"params\":{\"candidate\":\"The candidate address for which the pending exit request will be executed\",\"candidateDelegationCount\":\"The number of delegations for the candidate to be revoked\"}},\"executeLeaveDelegators(address,uint256)\":{\"custom:selector\":\"fb1e2bf9\",\"details\":\"Execute request to leave the set of delegators and revoke all delegations\",\"params\":{\"delegator\":\"The leaving delegator\",\"delegatorDelegationCount\":\"The number of active delegations to be revoked by delegator\"}},\"getCandidateTotalCounted(address)\":{\"custom:selector\":\"bc5a1043\",\"details\":\"Fetch the total staked towards a candidate.\",\"params\":{\"candidate\":\"Address of the candidate.\"},\"returns\":{\"_0\":\"Total amount of stake.\"}},\"getDelegatorTotalStaked(address)\":{\"custom:selector\":\"e6861713\",\"details\":\"Fetch the total staked amount of a delegator, regardless of the candidate.\",\"params\":{\"delegator\":\"Address of the delegator.\"},\"returns\":{\"_0\":\"Total amount of stake.\"}},\"goOffline()\":{\"custom:selector\":\"a6485ccd\",\"details\":\"Temporarily leave the set of collator candidates without unbonding\"},\"goOnline()\":{\"custom:selector\":\"6e5b676b\",\"details\":\"Rejoin the set of collator candidates if previously had called `goOffline`\"},\"isCandidate(address)\":{\"custom:selector\":\"d51b9e93\",\"details\":\"Check whether the specified address is currently a collator candidate\",\"params\":{\"candidate\":\"the address that we want to confirm is a collator andidate\"},\"returns\":{\"_0\":\"A boolean confirming whether the address is a collator candidate\"}},\"isDelegator(address)\":{\"custom:selector\":\"fd8ab482\",\"details\":\"Check whether the specified address is currently a staking delegator\",\"params\":{\"delegator\":\"the address that we want to confirm is a delegator\"},\"returns\":{\"_0\":\"A boolean confirming whether the address is a delegator\"}},\"isInTopDelegations(address,address)\":{\"custom:selector\":\"91cc8657\",\"details\":\"Whether the delegation is in the top delegations\",\"params\":{\"candidate\":\"The candidate for which the delegation is in support of\",\"delegator\":\"Who made this delegation\"},\"returns\":{\"_0\":\"If delegation is in top delegations (is counted)\"}},\"isSelectedCandidate(address)\":{\"custom:selector\":\"740d7d2a\",\"details\":\"Check whether the specifies address is currently a part of the active set\",\"params\":{\"candidate\":\"the address that we want to confirm is a part of the active set\"},\"returns\":{\"_0\":\"A boolean confirming whether the address is a part of the active set\"}},\"joinCandidates(uint256,uint256)\":{\"custom:selector\":\"1f2f83ad\",\"details\":\"Join the set of collator candidates\",\"params\":{\"amount\":\"The amount self-bonded by the caller to become a collator candidate\",\"candidateCount\":\"The number of candidates in the CandidatePool\"}},\"minDelegation()\":{\"custom:selector\":\"02985992\",\"details\":\"Get the minimum delegation amount\",\"returns\":{\"_0\":\"The minimum delegation amount\"}},\"points(uint256)\":{\"custom:selector\":\"9799b4e7\",\"details\":\"Total points awarded to all collators in a particular round\",\"params\":{\"round\":\"the round for which we are querying the points total\"},\"returns\":{\"_0\":\"The total points awarded to all collators in the round\"}},\"round()\":{\"custom:selector\":\"146ca531\",\"details\":\"Get the current round number\",\"returns\":{\"_0\":\"The current round number\"}},\"scheduleCandidateBondLess(uint256)\":{\"custom:selector\":\"60744ae0\",\"details\":\"Request to bond less for collator candidates\",\"params\":{\"less\":\"The amount to be subtracted from self-bond and unreserved\"}},\"scheduleDelegatorBondLess(address,uint256)\":{\"custom:selector\":\"c172fd2b\",\"details\":\"Request to bond less for delegators with respect to a specific collator candidate\",\"params\":{\"candidate\":\"The address of the collator candidate for which delegation shall decrease\",\"less\":\"The amount by which the delegation is decreased (upon execution)\"}},\"scheduleLeaveCandidates(uint256)\":{\"custom:selector\":\"b1a3c1b7\",\"details\":\"Request to leave the set of collator candidates\",\"params\":{\"candidateCount\":\"The number of candidates in the CandidatePool\"}},\"scheduleLeaveDelegators()\":{\"custom:selector\":\"f939dadb\",\"details\":\"Request to leave the set of delegators\"},\"scheduleRevokeDelegation(address)\":{\"custom:selector\":\"1a1c740c\",\"details\":\"Request to revoke an existing delegation\",\"params\":{\"candidate\":\"The address of the collator candidate which will no longer be supported\"}},\"selectedCandidates()\":{\"custom:selector\":\"bcf868a6\",\"details\":\"Get the selected candidates for the current round\",\"returns\":{\"_0\":\"The selected candidate accounts\"}},\"setAutoCompound(address,uint8,uint256,uint256)\":{\"custom:selector\":\"faa1786f\",\"details\":\"Sets an auto-compound value for a delegation\",\"params\":{\"candidate\":\"The address of the supported collator candidate\",\"candidateAutoCompoundingDelegationCount\":\"The number of auto-compounding delegations in support of the candidate\",\"delegatorDelegationCount\":\"The number of existing delegations by the caller\",\"value\":\"The percent of reward that should be auto-compounded\"}}},\"title\":\"Pallet Parachain Staking Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelLeaveDelegators()\":{\"notice\":\"DEPRECATED use batch util with cancelDelegationRequest for all delegations\"},\"executeLeaveDelegators(address,uint256)\":{\"notice\":\"DEPRECATED use batch util with executeDelegationRequest for all delegations\"},\"scheduleLeaveDelegators()\":{\"notice\":\"DEPRECATED use batch util with scheduleRevokeDelegation for all delegations\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"ParachainStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0xcee5d02a5487b700141fe9d596a7bdbde0a7b82f7f211d0f699cc71992ec5efb\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://4ffc4cc4651bd2fa2bda08943b30dd34b66c25a141dbab4a67885f9b44321ebb\",\"dweb:/ipfs/QmdTMpag5GJaAADdAzL85pAAKwW6bfidtYcCAms7uEEetJ\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": {
      "kind": "user",
      "methods": {
        "cancelLeaveDelegators()": {
          "notice": "DEPRECATED use batch util with cancelDelegationRequest for all delegations"
        },
        "executeLeaveDelegators(address,uint256)": {
          "notice": "DEPRECATED use batch util with executeDelegationRequest for all delegations"
        },
        "scheduleLeaveDelegators()": {
          "notice": "DEPRECATED use batch util with scheduleRevokeDelegation for all delegations"
        }
      },
      "version": 1
    }
  },
  "sourceCode": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\n/// @dev The ParachainStaking contract's address.\naddress constant PARACHAIN_STAKING_ADDRESS = 0x0000000000000000000000000000000000000800;\n\n/// @dev The ParachainStaking contract's instance.\nParachainStaking constant PARACHAIN_STAKING_CONTRACT = ParachainStaking(\n    PARACHAIN_STAKING_ADDRESS\n);\n\n/// @author The Moonbeam Team\n/// @title Pallet Parachain Staking Interface\n/// @dev The interface through which solidity contracts will interact with Parachain Staking\n/// We follow this same interface including four-byte function selectors, in the precompile that\n/// wraps the pallet\n/// @custom:address 0x0000000000000000000000000000000000000800\ninterface ParachainStaking {\n    /// @dev Check whether the specified address is currently a staking delegator\n    /// @custom:selector fd8ab482\n    /// @param delegator the address that we want to confirm is a delegator\n    /// @return A boolean confirming whether the address is a delegator\n    function isDelegator(address delegator) external view returns (bool);\n\n    /// @dev Check whether the specified address is currently a collator candidate\n    /// @custom:selector d51b9e93\n    /// @param candidate the address that we want to confirm is a collator andidate\n    /// @return A boolean confirming whether the address is a collator candidate\n    function isCandidate(address candidate) external view returns (bool);\n\n    /// @dev Check whether the specifies address is currently a part of the active set\n    /// @custom:selector 740d7d2a\n    /// @param candidate the address that we want to confirm is a part of the active set\n    /// @return A boolean confirming whether the address is a part of the active set\n    function isSelectedCandidate(address candidate)\n        external\n        view\n        returns (bool);\n\n    /// @dev Total points awarded to all collators in a particular round\n    /// @custom:selector 9799b4e7\n    /// @param round the round for which we are querying the points total\n    /// @return The total points awarded to all collators in the round\n    function points(uint256 round) external view returns (uint256);\n\n    /// @dev Total points awarded to a specific collator in a particular round.\n    /// A value of `0` may signify that no blocks were produced or that the storage for that round has been removed\n    /// @custom:selector bfea66ac\n    /// @param round the round for which we are querying the awarded points\n    /// @param candidate The candidate to whom the points are awarded\n    /// @return The total points awarded to the collator for the provided round\n    function awardedPoints(uint32 round, address candidate)\n        external\n        view\n        returns (uint32);\n\n    /// @dev The amount delegated in support of the candidate by the delegator\n    /// @custom:selector a73e51bc\n    /// @param delegator Who made this delegation\n    /// @param candidate The candidate for which the delegation is in support of\n    /// @return The amount of the delegation in support of the candidate by the delegator\n    function delegationAmount(address delegator, address candidate)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Whether the delegation is in the top delegations\n    /// @custom:selector 91cc8657\n    /// @param delegator Who made this delegation\n    /// @param candidate The candidate for which the delegation is in support of\n    /// @return If delegation is in top delegations (is counted)\n    function isInTopDelegations(address delegator, address candidate)\n        external\n        view\n        returns (bool);\n\n    /// @dev Get the minimum delegation amount\n    /// @custom:selector 02985992\n    /// @return The minimum delegation amount\n    function minDelegation() external view returns (uint256);\n\n    /// @dev Get the CandidateCount weight hint\n    /// @custom:selector a9a981a3\n    /// @return The CandidateCount weight hint\n    function candidateCount() external view returns (uint256);\n\n    /// @dev Get the current round number\n    /// @custom:selector 146ca531\n    /// @return The current round number\n    function round() external view returns (uint256);\n\n    /// @dev Get the CandidateDelegationCount weight hint\n    /// @custom:selector 2ec087eb\n    /// @param candidate The address for which we are querying the nomination count\n    /// @return The number of nominations backing the collator\n    function candidateDelegationCount(address candidate)\n        external\n        view\n        returns (uint32);\n\n    /// @dev Get the CandidateAutoCompoundingDelegationCount weight hint\n    /// @custom:selector 905f0806\n    /// @param candidate The address for which we are querying the auto compounding\n    ///     delegation count\n    /// @return The number of auto compounding delegations\n    function candidateAutoCompoundingDelegationCount(address candidate)\n        external\n        view\n        returns (uint32);\n\n    /// @dev Get the DelegatorDelegationCount weight hint\n    /// @custom:selector 067ec822\n    /// @param delegator The address for which we are querying the delegation count\n    /// @return The number of delegations made by the delegator\n    function delegatorDelegationCount(address delegator)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the selected candidates for the current round\n    /// @custom:selector bcf868a6\n    /// @return The selected candidate accounts\n    function selectedCandidates() external view returns (address[] memory);\n\n    /// @dev Whether there exists a pending request for a delegation made by a delegator\n    /// @custom:selector 3b16def8\n    /// @param delegator the delegator that made the delegation\n    /// @param candidate the candidate for which the delegation was made\n    /// @return Whether a pending request exists for such delegation\n    function delegationRequestIsPending(address delegator, address candidate)\n        external\n        view\n        returns (bool);\n\n    /// @dev Whether there exists a pending exit for candidate\n    /// @custom:selector 43443682\n    /// @param candidate the candidate for which the exit request was made\n    /// @return Whether a pending request exists for such delegation\n    function candidateExitIsPending(address candidate)\n        external\n        view\n        returns (bool);\n\n    /// @dev Whether there exists a pending bond less request made by a candidate\n    /// @custom:selector d0deec11\n    /// @param candidate the candidate which made the request\n    /// @return Whether a pending bond less request was made by the candidate\n    function candidateRequestIsPending(address candidate)\n        external\n        view\n        returns (bool);\n\n    /// @dev Returns the percent value of auto-compound set for a delegation\n    /// @custom:selector b4d4c7fd\n    /// @param delegator the delegator that made the delegation\n    /// @param candidate the candidate for which the delegation was made\n    /// @return Percent of rewarded amount that is auto-compounded on each payout\n    function delegationAutoCompound(address delegator, address candidate)\n        external\n        view\n        returns (uint8);\n\n    /// @dev Join the set of collator candidates\n    /// @custom:selector 1f2f83ad\n    /// @param amount The amount self-bonded by the caller to become a collator candidate\n    /// @param candidateCount The number of candidates in the CandidatePool\n    function joinCandidates(uint256 amount, uint256 candidateCount) external;\n\n    /// @dev Request to leave the set of collator candidates\n    /// @custom:selector b1a3c1b7\n    /// @param candidateCount The number of candidates in the CandidatePool\n    function scheduleLeaveCandidates(uint256 candidateCount) external;\n\n    /// @dev Execute due request to leave the set of collator candidates\n    /// @custom:selector 3867f308\n    /// @param candidate The candidate address for which the pending exit request will be executed\n    /// @param candidateDelegationCount The number of delegations for the candidate to be revoked\n    function executeLeaveCandidates(\n        address candidate,\n        uint256 candidateDelegationCount\n    ) external;\n\n    /// @dev Cancel request to leave the set of collator candidates\n    /// @custom:selector 9c76ebb4\n    /// @param candidateCount The number of candidates in the CandidatePool\n    function cancelLeaveCandidates(uint256 candidateCount) external;\n\n    /// @dev Temporarily leave the set of collator candidates without unbonding\n    /// @custom:selector a6485ccd\n    function goOffline() external;\n\n    /// @dev Rejoin the set of collator candidates if previously had called `goOffline`\n    /// @custom:selector 6e5b676b\n    function goOnline() external;\n\n    /// @dev Request to bond more for collator candidates\n    /// @custom:selector a52c8643\n    /// @param more The additional amount self-bonded\n    function candidateBondMore(uint256 more) external;\n\n    /// @dev Request to bond less for collator candidates\n    /// @custom:selector 60744ae0\n    /// @param less The amount to be subtracted from self-bond and unreserved\n    function scheduleCandidateBondLess(uint256 less) external;\n\n    /// @dev Execute pending candidate bond request\n    /// @custom:selector 2e290290\n    /// @param candidate The address for the candidate for which the request will be executed\n    function executeCandidateBondLess(address candidate) external;\n\n    /// @dev Cancel pending candidate bond request\n    /// @custom:selector b5ad5f07\n    function cancelCandidateBondLess() external;\n\n    /// @dev Make a delegation in support of a collator candidate\n    /// @custom:selector 829f5ee3\n    /// @param candidate The address of the supported collator candidate\n    /// @param amount The amount bonded in support of the collator candidate\n    /// @param candidateDelegationCount The number of delegations in support of the candidate\n    /// @param delegatorDelegationCount The number of existing delegations by the caller\n    function delegate(\n        address candidate,\n        uint256 amount,\n        uint256 candidateDelegationCount,\n        uint256 delegatorDelegationCount\n    ) external;\n\n    /// @dev Make a delegation in support of a collator candidate\n    /// @custom:selector 4b8bc9bf\n    /// @param candidate The address of the supported collator candidate\n    /// @param amount The amount bonded in support of the collator candidate\n    /// @param autoCompound The percent of reward that should be auto-compounded\n    /// @param candidateDelegationCount The number of delegations in support of the candidate\n    /// @param candidateAutoCompoundingDelegationCount The number of auto-compounding delegations\n    /// in support of the candidate\n    /// @param delegatorDelegationCount The number of existing delegations by the caller\n    function delegateWithAutoCompound(\n        address candidate,\n        uint256 amount,\n        uint8 autoCompound,\n        uint256 candidateDelegationCount,\n        uint256 candidateAutoCompoundingDelegationCount,\n        uint256 delegatorDelegationCount\n    ) external;\n\n    /// @notice DEPRECATED use batch util with scheduleRevokeDelegation for all delegations\n    /// @dev Request to leave the set of delegators\n    /// @custom:selector f939dadb\n    function scheduleLeaveDelegators() external;\n\n    /// @notice DEPRECATED use batch util with executeDelegationRequest for all delegations\n    /// @dev Execute request to leave the set of delegators and revoke all delegations\n    /// @custom:selector fb1e2bf9\n    /// @param delegator The leaving delegator\n    /// @param delegatorDelegationCount The number of active delegations to be revoked by delegator\n    function executeLeaveDelegators(\n        address delegator,\n        uint256 delegatorDelegationCount\n    ) external;\n\n    /// @notice DEPRECATED use batch util with cancelDelegationRequest for all delegations\n    /// @dev Cancel request to leave the set of delegators\n    /// @custom:selector f7421284\n    function cancelLeaveDelegators() external;\n\n    /// @dev Request to revoke an existing delegation\n    /// @custom:selector 1a1c740c\n    /// @param candidate The address of the collator candidate which will no longer be supported\n    function scheduleRevokeDelegation(address candidate) external;\n\n    /// @dev Bond more for delegators with respect to a specific collator candidate\n    /// @custom:selector 0465135b\n    /// @param candidate The address of the collator candidate for which delegation shall increase\n    /// @param more The amount by which the delegation is increased\n    function delegatorBondMore(address candidate, uint256 more) external;\n\n    /// @dev Request to bond less for delegators with respect to a specific collator candidate\n    /// @custom:selector c172fd2b\n    /// @param candidate The address of the collator candidate for which delegation shall decrease\n    /// @param less The amount by which the delegation is decreased (upon execution)\n    function scheduleDelegatorBondLess(address candidate, uint256 less)\n        external;\n\n    /// @dev Execute pending delegation request (if exists && is due)\n    /// @custom:selector e98c8abe\n    /// @param delegator The address of the delegator\n    /// @param candidate The address of the candidate\n    function executeDelegationRequest(address delegator, address candidate)\n        external;\n\n    /// @dev Cancel pending delegation request (already made in support of input by caller)\n    /// @custom:selector c90eee83\n    /// @param candidate The address of the candidate\n    function cancelDelegationRequest(address candidate) external;\n\n    /// @dev Sets an auto-compound value for a delegation\n    /// @custom:selector faa1786f\n    /// @param candidate The address of the supported collator candidate\n    /// @param value The percent of reward that should be auto-compounded\n    /// @param candidateAutoCompoundingDelegationCount The number of auto-compounding delegations\n    /// in support of the candidate\n    /// @param delegatorDelegationCount The number of existing delegations by the caller\n    function setAutoCompound(\n        address candidate,\n        uint8 value,\n        uint256 candidateAutoCompoundingDelegationCount,\n        uint256 delegatorDelegationCount\n    ) external;\n\n    /// @dev Fetch the total staked amount of a delegator, regardless of the\n    /// candidate.\n    /// @custom:selector e6861713\n    /// @param delegator Address of the delegator.\n    /// @return Total amount of stake.\n    function getDelegatorTotalStaked(address delegator)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Fetch the total staked towards a candidate.\n    /// @custom:selector bc5a1043\n    /// @param candidate Address of the candidate.\n    /// @return Total amount of stake.\n    function getCandidateTotalCounted(address candidate)\n        external\n        view\n        returns (uint256);\n}\n"
}
