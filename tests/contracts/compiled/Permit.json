{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "inputs": [],
        "name": "DOMAIN_SEPARATOR",
        "outputs": [
          { "internalType": "bytes32", "name": "", "type": "bytes32" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "owner", "type": "address" }
        ],
        "name": "nonces",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "owner", "type": "address" },
          { "internalType": "address", "name": "spender", "type": "address" },
          { "internalType": "uint256", "name": "value", "type": "uint256" },
          { "internalType": "uint256", "name": "deadline", "type": "uint256" },
          { "internalType": "uint8", "name": "v", "type": "uint8" },
          { "internalType": "bytes32", "name": "r", "type": "bytes32" },
          { "internalType": "bytes32", "name": "s", "type": "bytes32" }
        ],
        "name": "permit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "DOMAIN_SEPARATOR()": {
          "details": "Returns the EIP712 domain separator. It is used to avoid replay attacks accross assets or other similar EIP712 message structures. Selector: 0x3644e515"
        },
        "nonces(address)": {
          "details": "Returns the current nonce for given owner. A permit must have this nonce to be consumed, which will increase the nonce by one. Selector: 0x7ecebe00"
        },
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
          "details": "Consumes an approval permit. Anyone can call this function for a permit. Selector: 0xd505accf",
          "params": {
            "deadline": "Timestamp after which the permit will no longer be valid.",
            "owner": "Owner of the tokens issuing the permit",
            "r": "R component of the signature.",
            "s": "S component of the signature.",
            "spender": "Address whose allowance will be increased.",
            "v": "V component of the signature.",
            "value": "Allowed value."
          }
        }
      },
      "title": "Extension of the ERC20 interface that allows users to sign permit messages to interact with contracts without needing to make a first approve transaction.",
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "DOMAIN_SEPARATOR()": "3644e515",
        "nonces(address)": "7ecebe00",
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the EIP712 domain separator. It is used to avoid replay attacks accross assets or other similar EIP712 message structures. Selector: 0x3644e515\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for given owner. A permit must have this nonce to be consumed, which will increase the nonce by one. Selector: 0x7ecebe00\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Consumes an approval permit. Anyone can call this function for a permit. Selector: 0xd505accf\",\"params\":{\"deadline\":\"Timestamp after which the permit will no longer be valid.\",\"owner\":\"Owner of the tokens issuing the permit\",\"r\":\"R component of the signature.\",\"s\":\"S component of the signature.\",\"spender\":\"Address whose allowance will be increased.\",\"v\":\"V component of the signature.\",\"value\":\"Allowed value.\"}}},\"title\":\"Extension of the ERC20 interface that allows users to sign permit messages to interact with contracts without needing to make a first approve transaction.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0x3ddfb89aa6e0d9abfa373081c9331cf5ce045c5683c1ee33f379069db7cb082c\",\"urls\":[\"bzz-raw://f89244a238a65761e2b0fa4622083ffca01225dabe8b28cf55fa9482c9a5f44d\",\"dweb:/ipfs/QmcR2mLWLMFof1Jo89fHsqsSGhpB5fTcETiWeCvQpCg4cW\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "sourceCode": "pragma solidity ^0.8.0;\n\n/**\n * @title Extension of the ERC20 interface that allows users to\n * sign permit messages to interact with contracts without needing to\n * make a first approve transaction.\n */\ninterface Permit {\n    /**\n     * @dev Consumes an approval permit.\n     * Anyone can call this function for a permit.\n     * Selector: 0xd505accf\n     * @param owner Owner of the tokens issuing the permit\n     * @param spender Address whose allowance will be increased.\n     * @param value Allowed value.\n     * @param deadline Timestamp after which the permit will no longer be valid.\n     * @param v V component of the signature.\n     * @param r R component of the signature.\n     * @param s S component of the signature.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for given owner.\n     * A permit must have this nonce to be consumed, which will\n     * increase the nonce by one.\n     * Selector: 0x7ecebe00\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the EIP712 domain separator. It is used to avoid replay\n     * attacks accross assets or other similar EIP712 message structures.\n     * Selector: 0x3644e515\n     */\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
}
