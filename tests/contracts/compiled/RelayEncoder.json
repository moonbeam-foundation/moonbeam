{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "controllerAddress",
            "type": "uint256"
          },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          {
            "internalType": "bytes",
            "name": "rewardDestination",
            "type": "bytes"
          }
        ],
        "name": "encodeBond",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "amount", "type": "uint256" }
        ],
        "name": "encodeBondExtra",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "encodeChill",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint32", "name": "sender", "type": "uint32" }
        ],
        "name": "encodeHrmpAcceptOpenChannel",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint32", "name": "sender", "type": "uint32" },
          { "internalType": "uint32", "name": "recipient", "type": "uint32" }
        ],
        "name": "encodeHrmpCloseChannel",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint32", "name": "recipient", "type": "uint32" },
          { "internalType": "uint32", "name": "maxCapacity", "type": "uint32" },
          {
            "internalType": "uint32",
            "name": "maxMessageSize",
            "type": "uint32"
          }
        ],
        "name": "encodeHrmpInitOpenChannel",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "nominees",
            "type": "uint256[]"
          }
        ],
        "name": "encodeNominate",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "amount", "type": "uint256" }
        ],
        "name": "encodeRebond",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "controller", "type": "uint256" }
        ],
        "name": "encodeSetController",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "rewardDestination",
            "type": "bytes"
          }
        ],
        "name": "encodeSetPayee",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "amount", "type": "uint256" }
        ],
        "name": "encodeUnbond",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "comission", "type": "uint256" },
          { "internalType": "bool", "name": "blocked", "type": "bool" }
        ],
        "name": "encodeValidate",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint32", "name": "slashes", "type": "uint32" }
        ],
        "name": "encodeWithdrawUnbonded",
        "outputs": [
          { "internalType": "bytes", "name": "result", "type": "bytes" }
        ],
        "stateMutability": "pure",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "The Moonbeam Team",
      "custom:address": "0x0000000000000000000000000000000000000805",
      "details": "The interface through which solidity contracts will interact with Relay Encoder We follow this same interface including four-byte function selectors, in the precompile that wraps the pallet",
      "kind": "dev",
      "methods": {
        "encodeBond(uint256,uint256,bytes)": {
          "custom:selector": "a82948d4",
          "details": "Encode 'bond' relay call",
          "params": {
            "amount": ": The amount to bond",
            "controllerAddress": ": Address of the controller",
            "rewardDestination": ": the account that should receive the reward"
          },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeBondExtra(uint256)": {
          "custom:selector": "813667a0",
          "details": "Encode 'bondExtra' relay call",
          "params": { "amount": ": The extra amount to bond" },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeChill()": {
          "custom:selector": "b5eaac43",
          "details": "Encode 'chill' relay call",
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeHrmpAcceptOpenChannel(uint32)": {
          "custom:selector": "98a76477",
          "details": "Encode 'hrmp.accept_open_channel' relay call",
          "params": {
            "sender": ": The paraId from which we want to accept the channel"
          }
        },
        "encodeHrmpCloseChannel(uint32,uint32)": {
          "custom:selector": "9cfbdfc5",
          "details": "Encode 'hrmp.close_channel' relay call",
          "params": { "sender": ": The paraId of the recipient" }
        },
        "encodeHrmpInitOpenChannel(uint32,uint32,uint32)": {
          "custom:selector": "e5e20a64",
          "details": "Encode 'hrmp.init_open_channel' relay call",
          "params": {
            "maxCapacity": ": The maximum capacity for the channel",
            "maxMessageSize": ": The maximum message size for the channel",
            "recipient": ": The paraId to whom we want to initiate the open channel"
          },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeNominate(uint256[])": {
          "custom:selector": "d2ea7b08",
          "details": "Encode 'nominate' relay call",
          "params": {
            "nominees": ": An array of AccountIds corresponding to the accounts we will nominate"
          },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeRebond(uint256)": {
          "custom:selector": "0922ee17",
          "details": "Encode 'rebond' relay call",
          "params": { "amount": ": The amount to rebond" },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeSetController(uint256)": {
          "custom:selector": "07f7c6dc",
          "details": "Encode 'setController' relay call",
          "params": { "controller": ": The controller address" },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeSetPayee(bytes)": {
          "custom:selector": "414be337",
          "details": "Encode 'setPayee' relay call",
          "params": {
            "rewardDestination": ": the account that should receive the reward"
          },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeUnbond(uint256)": {
          "custom:selector": "51b14e57",
          "details": "Encode 'unbond' relay call",
          "params": { "amount": "The amount to unbond" },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeValidate(uint256,bool)": {
          "custom:selector": "bb64ca0c",
          "details": "Encode 'validate' relay call",
          "params": {
            "blocked": ": Whether or not the validator is accepting more nominations",
            "comission": ": Comission of the validator as partsPerBillion"
          },
          "returns": { "result": "The bytes associated with the encoded call" }
        },
        "encodeWithdrawUnbonded(uint32)": {
          "custom:selector": "d5ad108e",
          "details": "Encode 'withdrawUnbonded' relay call",
          "params": { "slashes": "Weight hint, number of slashing spans" },
          "returns": { "result": "The bytes associated with the encoded call" }
        }
      },
      "title": "Pallet Relay Encoder Interface",
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "encodeBond(uint256,uint256,bytes)": "a82948d4",
        "encodeBondExtra(uint256)": "813667a0",
        "encodeChill()": "b5eaac43",
        "encodeHrmpAcceptOpenChannel(uint32)": "98a76477",
        "encodeHrmpCloseChannel(uint32,uint32)": "9cfbdfc5",
        "encodeHrmpInitOpenChannel(uint32,uint32,uint32)": "e5e20a64",
        "encodeNominate(uint256[])": "d2ea7b08",
        "encodeRebond(uint256)": "0922ee17",
        "encodeSetController(uint256)": "07f7c6dc",
        "encodeSetPayee(bytes)": "414be337",
        "encodeUnbond(uint256)": "51b14e57",
        "encodeValidate(uint256,bool)": "bb64ca0c",
        "encodeWithdrawUnbonded(uint32)": "d5ad108e"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"controllerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rewardDestination\",\"type\":\"bytes\"}],\"name\":\"encodeBond\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"encodeBondExtra\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodeChill\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sender\",\"type\":\"uint32\"}],\"name\":\"encodeHrmpAcceptOpenChannel\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sender\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"recipient\",\"type\":\"uint32\"}],\"name\":\"encodeHrmpCloseChannel\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"recipient\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxCapacity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxMessageSize\",\"type\":\"uint32\"}],\"name\":\"encodeHrmpInitOpenChannel\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nominees\",\"type\":\"uint256[]\"}],\"name\":\"encodeNominate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"encodeRebond\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"controller\",\"type\":\"uint256\"}],\"name\":\"encodeSetController\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rewardDestination\",\"type\":\"bytes\"}],\"name\":\"encodeSetPayee\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"encodeUnbond\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"encodeValidate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"slashes\",\"type\":\"uint32\"}],\"name\":\"encodeWithdrawUnbonded\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Moonbeam Team\",\"custom:address\":\"0x0000000000000000000000000000000000000805\",\"details\":\"The interface through which solidity contracts will interact with Relay Encoder We follow this same interface including four-byte function selectors, in the precompile that wraps the pallet\",\"kind\":\"dev\",\"methods\":{\"encodeBond(uint256,uint256,bytes)\":{\"custom:selector\":\"a82948d4\",\"details\":\"Encode 'bond' relay call\",\"params\":{\"amount\":\": The amount to bond\",\"controllerAddress\":\": Address of the controller\",\"rewardDestination\":\": the account that should receive the reward\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeBondExtra(uint256)\":{\"custom:selector\":\"813667a0\",\"details\":\"Encode 'bondExtra' relay call\",\"params\":{\"amount\":\": The extra amount to bond\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeChill()\":{\"custom:selector\":\"b5eaac43\",\"details\":\"Encode 'chill' relay call\",\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeHrmpAcceptOpenChannel(uint32)\":{\"custom:selector\":\"98a76477\",\"details\":\"Encode 'hrmp.accept_open_channel' relay call\",\"params\":{\"sender\":\": The paraId from which we want to accept the channel\"}},\"encodeHrmpCloseChannel(uint32,uint32)\":{\"custom:selector\":\"9cfbdfc5\",\"details\":\"Encode 'hrmp.close_channel' relay call\",\"params\":{\"sender\":\": The paraId of the recipient\"}},\"encodeHrmpInitOpenChannel(uint32,uint32,uint32)\":{\"custom:selector\":\"e5e20a64\",\"details\":\"Encode 'hrmp.init_open_channel' relay call\",\"params\":{\"maxCapacity\":\": The maximum capacity for the channel\",\"maxMessageSize\":\": The maximum message size for the channel\",\"recipient\":\": The paraId to whom we want to initiate the open channel\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeNominate(uint256[])\":{\"custom:selector\":\"d2ea7b08\",\"details\":\"Encode 'nominate' relay call\",\"params\":{\"nominees\":\": An array of AccountIds corresponding to the accounts we will nominate\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeRebond(uint256)\":{\"custom:selector\":\"0922ee17\",\"details\":\"Encode 'rebond' relay call\",\"params\":{\"amount\":\": The amount to rebond\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeSetController(uint256)\":{\"custom:selector\":\"07f7c6dc\",\"details\":\"Encode 'setController' relay call\",\"params\":{\"controller\":\": The controller address\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeSetPayee(bytes)\":{\"custom:selector\":\"414be337\",\"details\":\"Encode 'setPayee' relay call\",\"params\":{\"rewardDestination\":\": the account that should receive the reward\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeUnbond(uint256)\":{\"custom:selector\":\"51b14e57\",\"details\":\"Encode 'unbond' relay call\",\"params\":{\"amount\":\"The amount to unbond\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeValidate(uint256,bool)\":{\"custom:selector\":\"bb64ca0c\",\"details\":\"Encode 'validate' relay call\",\"params\":{\"blocked\":\": Whether or not the validator is accepting more nominations\",\"comission\":\": Comission of the validator as partsPerBillion\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}},\"encodeWithdrawUnbonded(uint32)\":{\"custom:selector\":\"d5ad108e\",\"details\":\"Encode 'withdrawUnbonded' relay call\",\"params\":{\"slashes\":\"Weight hint, number of slashing spans\"},\"returns\":{\"result\":\"The bytes associated with the encoded call\"}}},\"title\":\"Pallet Relay Encoder Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"RelayEncoder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0xf93a0ff5a4e9e1306fafc6b3c77f062d024f3a65f8c96412b21b6aa9f1ec8d01\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://fba9b0e179b1d6c4a047d2b38b0e100e4202a0edbe8354448455800d9fc01aaf\",\"dweb:/ipfs/QmZKw7BL8Zr3Rj8SsSEWBDe3SL5GNfyEf8M77f2Td1KVzA\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "sourceCode": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\n/// @dev The RelayEncoder contract's address.\naddress constant RELAY_ENCODER_ADDRESS = 0x0000000000000000000000000000000000000805;\n\n/// @dev The RelayEncoder contract's instance.\nRelayEncoder constant RELAY_ENCODER_CONTRACT = RelayEncoder(\n    RELAY_ENCODER_ADDRESS\n);\n\n/// @author The Moonbeam Team\n/// @title Pallet Relay Encoder Interface\n/// @dev The interface through which solidity contracts will interact with Relay Encoder\n/// We follow this same interface including four-byte function selectors, in the precompile that\n/// wraps the pallet\n/// @custom:address 0x0000000000000000000000000000000000000805\ninterface RelayEncoder {\n    /// @dev Encode 'bond' relay call\n    /// @custom:selector a82948d4\n    /// @param controllerAddress: Address of the controller\n    /// @param amount: The amount to bond\n    /// @param rewardDestination: the account that should receive the reward\n    /// @return result The bytes associated with the encoded call\n    function encodeBond(\n        uint256 controllerAddress,\n        uint256 amount,\n        bytes memory rewardDestination\n    ) external pure returns (bytes memory result);\n\n    /// @dev Encode 'bondExtra' relay call\n    /// @custom:selector 813667a0\n    /// @param amount: The extra amount to bond\n    /// @return result The bytes associated with the encoded call\n    function encodeBondExtra(uint256 amount)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'unbond' relay call\n    /// @custom:selector 51b14e57\n    /// @param amount The amount to unbond\n    /// @return result The bytes associated with the encoded call\n    function encodeUnbond(uint256 amount)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'withdrawUnbonded' relay call\n    /// @custom:selector d5ad108e\n    /// @param slashes Weight hint, number of slashing spans\n    /// @return result The bytes associated with the encoded call\n    function encodeWithdrawUnbonded(uint32 slashes)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'validate' relay call\n    /// @custom:selector bb64ca0c\n    /// @param comission: Comission of the validator as partsPerBillion\n    /// @param blocked: Whether or not the validator is accepting more nominations\n    /// @return result The bytes associated with the encoded call\n    function encodeValidate(uint256 comission, bool blocked)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'nominate' relay call\n    /// @custom:selector d2ea7b08\n    /// @param nominees: An array of AccountIds corresponding to the accounts we will nominate\n    /// @return result The bytes associated with the encoded call\n    function encodeNominate(uint256[] memory nominees)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'chill' relay call\n    /// @custom:selector b5eaac43\n    /// @return result The bytes associated with the encoded call\n    function encodeChill() external pure returns (bytes memory result);\n\n    /// @dev Encode 'setPayee' relay call\n    /// @custom:selector 414be337\n    /// @param rewardDestination: the account that should receive the reward\n    /// @return result The bytes associated with the encoded call\n    function encodeSetPayee(bytes memory rewardDestination)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'setController' relay call\n    /// @custom:selector 07f7c6dc\n    /// @param controller: The controller address\n    /// @return result The bytes associated with the encoded call\n    function encodeSetController(uint256 controller)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'rebond' relay call\n    /// @custom:selector 0922ee17\n    /// @param amount: The amount to rebond\n    /// @return result The bytes associated with the encoded call\n    function encodeRebond(uint256 amount)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'hrmp.init_open_channel' relay call\n    /// @custom:selector e5e20a64\n    /// @param recipient: The paraId to whom we want to initiate the open channel\n    /// @param maxCapacity: The maximum capacity for the channel\n    /// @param maxMessageSize: The maximum message size for the channel\n    /// @return result The bytes associated with the encoded call\n    function encodeHrmpInitOpenChannel(uint32 recipient, uint32 maxCapacity, uint32 maxMessageSize)\n        external\n        pure\n        returns (bytes memory result);\n    \n    /// @dev Encode 'hrmp.accept_open_channel' relay call\n    /// @custom:selector 98a76477\n    /// @param sender: The paraId from which we want to accept the channel\n    function encodeHrmpAcceptOpenChannel(uint32 sender)\n        external\n        pure\n        returns (bytes memory result);\n\n    /// @dev Encode 'hrmp.close_channel' relay call\n    /// @custom:selector 9cfbdfc5\n    /// @param sender: The paraId of the sender\n    /// @param sender: The paraId of the recipient\n    function encodeHrmpCloseChannel(uint32 sender, uint32 recipient)\n        external\n        pure\n        returns (bytes memory result);\n}\n"
}
