{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "inputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct XcmTransactor.Multilocation",
            "name": "multilocation",
            "type": "tuple"
          }
        ],
        "name": "fee_per_second",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "fee_per_second",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint16", "name": "index", "type": "uint16" }
        ],
        "name": "index_to_account",
        "outputs": [
          { "internalType": "address", "name": "owner", "type": "address" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct XcmTransactor.Multilocation",
            "name": "multilocation",
            "type": "tuple"
          }
        ],
        "name": "transact_info",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "transact_extra_weight",
            "type": "uint64"
          },
          {
            "internalType": "uint256",
            "name": "fee_per_second",
            "type": "uint256"
          },
          { "internalType": "uint64", "name": "max_weight", "type": "uint64" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct XcmTransactor.Multilocation",
            "name": "multilocation",
            "type": "tuple"
          }
        ],
        "name": "transact_info_with_signed",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "transact_extra_weight",
            "type": "uint64"
          },
          {
            "internalType": "uint64",
            "name": "transact_extra_weight_signed",
            "type": "uint64"
          },
          { "internalType": "uint64", "name": "max_weight", "type": "uint64" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint8", "name": "transactor", "type": "uint8" },
          { "internalType": "uint16", "name": "index", "type": "uint16" },
          {
            "internalType": "address",
            "name": "currency_id",
            "type": "address"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" },
          { "internalType": "bytes", "name": "inner_call", "type": "bytes" }
        ],
        "name": "transact_through_derivative",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint8", "name": "transactor", "type": "uint8" },
          { "internalType": "uint16", "name": "index", "type": "uint16" },
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct XcmTransactor.Multilocation",
            "name": "fee_asset",
            "type": "tuple"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" },
          { "internalType": "bytes", "name": "inner_call", "type": "bytes" }
        ],
        "name": "transact_through_derivative_multilocation",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct XcmTransactor.Multilocation",
            "name": "dest",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "fee_location_address",
            "type": "address"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" },
          { "internalType": "bytes", "name": "call", "type": "bytes" }
        ],
        "name": "transact_through_signed",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct XcmTransactor.Multilocation",
            "name": "dest",
            "type": "tuple"
          },
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct XcmTransactor.Multilocation",
            "name": "fee_location",
            "type": "tuple"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" },
          { "internalType": "bytes", "name": "call", "type": "bytes" }
        ],
        "name": "transact_through_signed_multilocation",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "fee_per_second((uint8,bytes[]))": {
          "params": {
            "multilocation": "The asset location for which we want to know the fee per second value"
          },
          "returns": {
            "fee_per_second": "The fee per second that the reserve chain charges for this asset"
          }
        },
        "index_to_account(uint16)": {
          "params": {
            "index": "The index of which we want to retrieve the account"
          },
          "returns": { "owner": "The owner of the derivative index" }
        },
        "transact_info((uint8,bytes[]))": {
          "params": {
            "multilocation": "The location for which we want to know the transact info"
          },
          "returns": {
            "fee_per_second": "The amount of fee charged for a second of execution in the dest",
            "max_weight": "Maximum allowed weight for a single message in dest",
            "transact_extra_weight": "The extra weight involved in the XCM message of using derivative"
          }
        },
        "transact_info_with_signed((uint8,bytes[]))": {
          "params": {
            "multilocation": "The location for which we want to know the transact info"
          },
          "returns": {
            "max_weight": "Maximum allowed weight for a single message in dest",
            "transact_extra_weight": "The extra weight involved in the XCM message of using derivative",
            "transact_extra_weight_signed": "The extra weight involved in the XCM message of using signed"
          }
        },
        "transact_through_derivative(uint8,uint16,address,uint64,bytes)": {
          "details": "The token transfer burns/transfers the corresponding amount before sending",
          "params": {
            "currency_id": "Address of the currencyId of the asset to be used for fees It has to be a reserve of the destination chain",
            "index": "The index to be used",
            "inner_call": "The inner call to be executed in the destination chain",
            "transactor": "The transactor to be used",
            "weight": "The weight we want to buy in the destination chain"
          }
        },
        "transact_through_derivative_multilocation(uint8,uint16,(uint8,bytes[]),uint64,bytes)": {
          "details": "The token transfer burns/transfers the corresponding amount before sending",
          "params": {
            "fee_asset": "The asset in which we want to pay fees.  It has to be a reserve of the destination chain",
            "index": "The index to be used",
            "inner_call": "The inner call to be executed in the destination chain",
            "transactor": "The transactor to be used",
            "weight": "The weight we want to buy in the destination chain"
          }
        },
        "transact_through_signed((uint8,bytes[]),address,uint64,bytes)": {
          "details": "No token is burnt before sending the message. The caller must ensure the destination is able to undertand the DescendOrigin message, and create a unique account from which dispatch the call",
          "params": {
            "call": "The call to be executed in the destination chain",
            "dest": "The destination chain (as multilocation) where to send the message",
            "fee_location_address": "The ERC20 address of the token we want to use to pay for fees only callable if such an asset has been BRIDGED to our chain",
            "weight": "The weight we want to buy in the destination chain for the call to be made"
          }
        },
        "transact_through_signed_multilocation((uint8,bytes[]),(uint8,bytes[]),uint64,bytes)": {
          "details": "No token is burnt before sending the message. The caller must ensure the destination is able to undertand the DescendOrigin message, and create a unique account from which dispatch the call",
          "params": {
            "call": "The call to be executed in the destination chain",
            "dest": "The destination chain (as multilocation) where to send the message",
            "fee_location": "The asset multilocation that indentifies the fee payment currency It has to be a reserve of the destination chain",
            "weight": "The weight we want to buy in the destination chain for the call to be made"
          }
        }
      },
      "title": "Xcm Transactor Interface The interface through which solidity contracts will interact with xcm transactor pallet Address :    0x0000000000000000000000000000000000000806",
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "fee_per_second((uint8,bytes[]))": "83f09082",
        "index_to_account(uint16)": "71b0edfa",
        "transact_info((uint8,bytes[]))": "f87f493f",
        "transact_info_with_signed((uint8,bytes[]))": "cb26bf32",
        "transact_through_derivative(uint8,uint16,address,uint64,bytes)": "267d4062",
        "transact_through_derivative_multilocation(uint8,uint16,(uint8,bytes[]),uint64,bytes)": "9f89f03e",
        "transact_through_signed((uint8,bytes[]),address,uint64,bytes)": "0139d697",
        "transact_through_signed_multilocation((uint8,bytes[]),(uint8,bytes[]),uint64,bytes)": "19760407"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct XcmTransactor.Multilocation\",\"name\":\"multilocation\",\"type\":\"tuple\"}],\"name\":\"fee_per_second\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_per_second\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"index_to_account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct XcmTransactor.Multilocation\",\"name\":\"multilocation\",\"type\":\"tuple\"}],\"name\":\"transact_info\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"transact_extra_weight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fee_per_second\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"max_weight\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct XcmTransactor.Multilocation\",\"name\":\"multilocation\",\"type\":\"tuple\"}],\"name\":\"transact_info_with_signed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"transact_extra_weight\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"transact_extra_weight_signed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max_weight\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"transactor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"currency_id\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"inner_call\",\"type\":\"bytes\"}],\"name\":\"transact_through_derivative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"transactor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct XcmTransactor.Multilocation\",\"name\":\"fee_asset\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"inner_call\",\"type\":\"bytes\"}],\"name\":\"transact_through_derivative_multilocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct XcmTransactor.Multilocation\",\"name\":\"dest\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"fee_location_address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"call\",\"type\":\"bytes\"}],\"name\":\"transact_through_signed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct XcmTransactor.Multilocation\",\"name\":\"dest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct XcmTransactor.Multilocation\",\"name\":\"fee_location\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"call\",\"type\":\"bytes\"}],\"name\":\"transact_through_signed_multilocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fee_per_second((uint8,bytes[]))\":{\"params\":{\"multilocation\":\"The asset location for which we want to know the fee per second value\"},\"returns\":{\"fee_per_second\":\"The fee per second that the reserve chain charges for this asset\"}},\"index_to_account(uint16)\":{\"params\":{\"index\":\"The index of which we want to retrieve the account\"},\"returns\":{\"owner\":\"The owner of the derivative index\"}},\"transact_info((uint8,bytes[]))\":{\"params\":{\"multilocation\":\"The location for which we want to know the transact info\"},\"returns\":{\"fee_per_second\":\"The amount of fee charged for a second of execution in the dest\",\"max_weight\":\"Maximum allowed weight for a single message in dest\",\"transact_extra_weight\":\"The extra weight involved in the XCM message of using derivative\"}},\"transact_info_with_signed((uint8,bytes[]))\":{\"params\":{\"multilocation\":\"The location for which we want to know the transact info\"},\"returns\":{\"max_weight\":\"Maximum allowed weight for a single message in dest\",\"transact_extra_weight\":\"The extra weight involved in the XCM message of using derivative\",\"transact_extra_weight_signed\":\"The extra weight involved in the XCM message of using signed\"}},\"transact_through_derivative(uint8,uint16,address,uint64,bytes)\":{\"details\":\"The token transfer burns/transfers the corresponding amount before sending\",\"params\":{\"currency_id\":\"Address of the currencyId of the asset to be used for fees It has to be a reserve of the destination chain\",\"index\":\"The index to be used\",\"inner_call\":\"The inner call to be executed in the destination chain\",\"transactor\":\"The transactor to be used\",\"weight\":\"The weight we want to buy in the destination chain\"}},\"transact_through_derivative_multilocation(uint8,uint16,(uint8,bytes[]),uint64,bytes)\":{\"details\":\"The token transfer burns/transfers the corresponding amount before sending\",\"params\":{\"fee_asset\":\"The asset in which we want to pay fees.  It has to be a reserve of the destination chain\",\"index\":\"The index to be used\",\"inner_call\":\"The inner call to be executed in the destination chain\",\"transactor\":\"The transactor to be used\",\"weight\":\"The weight we want to buy in the destination chain\"}},\"transact_through_signed((uint8,bytes[]),address,uint64,bytes)\":{\"details\":\"No token is burnt before sending the message. The caller must ensure the destination is able to undertand the DescendOrigin message, and create a unique account from which dispatch the call\",\"params\":{\"call\":\"The call to be executed in the destination chain\",\"dest\":\"The destination chain (as multilocation) where to send the message\",\"fee_location_address\":\"The ERC20 address of the token we want to use to pay for fees only callable if such an asset has been BRIDGED to our chain\",\"weight\":\"The weight we want to buy in the destination chain for the call to be made\"}},\"transact_through_signed_multilocation((uint8,bytes[]),(uint8,bytes[]),uint64,bytes)\":{\"details\":\"No token is burnt before sending the message. The caller must ensure the destination is able to undertand the DescendOrigin message, and create a unique account from which dispatch the call\",\"params\":{\"call\":\"The call to be executed in the destination chain\",\"dest\":\"The destination chain (as multilocation) where to send the message\",\"fee_location\":\"The asset multilocation that indentifies the fee payment currency It has to be a reserve of the destination chain\",\"weight\":\"The weight we want to buy in the destination chain for the call to be made\"}}},\"title\":\"Xcm Transactor Interface The interface through which solidity contracts will interact with xcm transactor pallet Address :    0x0000000000000000000000000000000000000806\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fee_per_second((uint8,bytes[]))\":{\"notice\":\"Get fee per second charged in its reserve chain for an asset Selector 83f09082\"},\"index_to_account(uint16)\":{\"notice\":\"Get index of an account in xcm transactor Selector 71b0edfa\"},\"transact_info((uint8,bytes[]))\":{\"notice\":\"Get transact info of a multilocation Selector f87f493f\"},\"transact_info_with_signed((uint8,bytes[]))\":{\"notice\":\"Get transact info of a multilocation Selector cb26bf32\"},\"transact_through_derivative(uint8,uint16,address,uint64,bytes)\":{\"notice\":\"Transact through XCM using fee based on its currency_id Selector 267d4062\"},\"transact_through_derivative_multilocation(uint8,uint16,(uint8,bytes[]),uint64,bytes)\":{\"notice\":\"Transact through XCM using fee based on its multilocation Selector 9f89f03e\"},\"transact_through_signed((uint8,bytes[]),address,uint64,bytes)\":{\"notice\":\"Transact through XCM using fee based on its erc20 address through signed origins Selector 0139d697\"},\"transact_through_signed_multilocation((uint8,bytes[]),(uint8,bytes[]),uint64,bytes)\":{\"notice\":\"Transact through XCM using fee based on its multilocation through signed origins Selector 19760407\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"XcmTransactor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0x5a2f8ced3e0294d2d7748203ff07868d64fdae9536fe76518989196cd4438505\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://a9403f646e442983d4fcfcc0395277e33003a5a4a01d2f2d79fdb068f21b5ede\",\"dweb:/ipfs/QmSHGiFx2RurfXV79wpG7CUXBzmn3PugeUjv5q4H4SYuch\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": {
      "kind": "user",
      "methods": {
        "fee_per_second((uint8,bytes[]))": {
          "notice": "Get fee per second charged in its reserve chain for an asset Selector 83f09082"
        },
        "index_to_account(uint16)": {
          "notice": "Get index of an account in xcm transactor Selector 71b0edfa"
        },
        "transact_info((uint8,bytes[]))": {
          "notice": "Get transact info of a multilocation Selector f87f493f"
        },
        "transact_info_with_signed((uint8,bytes[]))": {
          "notice": "Get transact info of a multilocation Selector cb26bf32"
        },
        "transact_through_derivative(uint8,uint16,address,uint64,bytes)": {
          "notice": "Transact through XCM using fee based on its currency_id Selector 267d4062"
        },
        "transact_through_derivative_multilocation(uint8,uint16,(uint8,bytes[]),uint64,bytes)": {
          "notice": "Transact through XCM using fee based on its multilocation Selector 9f89f03e"
        },
        "transact_through_signed((uint8,bytes[]),address,uint64,bytes)": {
          "notice": "Transact through XCM using fee based on its erc20 address through signed origins Selector 0139d697"
        },
        "transact_through_signed_multilocation((uint8,bytes[]),(uint8,bytes[]),uint64,bytes)": {
          "notice": "Transact through XCM using fee based on its multilocation through signed origins Selector 19760407"
        }
      },
      "version": 1
    }
  },
  "sourceCode": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.0;\n\n/**\n * @title Xcm Transactor Interface\n * The interface through which solidity contracts will interact with xcm transactor pallet\n * Address :    0x0000000000000000000000000000000000000806\n */\n\ninterface XcmTransactor {\n\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\n    struct Multilocation {\n        uint8 parents;\n        bytes [] interior;\n    }\n\n    /** Get index of an account in xcm transactor\n     * Selector 71b0edfa\n     * @param index The index of which we want to retrieve the account\n    * @return owner The owner of the derivative index\n     */\n    function index_to_account(uint16 index) external view returns(address owner);\n\n    /// DEPRECATED, replaced by transact_info_with_signed\n    /** Get transact info of a multilocation\n     * Selector f87f493f\n     * @param multilocation The location for which we want to know the transact info\n     * @return transact_extra_weight The extra weight involved in the XCM message of using derivative\n     * @return fee_per_second The amount of fee charged for a second of execution in the dest\n     * @return max_weight Maximum allowed weight for a single message in dest\n     */\n    function transact_info(Multilocation memory multilocation) external view \n        returns(uint64 transact_extra_weight, uint256 fee_per_second, uint64 max_weight);\n    \n    /** Get transact info of a multilocation\n     * Selector cb26bf32\n     * @param multilocation The location for which we want to know the transact info\n     * @return transact_extra_weight The extra weight involved in the XCM message of using derivative\n     * @return transact_extra_weight_signed The extra weight involved in the XCM message of using signed\n     * @return max_weight Maximum allowed weight for a single message in dest\n     */\n    function transact_info_with_signed(Multilocation memory multilocation) external view \n        returns(uint64 transact_extra_weight, uint64 transact_extra_weight_signed, uint64 max_weight);\n\n    /** Get fee per second charged in its reserve chain for an asset\n     * Selector 83f09082\n     * @param multilocation The asset location for which we want to know the fee per second value\n     * @return fee_per_second The fee per second that the reserve chain charges for this asset\n     */\n    function fee_per_second(Multilocation memory multilocation) external view \n        returns(uint256 fee_per_second);\n\n    /** Transact through XCM using fee based on its multilocation\n    * Selector 9f89f03e\n    * @dev The token transfer burns/transfers the corresponding amount before sending\n    * @param transactor The transactor to be used\n    * @param index The index to be used\n    * @param fee_asset The asset in which we want to pay fees. \n    * It has to be a reserve of the destination chain\n    * @param weight The weight we want to buy in the destination chain\n    * @param inner_call The inner call to be executed in the destination chain\n    */\n    function transact_through_derivative_multilocation(\n        uint8 transactor,\n        uint16 index,\n        Multilocation memory fee_asset,\n        uint64 weight,\n        bytes memory inner_call\n    ) external;\n    \n    /** Transact through XCM using fee based on its currency_id\n    * Selector 267d4062\n    * @dev The token transfer burns/transfers the corresponding amount before sending\n    * @param transactor The transactor to be used\n    * @param index The index to be used\n    * @param currency_id Address of the currencyId of the asset to be used for fees\n    * It has to be a reserve of the destination chain\n    * @param weight The weight we want to buy in the destination chain\n    * @param inner_call The inner call to be executed in the destination chain\n    */\n    function transact_through_derivative(\n        uint8 transactor,\n        uint16 index,\n        address currency_id,\n        uint64 weight,\n        bytes memory inner_call\n    ) external;\n\n    /** Transact through XCM using fee based on its multilocation through signed origins\n    * Selector 19760407\n    * @dev No token is burnt before sending the message. The caller must ensure the destination\n    * is able to undertand the DescendOrigin message, and create a unique account from which\n    * dispatch the call\n    * @param dest The destination chain (as multilocation) where to send the message\n    * @param fee_location The asset multilocation that indentifies the fee payment currency\n    * It has to be a reserve of the destination chain\n    * @param weight The weight we want to buy in the destination chain for the call to be made\n    * @param call The call to be executed in the destination chain\n    */\n    function transact_through_signed_multilocation(\n        Multilocation memory dest,\n        Multilocation memory fee_location,\n        uint64 weight,\n        bytes memory call\n    ) external;\n\n    /** Transact through XCM using fee based on its erc20 address through signed origins\n    * Selector 0139d697\n    * @dev No token is burnt before sending the message. The caller must ensure the destination\n    * is able to undertand the DescendOrigin message, and create a unique account from which\n    * dispatch the call\n    * @param dest The destination chain (as multilocation) where to send the message\n    * @param fee_location_address The ERC20 address of the token we want to use to pay for fees\n    * only callable if such an asset has been BRIDGED to our chain\n    * @param weight The weight we want to buy in the destination chain for the call to be made\n    * @param call The call to be executed in the destination chain\n    */\n    function transact_through_signed(\n        Multilocation memory dest,\n        address fee_location_address,\n        uint64 weight,\n        bytes memory call\n    ) external;\n}"
}
