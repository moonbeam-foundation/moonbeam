{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "currencyAddress",
            "type": "address"
          },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct Xtokens.Multilocation",
            "name": "destination",
            "type": "tuple"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" }
        ],
        "name": "transfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "uint8",
                    "name": "parents",
                    "type": "uint8"
                  },
                  {
                    "internalType": "bytes[]",
                    "name": "interior",
                    "type": "bytes[]"
                  }
                ],
                "internalType": "struct Xtokens.Multilocation",
                "name": "location",
                "type": "tuple"
              },
              { "internalType": "uint256", "name": "amount", "type": "uint256" }
            ],
            "internalType": "struct Xtokens.MultiAsset[]",
            "name": "assets",
            "type": "tuple[]"
          },
          { "internalType": "uint32", "name": "feeItem", "type": "uint32" },
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct Xtokens.Multilocation",
            "name": "destination",
            "type": "tuple"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" }
        ],
        "name": "transferMultiAssets",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "currencyAddress",
                "type": "address"
              },
              { "internalType": "uint256", "name": "amount", "type": "uint256" }
            ],
            "internalType": "struct Xtokens.Currency[]",
            "name": "currencies",
            "type": "tuple[]"
          },
          { "internalType": "uint32", "name": "feeItem", "type": "uint32" },
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct Xtokens.Multilocation",
            "name": "destination",
            "type": "tuple"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" }
        ],
        "name": "transferMultiCurrencies",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct Xtokens.Multilocation",
            "name": "asset",
            "type": "tuple"
          },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct Xtokens.Multilocation",
            "name": "destination",
            "type": "tuple"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" }
        ],
        "name": "transferMultiasset",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct Xtokens.Multilocation",
            "name": "asset",
            "type": "tuple"
          },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          { "internalType": "uint256", "name": "fee", "type": "uint256" },
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct Xtokens.Multilocation",
            "name": "destination",
            "type": "tuple"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" }
        ],
        "name": "transferMultiassetWithFee",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "currencyAddress",
            "type": "address"
          },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          { "internalType": "uint256", "name": "fee", "type": "uint256" },
          {
            "components": [
              { "internalType": "uint8", "name": "parents", "type": "uint8" },
              {
                "internalType": "bytes[]",
                "name": "interior",
                "type": "bytes[]"
              }
            ],
            "internalType": "struct Xtokens.Multilocation",
            "name": "destination",
            "type": "tuple"
          },
          { "internalType": "uint64", "name": "weight", "type": "uint64" }
        ],
        "name": "transferWithFee",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "The Moonbeam Team",
      "custom:address": "0x0000000000000000000000000000000000000804",
      "details": "The interface through which solidity contracts will interact with xtokens pallet",
      "kind": "dev",
      "methods": {
        "transfer(address,uint256,(uint8,bytes[]),uint64)": {
          "custom:selector": "b9f813ff",
          "details": "The token transfer burns/transfers the corresponding amount before sending",
          "params": {
            "amount": "The amount of tokens we want to transfer",
            "currencyAddress": "The ERC20 address of the currency we want to transfer",
            "destination": "The weight we want to buy in the destination chain"
          }
        },
        "transferMultiAssets(((uint8,bytes[]),uint256)[],uint32,(uint8,bytes[]),uint64)": {
          "custom:selector": "797b45fd",
          "details": "The token transfer burns/transfers the corresponding amount before sending",
          "params": {
            "assets": "The assets we want to transfer, defined by their location and amount.",
            "destination": "The Multilocation to which we want to send the tokens",
            "feeItem": "Which of the currencies to be used as fee",
            "weight": "The weight we want to buy in the destination chain"
          }
        },
        "transferMultiCurrencies((address,uint256)[],uint32,(uint8,bytes[]),uint64)": {
          "custom:selector": "ab946323",
          "details": "The token transfer burns/transfers the corresponding amount before sending",
          "params": {
            "currencies": "The currencies we want to transfer, defined by their address and amount.",
            "destination": "The Multilocation to which we want to send the tokens",
            "feeItem": "Which of the currencies to be used as fee",
            "weight": "The weight we want to buy in the destination chain"
          }
        },
        "transferMultiasset((uint8,bytes[]),uint256,(uint8,bytes[]),uint64)": {
          "custom:selector": "b4f76f96",
          "details": "The token transfer burns/transfers the corresponding amount before sending",
          "params": {
            "amount": "The amount of tokens we want to transfer",
            "asset": "The asset we want to transfer, defined by its multilocation. Currently only Concrete Fungible assets",
            "destination": "The weight we want to buy in the destination chain"
          }
        },
        "transferMultiassetWithFee((uint8,bytes[]),uint256,uint256,(uint8,bytes[]),uint64)": {
          "custom:selector": "150c016a",
          "details": "The token transfer burns/transfers the corresponding amount before sending",
          "params": {
            "amount": "The amount of tokens we want to transfer",
            "asset": "The asset we want to transfer, defined by its multilocation. Currently only Concrete Fungible assets",
            "destination": "The weight we want to buy in the destination chain"
          }
        },
        "transferWithFee(address,uint256,uint256,(uint8,bytes[]),uint64)": {
          "custom:selector": "3e506ef0",
          "details": "The token transfer burns/transfers the corresponding amount before sending",
          "params": {
            "amount": "The amount of tokens we want to transfer",
            "currencyAddress": "The ERC20 address of the currency we want to transfer",
            "destination": "The weight we want to buy in the destination chain"
          }
        }
      },
      "title": "Xtokens Interface",
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "transfer(address,uint256,(uint8,bytes[]),uint64)": "b9f813ff",
        "transferMultiAssets(((uint8,bytes[]),uint256)[],uint32,(uint8,bytes[]),uint64)": "797b45fd",
        "transferMultiCurrencies((address,uint256)[],uint32,(uint8,bytes[]),uint64)": "ab946323",
        "transferMultiasset((uint8,bytes[]),uint256,(uint8,bytes[]),uint64)": "b4f76f96",
        "transferMultiassetWithFee((uint8,bytes[]),uint256,uint256,(uint8,bytes[]),uint64)": "150c016a",
        "transferWithFee(address,uint256,uint256,(uint8,bytes[]),uint64)": "3e506ef0"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"destination\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"location\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Xtokens.MultiAsset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feeItem\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"destination\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"transferMultiAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Xtokens.Currency[]\",\"name\":\"currencies\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feeItem\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"destination\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"transferMultiCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"destination\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"transferMultiasset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"destination\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"transferMultiassetWithFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"interior\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Xtokens.Multilocation\",\"name\":\"destination\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"transferWithFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Moonbeam Team\",\"custom:address\":\"0x0000000000000000000000000000000000000804\",\"details\":\"The interface through which solidity contracts will interact with xtokens pallet\",\"kind\":\"dev\",\"methods\":{\"transfer(address,uint256,(uint8,bytes[]),uint64)\":{\"custom:selector\":\"b9f813ff\",\"details\":\"The token transfer burns/transfers the corresponding amount before sending\",\"params\":{\"amount\":\"The amount of tokens we want to transfer\",\"currencyAddress\":\"The ERC20 address of the currency we want to transfer\",\"destination\":\"The weight we want to buy in the destination chain\"}},\"transferMultiAssets(((uint8,bytes[]),uint256)[],uint32,(uint8,bytes[]),uint64)\":{\"custom:selector\":\"797b45fd\",\"details\":\"The token transfer burns/transfers the corresponding amount before sending\",\"params\":{\"assets\":\"The assets we want to transfer, defined by their location and amount.\",\"destination\":\"The Multilocation to which we want to send the tokens\",\"feeItem\":\"Which of the currencies to be used as fee\",\"weight\":\"The weight we want to buy in the destination chain\"}},\"transferMultiCurrencies((address,uint256)[],uint32,(uint8,bytes[]),uint64)\":{\"custom:selector\":\"ab946323\",\"details\":\"The token transfer burns/transfers the corresponding amount before sending\",\"params\":{\"currencies\":\"The currencies we want to transfer, defined by their address and amount.\",\"destination\":\"The Multilocation to which we want to send the tokens\",\"feeItem\":\"Which of the currencies to be used as fee\",\"weight\":\"The weight we want to buy in the destination chain\"}},\"transferMultiasset((uint8,bytes[]),uint256,(uint8,bytes[]),uint64)\":{\"custom:selector\":\"b4f76f96\",\"details\":\"The token transfer burns/transfers the corresponding amount before sending\",\"params\":{\"amount\":\"The amount of tokens we want to transfer\",\"asset\":\"The asset we want to transfer, defined by its multilocation. Currently only Concrete Fungible assets\",\"destination\":\"The weight we want to buy in the destination chain\"}},\"transferMultiassetWithFee((uint8,bytes[]),uint256,uint256,(uint8,bytes[]),uint64)\":{\"custom:selector\":\"150c016a\",\"details\":\"The token transfer burns/transfers the corresponding amount before sending\",\"params\":{\"amount\":\"The amount of tokens we want to transfer\",\"asset\":\"The asset we want to transfer, defined by its multilocation. Currently only Concrete Fungible assets\",\"destination\":\"The weight we want to buy in the destination chain\"}},\"transferWithFee(address,uint256,uint256,(uint8,bytes[]),uint64)\":{\"custom:selector\":\"3e506ef0\",\"details\":\"The token transfer burns/transfers the corresponding amount before sending\",\"params\":{\"amount\":\"The amount of tokens we want to transfer\",\"currencyAddress\":\"The ERC20 address of the currency we want to transfer\",\"destination\":\"The weight we want to buy in the destination chain\"}}},\"title\":\"Xtokens Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transfer(address,uint256,(uint8,bytes[]),uint64)\":{\"notice\":\"Transfer a token through XCM based on its currencyId\"},\"transferMultiAssets(((uint8,bytes[]),uint256)[],uint32,(uint8,bytes[]),uint64)\":{\"notice\":\"Transfer several tokens at once through XCM based on its location specifying fee\"},\"transferMultiCurrencies((address,uint256)[],uint32,(uint8,bytes[]),uint64)\":{\"notice\":\"Transfer several tokens at once through XCM based on its address specifying fee\"},\"transferMultiasset((uint8,bytes[]),uint256,(uint8,bytes[]),uint64)\":{\"notice\":\"Transfer a token through XCM based on its MultiLocation\"},\"transferMultiassetWithFee((uint8,bytes[]),uint256,uint256,(uint8,bytes[]),uint64)\":{\"notice\":\"Transfer a token through XCM based on its MultiLocation specifying fee\"},\"transferWithFee(address,uint256,uint256,(uint8,bytes[]),uint64)\":{\"notice\":\"Transfer a token through XCM based on its currencyId specifying fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"Xtokens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"main.sol\":{\"keccak256\":\"0x324c9f99f65684f15c026c32896a03c048b33c16d832a70c5a2d27881d748218\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://1c975ccf001394fad68d755a7cc9ee78de5685f9785b3896ab0aa96017f1b1ad\",\"dweb:/ipfs/QmPXmiih79eR5yBLRr9EWC5rpsUPxfms8w61SH3gYbykLU\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": {
      "kind": "user",
      "methods": {
        "transfer(address,uint256,(uint8,bytes[]),uint64)": {
          "notice": "Transfer a token through XCM based on its currencyId"
        },
        "transferMultiAssets(((uint8,bytes[]),uint256)[],uint32,(uint8,bytes[]),uint64)": {
          "notice": "Transfer several tokens at once through XCM based on its location specifying fee"
        },
        "transferMultiCurrencies((address,uint256)[],uint32,(uint8,bytes[]),uint64)": {
          "notice": "Transfer several tokens at once through XCM based on its address specifying fee"
        },
        "transferMultiasset((uint8,bytes[]),uint256,(uint8,bytes[]),uint64)": {
          "notice": "Transfer a token through XCM based on its MultiLocation"
        },
        "transferMultiassetWithFee((uint8,bytes[]),uint256,uint256,(uint8,bytes[]),uint64)": {
          "notice": "Transfer a token through XCM based on its MultiLocation specifying fee"
        },
        "transferWithFee(address,uint256,uint256,(uint8,bytes[]),uint64)": {
          "notice": "Transfer a token through XCM based on its currencyId specifying fee"
        }
      },
      "version": 1
    }
  },
  "sourceCode": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\n/// @dev The Xtokens contract's address.\naddress constant XTOKENS_ADDRESS = 0x0000000000000000000000000000000000000804;\n\n/// @dev The Xtokens contract's instance.\nXtokens constant XTOKENS_CONTRACT = Xtokens(XTOKENS_ADDRESS);\n\n/// @author The Moonbeam Team\n/// @title Xtokens Interface\n/// @dev The interface through which solidity contracts will interact with xtokens pallet\n/// @custom:address 0x0000000000000000000000000000000000000804\ninterface Xtokens {\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\n    struct Multilocation {\n        uint8 parents;\n        bytes[] interior;\n    }\n\n    // A MultiAsset is defined by a multilocation and an amount\n    struct MultiAsset {\n        Multilocation location;\n        uint256 amount;\n    }\n\n    // A Currency is defined by address and the amount to be transferred\n    struct Currency {\n        address currencyAddress;\n        uint256 amount;\n    }\n\n    /// Transfer a token through XCM based on its currencyId\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector b9f813ff\n    function transfer(\n        address currencyAddress,\n        uint256 amount,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its currencyId specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector 3e506ef0\n    function transferWithFee(\n        address currencyAddress,\n        uint256 amount,\n        uint256 fee,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its MultiLocation\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param asset The asset we want to transfer, defined by its multilocation.\n    /// Currently only Concrete Fungible assets\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector b4f76f96\n    function transferMultiasset(\n        Multilocation memory asset,\n        uint256 amount,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param asset The asset we want to transfer, defined by its multilocation.\n    /// Currently only Concrete Fungible assets\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector 150c016a\n    function transferMultiassetWithFee(\n        Multilocation memory asset,\n        uint256 amount,\n        uint256 fee,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer several tokens at once through XCM based on its address specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\n    /// @param feeItem Which of the currencies to be used as fee\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain\n    /// @custom:selector ab946323\n    function transferMultiCurrencies(\n        Currency[] memory currencies,\n        uint32 feeItem,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer several tokens at once through XCM based on its location specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param assets The assets we want to transfer, defined by their location and amount.\n    /// @param feeItem Which of the currencies to be used as fee\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain\n    /// @custom:selector 797b45fd\n    function transferMultiAssets(\n        MultiAsset[] memory assets,\n        uint32 feeItem,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n}\n"
}
