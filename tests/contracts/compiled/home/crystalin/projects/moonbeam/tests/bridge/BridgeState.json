{"byteCode":"0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220d28c6f61656891176a1a973e8a954a0378632fe5c9b5cf781964fea130d329a564736f6c63430008130033","contract":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"assembly":"    /* \"main.sol\":1469:1525  contract BridgeState {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"main.sol\":1469:1525  contract BridgeState {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d28c6f61656891176a1a973e8a954a0378632fe5c9b5cf781964fea130d329a564736f6c63430008130033\n}\n","bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220d28c6f61656891176a1a973e8a954a0378632fe5c9b5cf781964fea130d329a564736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 DUP13 PUSH16 0x61656891176A1A973E8A954A0378632F 0xE5 0xC9 0xB5 0xCF PUSH25 0x1964FEA130D329A564736F6C63430008130033000000000000 ","sourceMap":"1469:56:1:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220d28c6f61656891176a1a973e8a954a0378632fe5c9b5cf781964fea130d329a564736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 DUP13 PUSH16 0x61656891176A1A973E8A954A0378632F 0xE5 0xC9 0xB5 0xCF PUSH25 0x1964FEA130D329A564736F6C63430008130033000000000000 ","sourceMap":"1469:56:1:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"legacyAssembly":{".code":[{"begin":1469,"end":1525,"name":"PUSH","source":1,"value":"80"},{"begin":1469,"end":1525,"name":"PUSH","source":1,"value":"40"},{"begin":1469,"end":1525,"name":"MSTORE","source":1},{"begin":1469,"end":1525,"name":"CALLVALUE","source":1},{"begin":1469,"end":1525,"name":"DUP1","source":1},{"begin":1469,"end":1525,"name":"ISZERO","source":1},{"begin":1469,"end":1525,"name":"PUSH [tag]","source":1,"value":"1"},{"begin":1469,"end":1525,"name":"JUMPI","source":1},{"begin":1469,"end":1525,"name":"PUSH","source":1,"value":"0"},{"begin":1469,"end":1525,"name":"DUP1","source":1},{"begin":1469,"end":1525,"name":"REVERT","source":1},{"begin":1469,"end":1525,"name":"tag","source":1,"value":"1"},{"begin":1469,"end":1525,"name":"JUMPDEST","source":1},{"begin":1469,"end":1525,"name":"POP","source":1},{"begin":1469,"end":1525,"name":"PUSH #[$]","source":1,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":1469,"end":1525,"name":"DUP1","source":1},{"begin":1469,"end":1525,"name":"PUSH [$]","source":1,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":1469,"end":1525,"name":"PUSH","source":1,"value":"0"},{"begin":1469,"end":1525,"name":"CODECOPY","source":1},{"begin":1469,"end":1525,"name":"PUSH","source":1,"value":"0"},{"begin":1469,"end":1525,"name":"RETURN","source":1}],".data":{"0":{".auxdata":"a2646970667358221220d28c6f61656891176a1a973e8a954a0378632fe5c9b5cf781964fea130d329a564736f6c63430008130033",".code":[{"begin":1469,"end":1525,"name":"PUSH","source":1,"value":"80"},{"begin":1469,"end":1525,"name":"PUSH","source":1,"value":"40"},{"begin":1469,"end":1525,"name":"MSTORE","source":1},{"begin":1469,"end":1525,"name":"PUSH","source":1,"value":"0"},{"begin":1469,"end":1525,"name":"DUP1","source":1},{"begin":1469,"end":1525,"name":"REVERT","source":1}]}},"sourceList":["BridgeStructs.sol","main.sol","#utility.yul"]},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"BridgeState\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BridgeStructs.sol\":{\"keccak256\":\"0x04a96ffde0bb54bcd6e28b77eb96ab8aa910761e5c84796bcd875d606e8dcf56\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://95f4f00fcaeb0879b9df203446e5d8140ce20cf6f99881a73bdda15831e561be\",\"dweb:/ipfs/QmNxYubia69TV8wr3DTHQ8PHSjE4P6GqBM9jTp3NgsB31o\"]},\"main.sol\":{\"keccak256\":\"0x20515fc63b5935f0d065cb511b801b5b185dde2c9ff6349c3df2a57c7c343a6a\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1134dfed85a8a491f65b99c41d1f48f151af8b6d84194dc2309e907ca3f289c6\",\"dweb:/ipfs/QmZPXryTHzXJTeyTfAHfHpYiBJs5kpV4AH3vCtHAkLSMFm\"]}},\"version\":1}","storageLayout":{"storage":[{"astId":62,"contract":"main.sol:BridgeState","label":"_state","offset":0,"slot":"0","type":"t_struct(State)58_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_address)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint16,t_bytes32)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_mapping(t_uint16,t_mapping(t_bytes32,t_address))":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => mapping(bytes32 => address))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_address)"},"t_struct(Provider)13_storage":{"encoding":"inplace","label":"struct BridgeStorage.Provider","members":[{"astId":4,"contract":"main.sol:BridgeState","label":"chainId","offset":0,"slot":"0","type":"t_uint16"},{"astId":6,"contract":"main.sol:BridgeState","label":"governanceChainId","offset":2,"slot":"0","type":"t_uint16"},{"astId":8,"contract":"main.sol:BridgeState","label":"finality","offset":4,"slot":"0","type":"t_uint8"},{"astId":10,"contract":"main.sol:BridgeState","label":"governanceContract","offset":0,"slot":"1","type":"t_bytes32"},{"astId":12,"contract":"main.sol:BridgeState","label":"WETH","offset":0,"slot":"2","type":"t_address"}],"numberOfBytes":"96"},"t_struct(State)58_storage":{"encoding":"inplace","label":"struct BridgeStorage.State","members":[{"astId":20,"contract":"main.sol:BridgeState","label":"wormhole","offset":0,"slot":"0","type":"t_address_payable"},{"astId":22,"contract":"main.sol:BridgeState","label":"tokenImplementation","offset":0,"slot":"1","type":"t_address"},{"astId":25,"contract":"main.sol:BridgeState","label":"provider","offset":0,"slot":"2","type":"t_struct(Provider)13_storage"},{"astId":29,"contract":"main.sol:BridgeState","label":"consumedGovernanceActions","offset":0,"slot":"5","type":"t_mapping(t_bytes32,t_bool)"},{"astId":33,"contract":"main.sol:BridgeState","label":"completedTransfers","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bool)"},{"astId":37,"contract":"main.sol:BridgeState","label":"initializedImplementations","offset":0,"slot":"7","type":"t_mapping(t_address,t_bool)"},{"astId":43,"contract":"main.sol:BridgeState","label":"wrappedAssets","offset":0,"slot":"8","type":"t_mapping(t_uint16,t_mapping(t_bytes32,t_address))"},{"astId":47,"contract":"main.sol:BridgeState","label":"isWrappedAsset","offset":0,"slot":"9","type":"t_mapping(t_address,t_bool)"},{"astId":51,"contract":"main.sol:BridgeState","label":"outstandingBridged","offset":0,"slot":"10","type":"t_mapping(t_address,t_uint256)"},{"astId":55,"contract":"main.sol:BridgeState","label":"bridgeImplementations","offset":0,"slot":"11","type":"t_mapping(t_uint16,t_bytes32)"},{"astId":57,"contract":"main.sol:BridgeState","label":"evmChainId","offset":0,"slot":"12","type":"t_uint256"}],"numberOfBytes":"416"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"sourceCode":"// contracts/State.sol\n// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\nimport \"./BridgeStructs.sol\";\n\ncontract BridgeStorage {\n    struct Provider {\n        uint16 chainId;\n        uint16 governanceChainId;\n        // Required number of block confirmations to assume finality\n        uint8 finality;\n        bytes32 governanceContract;\n        address WETH;\n    }\n\n    struct Asset {\n        uint16 chainId;\n        bytes32 assetAddress;\n    }\n\n    struct State {\n        address payable wormhole;\n        address tokenImplementation;\n\n        Provider provider;\n\n        // Mapping of consumed governance actions\n        mapping(bytes32 => bool) consumedGovernanceActions;\n\n        // Mapping of consumed token transfers\n        mapping(bytes32 => bool) completedTransfers;\n\n        // Mapping of initialized implementations\n        mapping(address => bool) initializedImplementations;\n\n        // Mapping of wrapped assets (chainID => nativeAddress => wrappedAddress)\n        mapping(uint16 => mapping(bytes32 => address)) wrappedAssets;\n\n        // Mapping to safely identify wrapped assets\n        mapping(address => bool) isWrappedAsset;\n\n        // Mapping of native assets to amount outstanding on other chains\n        mapping(address => uint256) outstandingBridged;\n\n        // Mapping of bridge contracts on other chains\n        mapping(uint16 => bytes32) bridgeImplementations;\n\n        // EIP-155 Chain ID\n        uint256 evmChainId;\n    }\n}\n\ncontract BridgeState {\n    BridgeStorage.State _state;\n}\n"}