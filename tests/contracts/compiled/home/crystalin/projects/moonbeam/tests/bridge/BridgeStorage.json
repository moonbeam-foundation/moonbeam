{"byteCode":"0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220cd8fb07aec38cc6301d296ae0649e40253bfde1c44e3af0fc827aa9d086bb39564736f6c63430008130033","contract":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"assembly":"    /* \"main.sol\":117:1467  contract BridgeStorage {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"main.sol\":117:1467  contract BridgeStorage {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cd8fb07aec38cc6301d296ae0649e40253bfde1c44e3af0fc827aa9d086bb39564736f6c63430008130033\n}\n","bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220cd8fb07aec38cc6301d296ae0649e40253bfde1c44e3af0fc827aa9d086bb39564736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD DUP16 0xB0 PUSH27 0xEC38CC6301D296AE0649E40253BFDE1C44E3AF0FC827AA9D086BB3 SWAP6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"117:1350:1:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220cd8fb07aec38cc6301d296ae0649e40253bfde1c44e3af0fc827aa9d086bb39564736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD DUP16 0xB0 PUSH27 0xEC38CC6301D296AE0649E40253BFDE1C44E3AF0FC827AA9D086BB3 SWAP6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"117:1350:1:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"legacyAssembly":{".code":[{"begin":117,"end":1467,"name":"PUSH","source":1,"value":"80"},{"begin":117,"end":1467,"name":"PUSH","source":1,"value":"40"},{"begin":117,"end":1467,"name":"MSTORE","source":1},{"begin":117,"end":1467,"name":"CALLVALUE","source":1},{"begin":117,"end":1467,"name":"DUP1","source":1},{"begin":117,"end":1467,"name":"ISZERO","source":1},{"begin":117,"end":1467,"name":"PUSH [tag]","source":1,"value":"1"},{"begin":117,"end":1467,"name":"JUMPI","source":1},{"begin":117,"end":1467,"name":"PUSH","source":1,"value":"0"},{"begin":117,"end":1467,"name":"DUP1","source":1},{"begin":117,"end":1467,"name":"REVERT","source":1},{"begin":117,"end":1467,"name":"tag","source":1,"value":"1"},{"begin":117,"end":1467,"name":"JUMPDEST","source":1},{"begin":117,"end":1467,"name":"POP","source":1},{"begin":117,"end":1467,"name":"PUSH #[$]","source":1,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":117,"end":1467,"name":"DUP1","source":1},{"begin":117,"end":1467,"name":"PUSH [$]","source":1,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":117,"end":1467,"name":"PUSH","source":1,"value":"0"},{"begin":117,"end":1467,"name":"CODECOPY","source":1},{"begin":117,"end":1467,"name":"PUSH","source":1,"value":"0"},{"begin":117,"end":1467,"name":"RETURN","source":1}],".data":{"0":{".auxdata":"a2646970667358221220cd8fb07aec38cc6301d296ae0649e40253bfde1c44e3af0fc827aa9d086bb39564736f6c63430008130033",".code":[{"begin":117,"end":1467,"name":"PUSH","source":1,"value":"80"},{"begin":117,"end":1467,"name":"PUSH","source":1,"value":"40"},{"begin":117,"end":1467,"name":"MSTORE","source":1},{"begin":117,"end":1467,"name":"PUSH","source":1,"value":"0"},{"begin":117,"end":1467,"name":"DUP1","source":1},{"begin":117,"end":1467,"name":"REVERT","source":1}]}},"sourceList":["BridgeStructs.sol","main.sol","#utility.yul"]},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"main.sol\":\"BridgeStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BridgeStructs.sol\":{\"keccak256\":\"0x04a96ffde0bb54bcd6e28b77eb96ab8aa910761e5c84796bcd875d606e8dcf56\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://95f4f00fcaeb0879b9df203446e5d8140ce20cf6f99881a73bdda15831e561be\",\"dweb:/ipfs/QmNxYubia69TV8wr3DTHQ8PHSjE4P6GqBM9jTp3NgsB31o\"]},\"main.sol\":{\"keccak256\":\"0x20515fc63b5935f0d065cb511b801b5b185dde2c9ff6349c3df2a57c7c343a6a\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1134dfed85a8a491f65b99c41d1f48f151af8b6d84194dc2309e907ca3f289c6\",\"dweb:/ipfs/QmZPXryTHzXJTeyTfAHfHpYiBJs5kpV4AH3vCtHAkLSMFm\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"sourceCode":"// contracts/State.sol\n// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\nimport \"./BridgeStructs.sol\";\n\ncontract BridgeStorage {\n    struct Provider {\n        uint16 chainId;\n        uint16 governanceChainId;\n        // Required number of block confirmations to assume finality\n        uint8 finality;\n        bytes32 governanceContract;\n        address WETH;\n    }\n\n    struct Asset {\n        uint16 chainId;\n        bytes32 assetAddress;\n    }\n\n    struct State {\n        address payable wormhole;\n        address tokenImplementation;\n\n        Provider provider;\n\n        // Mapping of consumed governance actions\n        mapping(bytes32 => bool) consumedGovernanceActions;\n\n        // Mapping of consumed token transfers\n        mapping(bytes32 => bool) completedTransfers;\n\n        // Mapping of initialized implementations\n        mapping(address => bool) initializedImplementations;\n\n        // Mapping of wrapped assets (chainID => nativeAddress => wrappedAddress)\n        mapping(uint16 => mapping(bytes32 => address)) wrappedAssets;\n\n        // Mapping to safely identify wrapped assets\n        mapping(address => bool) isWrappedAsset;\n\n        // Mapping of native assets to amount outstanding on other chains\n        mapping(address => uint256) outstandingBridged;\n\n        // Mapping of bridge contracts on other chains\n        mapping(uint16 => bytes32) bridgeImplementations;\n\n        // EIP-155 Chain ID\n        uint256 evmChainId;\n    }\n}\n\ncontract BridgeState {\n    BridgeStorage.State _state;\n}\n"}