{
  "byteCode": "0x",
  "contract": {
    "abi": [
      {
        "inputs": [
          { "internalType": "address", "name": "a", "type": "address" }
        ],
        "name": "isActivePrecompile",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "a", "type": "address" }
        ],
        "name": "isPrecompile",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "a", "type": "address" }
        ],
        "name": "updateAccountCode",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "The Moonbeam Team",
      "details": "Interface to the set of available precompiles.",
      "kind": "dev",
      "methods": {
        "isActivePrecompile(address)": {
          "custom:selector": "6f5e23cf",
          "details": "Query if the given address is an active precompile. Will return false if the address is not a precompile or if this precompile is deactivated.",
          "params": { "a": ": Address to query" },
          "returns": { "_0": "output Is this address an active precompile?" }
        },
        "isPrecompile(address)": {
          "custom:selector": "446b450e",
          "details": "Query if the given address is a precompile. Note that deactivated precompiles are still considered precompiles and will return `true`.",
          "params": { "a": ": Address to query" },
          "returns": { "_0": "output Is this address a precompile?" }
        },
        "updateAccountCode(address)": {
          "custom:selector": "48ceb1b4",
          "details": "Update the account code of a precompile address. As precompiles are implemented inside the Runtime, they don't have a bytecode, and their account code is empty by default. However in Solidity calling a function of a contract often automatically adds a check that the contract bytecode is non-empty. For that reason a dummy code (0x60006000fd) can be inserted at the precompile address to pass that check. This function allows any user to insert that code to precompile address if they need it.",
          "params": { "a": ": Address of the precompile." }
        }
      },
      "title": "Precompile Registry",
      "version": 1
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "isActivePrecompile(address)": "6f5e23cf",
        "isPrecompile(address)": "446b450e",
        "updateAccountCode(address)": "48ceb1b4"
      }
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isActivePrecompile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isPrecompile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"updateAccountCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Moonbeam Team\",\"details\":\"Interface to the set of available precompiles.\",\"kind\":\"dev\",\"methods\":{\"isActivePrecompile(address)\":{\"custom:selector\":\"6f5e23cf\",\"details\":\"Query if the given address is an active precompile. Will return false if the address is not a precompile or if this precompile is deactivated.\",\"params\":{\"a\":\": Address to query\"},\"returns\":{\"_0\":\"output Is this address an active precompile?\"}},\"isPrecompile(address)\":{\"custom:selector\":\"446b450e\",\"details\":\"Query if the given address is a precompile. Note that deactivated precompiles are still considered precompiles and will return `true`.\",\"params\":{\"a\":\": Address to query\"},\"returns\":{\"_0\":\"output Is this address a precompile?\"}},\"updateAccountCode(address)\":{\"custom:selector\":\"48ceb1b4\",\"details\":\"Update the account code of a precompile address. As precompiles are implemented inside the Runtime, they don't have a bytecode, and their account code is empty by default. However in Solidity calling a function of a contract often automatically adds a check that the contract bytecode is non-empty. For that reason a dummy code (0x60006000fd) can be inserted at the precompile address to pass that check. This function allows any user to insert that code to precompile address if they need it.\",\"params\":{\"a\":\": Address of the precompile.\"}}},\"title\":\"Precompile Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"PrecompileRegistry.sol\":\"PrecompileRegistry\"},\"debug\":{\"revertStrings\":\"debug\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"PrecompileRegistry.sol\":{\"keccak256\":\"0x6aebe4b2ca45800268776bbf5050ddbf55567b6838e4274fdaf20d47a26ea44f\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://01f901bfe27bfd4734601462b59d7b8089bb6329c48277b03bf8b8c3fb3cc626\",\"dweb:/ipfs/QmXrDvppzQmsxDRoXQX9KhiaUeeyWq9eMpX7rir8jS75g4\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "sourceCode": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\n/// @author The Moonbeam Team\n/// @title Precompile Registry\n/// @dev Interface to the set of available precompiles.\ninterface PrecompileRegistry {\n    /// @dev Query if the given address is a precompile. Note that deactivated precompiles\n    /// are still considered precompiles and will return `true`.\n    /// @param a: Address to query\n    /// @return output Is this address a precompile?\n    /// @custom:selector 446b450e\n    function isPrecompile(address a) external view returns (bool);\n\n    /// @dev Query if the given address is an active precompile. Will return false if the\n    /// address is not a precompile or if this precompile is deactivated.\n    /// @param a: Address to query\n    /// @return output Is this address an active precompile?\n    /// @custom:selector 6f5e23cf\n    function isActivePrecompile(address a) external view returns (bool);\n\n    /// @dev Update the account code of a precompile address.\n    /// As precompiles are implemented inside the Runtime, they don't have a bytecode, and\n    /// their account code is empty by default. However in Solidity calling a function of a\n    /// contract often automatically adds a check that the contract bytecode is non-empty.\n    /// For that reason a dummy code (0x60006000fd) can be inserted at the precompile address\n    /// to pass that check. This function allows any user to insert that code to precompile address\n    /// if they need it.\n    /// @param a: Address of the precompile.\n    /// @custom:selector 48ceb1b4\n    function updateAccountCode(address a) external;\n}\n"
}
