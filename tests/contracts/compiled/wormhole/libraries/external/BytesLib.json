{
  "byteCode": "0x60b26037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000006080604081905262461bcd60e51b815260206084908152603560a4527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b2060c4908152746e6f7220726563656976652066756e6374696f6e7360581b60e4523093909314929082fdfea2646970667358221220288f47e1ff667088d6961a4b540cd3d8bd630de28aa055ae60324b4c7044f3bb64736f6c63430008130033",
  "contract": {
    "abi": [],
    "devdoc": { "kind": "dev", "methods": {}, "version": 1 },
    "evm": {
      "assembly": "    /* \"BytesLib.sol\":370:19274  library BytesLib {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"BytesLib.sol\":370:19274  library BytesLib {... */\n      deployTimeAddress()\n      0x80\n      0x40\n      dup2\n      swap1\n      mstore\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x84\n      swap1\n      dup2\n      mstore\n      mstore(0xa4, 0x35)\n      0x436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b20\n      0xc4\n      swap1\n      dup2\n      mstore\n      mstore(0xe4, shl(0x58, 0x6e6f7220726563656976652066756e6374696f6e73))\n      address\n      swap4\n      swap1\n      swap4\n      eq\n      swap3\n      swap1\n      dup3\n      revert\n\n    auxdata: 0xa2646970667358221220288f47e1ff667088d6961a4b540cd3d8bd630de28aa055ae60324b4c7044f3bb64736f6c63430008130033\n}\n",
      "bytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "linkReferences": {},
        "object": "60b26037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000006080604081905262461bcd60e51b815260206084908152603560a4527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b2060c4908152746e6f7220726563656976652066756e6374696f6e7360581b60e4523093909314929082fdfea2646970667358221220288f47e1ff667088d6961a4b540cd3d8bd630de28aa055ae60324b4c7044f3bb64736f6c63430008130033",
        "opcodes": "PUSH1 0xB2 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 PUSH1 0x80 PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x84 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0xA4 MSTORE PUSH32 0x436F6E747261637420646F6573206E6F7420686176652066616C6C6261636B20 PUSH1 0xC4 SWAP1 DUP2 MSTORE PUSH21 0x6E6F7220726563656976652066756E6374696F6E73 PUSH1 0x58 SHL PUSH1 0xE4 MSTORE ADDRESS SWAP4 SWAP1 SWAP4 EQ SWAP3 SWAP1 DUP3 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 DUP16 SELFBALANCE 0xE1 SELFDESTRUCT PUSH7 0x7088D6961A4B54 0xC 0xD3 0xD8 0xBD PUSH4 0xDE28AA0 SSTORE 0xAE PUSH1 0x32 0x4B 0x4C PUSH17 0x44F3BB64736F6C63430008130033000000 ",
        "sourceMap": "370:18904:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;370:18904:0;;;;;;;;;;;;;;;;;"
      },
      "deployedBytecode": {
        "functionDebugData": {},
        "generatedSources": [],
        "immutableReferences": {},
        "linkReferences": {},
        "object": "7300000000000000000000000000000000000000006080604081905262461bcd60e51b815260206084908152603560a4527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b2060c4908152746e6f7220726563656976652066756e6374696f6e7360581b60e4523093909314929082fdfea2646970667358221220288f47e1ff667088d6961a4b540cd3d8bd630de28aa055ae60324b4c7044f3bb64736f6c63430008130033",
        "opcodes": "PUSH20 0x0 PUSH1 0x80 PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x84 SWAP1 DUP2 MSTORE PUSH1 0x35 PUSH1 0xA4 MSTORE PUSH32 0x436F6E747261637420646F6573206E6F7420686176652066616C6C6261636B20 PUSH1 0xC4 SWAP1 DUP2 MSTORE PUSH21 0x6E6F7220726563656976652066756E6374696F6E73 PUSH1 0x58 SHL PUSH1 0xE4 MSTORE ADDRESS SWAP4 SWAP1 SWAP4 EQ SWAP3 SWAP1 DUP3 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 DUP16 SELFBALANCE 0xE1 SELFDESTRUCT PUSH7 0x7088D6961A4B54 0xC 0xD3 0xD8 0xBD PUSH4 0xDE28AA0 SSTORE 0xAE PUSH1 0x32 0x4B 0x4C PUSH17 0x44F3BB64736F6C63430008130033000000 ",
        "sourceMap": "370:18904:0:-:0;;;;;;-1:-1:-1;;;370:18904:0;;;;;;;;;;;;;;;-1:-1:-1;;;370:18904:0;;;;;;;;;;"
      },
      "gasEstimates": {
        "creation": {
          "codeDepositCost": "35600",
          "executionCost": "118",
          "totalCost": "35718"
        },
        "internal": {
          "concat(bytes memory,bytes memory)": "infinite",
          "concatStorage(bytes storage pointer,bytes memory)": "infinite",
          "equal(bytes memory,bytes memory)": "infinite",
          "equalStorage(bytes storage pointer,bytes memory)": "infinite",
          "slice(bytes memory,uint256,uint256)": "infinite",
          "toAddress(bytes memory,uint256)": "infinite",
          "toBytes32(bytes memory,uint256)": "infinite",
          "toUint128(bytes memory,uint256)": "infinite",
          "toUint16(bytes memory,uint256)": "infinite",
          "toUint256(bytes memory,uint256)": "infinite",
          "toUint32(bytes memory,uint256)": "infinite",
          "toUint64(bytes memory,uint256)": "infinite",
          "toUint8(bytes memory,uint256)": "infinite",
          "toUint96(bytes memory,uint256)": "infinite"
        }
      },
      "legacyAssembly": {
        ".code": [
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH #[$]",
            "source": 0,
            "value": "0000000000000000000000000000000000000000000000000000000000000000"
          },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH [$]",
            "source": 0,
            "value": "0000000000000000000000000000000000000000000000000000000000000000"
          },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "B"
          },
          { "begin": 370, "end": 19274, "name": "DUP3", "source": 0 },
          { "begin": 370, "end": 19274, "name": "DUP3", "source": 0 },
          { "begin": 370, "end": 19274, "name": "DUP3", "source": 0 },
          { "begin": 370, "end": 19274, "name": "CODECOPY", "source": 0 },
          { "begin": 370, "end": 19274, "name": "DUP1", "source": 0 },
          { "begin": 370, "end": 19274, "name": "MLOAD", "source": 0 },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "0"
          },
          { "begin": 370, "end": 19274, "name": "BYTE", "source": 0 },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "73"
          },
          { "begin": 370, "end": 19274, "name": "EQ", "source": 0 },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH [tag]",
            "source": 0,
            "value": "1"
          },
          { "begin": 370, "end": 19274, "name": "JUMPI", "source": 0 },
          {
            "begin": -1,
            "end": -1,
            "name": "PUSH",
            "source": -1,
            "value": "4E487B71"
          },
          {
            "begin": -1,
            "end": -1,
            "name": "PUSH",
            "source": -1,
            "value": "E0"
          },
          { "begin": -1, "end": -1, "name": "SHL", "source": -1 },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "0"
          },
          { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "0"
          },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "4"
          },
          { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "24"
          },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "0"
          },
          { "begin": 370, "end": 19274, "name": "REVERT", "source": 0 },
          {
            "begin": 370,
            "end": 19274,
            "name": "tag",
            "source": 0,
            "value": "1"
          },
          { "begin": 370, "end": 19274, "name": "JUMPDEST", "source": 0 },
          { "begin": 370, "end": 19274, "name": "ADDRESS", "source": 0 },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "0"
          },
          { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
          {
            "begin": 370,
            "end": 19274,
            "name": "PUSH",
            "source": 0,
            "value": "73"
          },
          { "begin": 370, "end": 19274, "name": "DUP2", "source": 0 },
          { "begin": 370, "end": 19274, "name": "MSTORE8", "source": 0 },
          { "begin": 370, "end": 19274, "name": "DUP3", "source": 0 },
          { "begin": 370, "end": 19274, "name": "DUP2", "source": 0 },
          { "begin": 370, "end": 19274, "name": "RETURN", "source": 0 }
        ],
        ".data": {
          "0": {
            ".auxdata": "a2646970667358221220288f47e1ff667088d6961a4b540cd3d8bd630de28aa055ae60324b4c7044f3bb64736f6c63430008130033",
            ".code": [
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSHDEPLOYADDRESS",
                "source": 0
              },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "80"
              },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              { "begin": 370, "end": 19274, "name": "DUP2", "source": 0 },
              { "begin": 370, "end": 19274, "name": "SWAP1", "source": 0 },
              { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "461BCD"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "E5"
              },
              { "begin": -1, "end": -1, "name": "SHL", "source": -1 },
              { "begin": 370, "end": 19274, "name": "DUP2", "source": 0 },
              { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "84"
              },
              { "begin": 370, "end": 19274, "name": "SWAP1", "source": 0 },
              { "begin": 370, "end": 19274, "name": "DUP2", "source": 0 },
              { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "35"
              },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "A4"
              },
              { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "436F6E747261637420646F6573206E6F7420686176652066616C6C6261636B20"
              },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "C4"
              },
              { "begin": 370, "end": 19274, "name": "SWAP1", "source": 0 },
              { "begin": 370, "end": 19274, "name": "DUP2", "source": 0 },
              { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "6E6F7220726563656976652066756E6374696F6E73"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "58"
              },
              { "begin": -1, "end": -1, "name": "SHL", "source": -1 },
              {
                "begin": 370,
                "end": 19274,
                "name": "PUSH",
                "source": 0,
                "value": "E4"
              },
              { "begin": 370, "end": 19274, "name": "MSTORE", "source": 0 },
              { "begin": 370, "end": 19274, "name": "ADDRESS", "source": 0 },
              { "begin": 370, "end": 19274, "name": "SWAP4", "source": 0 },
              { "begin": 370, "end": 19274, "name": "SWAP1", "source": 0 },
              { "begin": 370, "end": 19274, "name": "SWAP4", "source": 0 },
              { "begin": 370, "end": 19274, "name": "EQ", "source": 0 },
              { "begin": 370, "end": 19274, "name": "SWAP3", "source": 0 },
              { "begin": 370, "end": 19274, "name": "SWAP1", "source": 0 },
              { "begin": 370, "end": 19274, "name": "DUP3", "source": 0 },
              { "begin": 370, "end": 19274, "name": "REVERT", "source": 0 }
            ]
          }
        },
        "sourceList": ["BytesLib.sol", "#utility.yul"]
      },
      "methodIdentifiers": {}
    },
    "ewasm": { "wasm": "" },
    "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BytesLib.sol\":\"BytesLib\"},\"debug\":{\"revertStrings\":\"debug\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BytesLib.sol\":{\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014\",\"dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn\"]}},\"version\":1}",
    "storageLayout": { "storage": [], "types": null },
    "userdoc": { "kind": "user", "methods": {}, "version": 1 }
  },
  "sourceCode": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
}
