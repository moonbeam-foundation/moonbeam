(function() {var type_impls = {
"moonbeam_rpc_debug":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Sender&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","moonbeam_rpc_debug::Responder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Drop-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","moonbeam_rpc_debug::Responder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send</a>(self, t: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to send a value on this channel, returning it back if it could\nnot be sent.</p>\n<p>This method consumes <code>self</code> as only one value may ever be sent on a <code>oneshot</code>\nchannel. It is not marked async because sending a message to an <code>oneshot</code>\nchannel never requires any form of waiting.  Because of this, the <code>send</code>\nmethod can be used in both synchronous and asynchronous code without\nproblems.</p>\n<p>A successful send occurs when it is determined that the other end of the\nchannel has not hung up already. An unsuccessful send would be one where\nthe corresponding receiver has already been deallocated. Note that a\nreturn value of <code>Err</code> means that the data will never be received, but\na return value of <code>Ok</code> does <em>not</em> mean that the data will be received.\nIt is possible for the corresponding receiver to hang up immediately\nafter this function returns <code>Ok</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Send a value to another task</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::oneshot;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, rx) = oneshot::channel();\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) = tx.send(<span class=\"number\">3</span>) {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"the receiver dropped\"</span>);\n        }\n    });\n\n    <span class=\"kw\">match </span>rx.<span class=\"kw\">await </span>{\n        <span class=\"prelude-val\">Ok</span>(v) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"got = {:?}\"</span>, v),\n        <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"the sender dropped\"</span>),\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.closed\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">closed</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Waits for the associated <a href=\"Receiver\"><code>Receiver</code></a> handle to close.</p>\n<p>A <a href=\"Receiver\"><code>Receiver</code></a> is closed by either calling <a href=\"Receiver::close\"><code>close</code></a> explicitly or the\n<a href=\"Receiver\"><code>Receiver</code></a> value is dropped.</p>\n<p>This function is useful when paired with <code>select!</code> to abort a\ncomputation when the receiver is no longer interested in the result.</p>\n<h5 id=\"return\"><a class=\"doc-anchor\" href=\"#return\">§</a>Return</h5>\n<p>Returns a <code>Future</code> which must be awaited on.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::oneshot;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>tx, rx) = oneshot::channel::&lt;()&gt;();\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        drop(rx);\n    });\n\n    tx.closed().<span class=\"kw\">await</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"the receiver dropped\"</span>);\n}</code></pre></div>\n<p>Paired with select</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::oneshot;\n<span class=\"kw\">use </span>tokio::time::{<span class=\"self\">self</span>, Duration};\n\n<span class=\"kw\">async fn </span>compute() -&gt; String {\n    <span class=\"comment\">// Complex computation returning a `String`\n</span>}\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>tx, rx) = oneshot::channel();\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"macro\">tokio::select!</span> {\n            <span class=\"kw\">_ </span>= tx.closed() =&gt; {\n                <span class=\"comment\">// The receiver dropped, no need to do any further work\n            </span>}\n            value = compute() =&gt; {\n                <span class=\"comment\">// The send can fail if the channel was closed at the exact same\n                // time as when compute() finished, so just ignore the failure.\n                </span><span class=\"kw\">let _ </span>= tx.send(value);\n            }\n        }\n    });\n\n    <span class=\"comment\">// Wait for up to 10 seconds\n    </span><span class=\"kw\">let _ </span>= time::timeout(Duration::from_secs(<span class=\"number\">10</span>), rx).<span class=\"kw\">await</span>;\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_closed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_closed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the associated <a href=\"Receiver\"><code>Receiver</code></a> handle has been dropped.</p>\n<p>A <a href=\"Receiver\"><code>Receiver</code></a> is closed by either calling <a href=\"Receiver::close\"><code>close</code></a> explicitly or the\n<a href=\"Receiver\"><code>Receiver</code></a> value is dropped.</p>\n<p>If <code>true</code> is returned, a call to <code>send</code> will always result in an error.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::oneshot;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, rx) = oneshot::channel();\n\n    <span class=\"macro\">assert!</span>(!tx.is_closed());\n\n    drop(rx);\n\n    <span class=\"macro\">assert!</span>(tx.is_closed());\n    <span class=\"macro\">assert!</span>(tx.send(<span class=\"string\">\"never received\"</span>).is_err());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_closed\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">poll_closed</a>(&amp;mut self, cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checks whether the <code>oneshot</code> channel has been closed, and if not, schedules the\n<code>Waker</code> in the provided <code>Context</code> to receive a notification when the channel is\nclosed.</p>\n<p>A <a href=\"struct@crate::sync::oneshot::Receiver\"><code>Receiver</code></a> is closed by either calling <a href=\"fn@crate::sync::oneshot::Receiver::close\"><code>close</code></a> explicitly, or when the\n<a href=\"struct@crate::sync::oneshot::Receiver\"><code>Receiver</code></a> value is dropped.</p>\n<p>Note that on multiple calls to poll, only the <code>Waker</code> from the <code>Context</code> passed\nto the most recent call will be scheduled to receive a wakeup.</p>\n<h5 id=\"return-value\"><a class=\"doc-anchor\" href=\"#return-value\">§</a>Return value</h5>\n<p>This function returns:</p>\n<ul>\n<li><code>Poll::Pending</code> if the channel is still open.</li>\n<li><code>Poll::Ready(())</code> if the channel is closed.</li>\n</ul>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::oneshot;\n\n<span class=\"kw\">use </span>std::future::poll_fn;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>tx, <span class=\"kw-2\">mut </span>rx) = oneshot::channel::&lt;()&gt;();\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        rx.close();\n    });\n\n    poll_fn(|cx| tx.poll_closed(cx)).<span class=\"kw\">await</span>;\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"the receiver dropped\"</span>);\n}</code></pre></div>\n</div></details></div></details>",0,"moonbeam_rpc_debug::Responder"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()